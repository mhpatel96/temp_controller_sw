
lcd_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1cc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000561c  0800c2e0  0800c2e0  0001c2e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118fc  080118fc  00030200  2**0
                  CONTENTS
  4 .ARM          00000000  080118fc  080118fc  00030200  2**0
                  CONTENTS
  5 .preinit_array 00000000  080118fc  080118fc  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118fc  080118fc  000218fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011900  08011900  00021900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08011904  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b40  20000200  08011b04  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d40  08011b04  00031d40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9e1  00000000  00000000  00030229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004202  00000000  00000000  0004dc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  00051e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c8  00000000  00000000  000537d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054f6  00000000  00000000  00054f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d27e  00000000  00000000  0005a48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bc25  00000000  00000000  0007770c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00113331  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c4  00000000  00000000  00113384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c2c4 	.word	0x0800c2c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800c2c4 	.word	0x0800c2c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <ITM_SendChar>:
	 \li Just returns when no debugger is connected that has booked the output.
	 \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
	 \param [in]     ch  Character to transmit.
	 \returns            Character to transmit.
	 */
	__STATIC_INLINE uint32_t ITM_SendChar(uint32_t ch) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
		if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) && /* ITM enabled */
 8000be0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000be4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d013      	beq.n	8000c18 <ITM_SendChar+0x40>
		((ITM->TER & 1UL) != 0UL)) /* ITM Port #0 enabled */
 8000bf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bf4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000bf8:	f003 0301 	and.w	r3, r3, #1
		if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) && /* ITM enabled */
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00b      	beq.n	8000c18 <ITM_SendChar+0x40>
		{
			while (ITM->PORT[0U].u32 == 0UL) {
 8000c00:	e000      	b.n	8000c04 <ITM_SendChar+0x2c>
				__NOP();
 8000c02:	bf00      	nop
			while (ITM->PORT[0U].u32 == 0UL) {
 8000c04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f9      	beq.n	8000c02 <ITM_SendChar+0x2a>
			}
			ITM->PORT[0U].u8 = (uint8_t) ch;
 8000c0e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	701a      	strb	r2, [r3, #0]
		}
		return (ch);
 8000c18:	687b      	ldr	r3, [r7, #4]
	}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initialises the Flash interface and the Systick. */
	HAL_Init();
 8000c28:	f002 f82a 	bl	8002c80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c2c:	f000 f840 	bl	8000cb0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialise all configured peripherals */
	MX_GPIO_Init();
 8000c30:	f000 f978 	bl	8000f24 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000c34:	f000 f898 	bl	8000d68 <MX_SPI1_Init>
	MX_TIM3_Init();
 8000c38:	f000 f8ce 	bl	8000dd8 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8000c3c:	f000 f926 	bl	8000e8c <MX_USART2_UART_Init>
	MX_USB_PCD_Init();
 8000c40:	f000 f94e 	bl	8000ee0 <MX_USB_PCD_Init>

//	LCD_0in96_test();
//	LCD_1in14_test();
//	LCD_1in28_test();
//	LCD_1in3_test();
	LCD_1in54_test();
 8000c44:	f001 ff1c 	bl	8002a80 <LCD_1in54_test>
	//LCD_2in4_test();

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000c48:	f004 f8d2 	bl	8004df0 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of vMainTask */
	vMainTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <main+0x64>)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	480e      	ldr	r0, [pc, #56]	; (8000c8c <main+0x68>)
 8000c52:	f004 f933 	bl	8004ebc <osThreadNew>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <main+0x6c>)
 8000c5a:	6013      	str	r3, [r2, #0]
			&vMainTask_attributes);

	/* creation of vDisplayTask */
	vDisplayTaskHandle = osThreadNew(StartTask02, NULL,
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <main+0x70>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <main+0x74>)
 8000c62:	f004 f92b 	bl	8004ebc <osThreadNew>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <main+0x78>)
 8000c6a:	6013      	str	r3, [r2, #0]
			&vDisplayTask_attributes);

	/* creation of vBluetoothTask */
	vBluetoothTaskHandle = osThreadNew(StartTask03, NULL,
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <main+0x7c>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <main+0x80>)
 8000c72:	f004 f923 	bl	8004ebc <osThreadNew>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <main+0x84>)
 8000c7a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000c7c:	f004 f8ea 	bl	8004e54 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	printf("Error starting scheduler\r\n");
 8000c80:	480a      	ldr	r0, [pc, #40]	; (8000cac <main+0x88>)
 8000c82:	f007 fed5 	bl	8008a30 <puts>
	while (1) {
 8000c86:	e7fe      	b.n	8000c86 <main+0x62>
 8000c88:	0800c700 	.word	0x0800c700
 8000c8c:	0800102d 	.word	0x0800102d
 8000c90:	200005ec 	.word	0x200005ec
 8000c94:	0800c724 	.word	0x0800c724
 8000c98:	0800104d 	.word	0x0800104d
 8000c9c:	200005f0 	.word	0x200005f0
 8000ca0:	0800c748 	.word	0x0800c748
 8000ca4:	0800105d 	.word	0x0800105d
 8000ca8:	200005f4 	.word	0x200005f4
 8000cac:	0800c30c 	.word	0x0800c30c

08000cb0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b094      	sub	sp, #80	; 0x50
 8000cb4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cba:	2228      	movs	r2, #40	; 0x28
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 fede 	bl	8007a80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]

	/** Initialises the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cfa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d00:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fbe4 	bl	80034d4 <HAL_RCC_OscConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x66>
		Error_Handler();
 8000d12:	f000 f9c9 	bl	80010a8 <Error_Handler>
	}

	/** Initialises the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d16:	230f      	movs	r3, #15
 8000d18:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d26:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2101      	movs	r1, #1
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 fe50 	bl	80039d8 <HAL_RCC_ClockConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0x92>
		Error_Handler();
 8000d3e:	f000 f9b3 	bl	80010a8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d42:	2310      	movs	r3, #16
 8000d44:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d4a:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 ffda 	bl	8003d08 <HAL_RCCEx_PeriphCLKConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0xae>
		Error_Handler();
 8000d5a:	f000 f9a5 	bl	80010a8 <Error_Handler>
	}
}
 8000d5e:	bf00      	nop
 8000d60:	3750      	adds	r7, #80	; 0x50
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialisation Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000d6e:	4a19      	ldr	r2, [pc, #100]	; (8000dd4 <MX_SPI1_Init+0x6c>)
 8000d70:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d78:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000d7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d80:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000d9e:	2208      	movs	r2, #8
 8000da0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000db6:	220a      	movs	r2, #10
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000dbc:	f003 f85a 	bl	8003e74 <HAL_SPI_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_SPI1_Init+0x62>
		Error_Handler();
 8000dc6:	f000 f96f 	bl	80010a8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */
//
	/* USER CODE END SPI1_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000021c 	.word	0x2000021c
 8000dd4:	40013000 	.word	0x40013000

08000dd8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialisation Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */
//
	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */
//
	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <MX_TIM3_Init+0xac>)
 8000dfc:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <MX_TIM3_Init+0xb0>)
 8000dfe:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000e00:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_TIM3_Init+0xac>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <MX_TIM3_Init+0xac>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_TIM3_Init+0xac>)
 8000e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e12:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_TIM3_Init+0xac>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_TIM3_Init+0xac>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000e20:	4818      	ldr	r0, [pc, #96]	; (8000e84 <MX_TIM3_Init+0xac>)
 8000e22:	f003 fa8d 	bl	8004340 <HAL_TIM_PWM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x58>
		Error_Handler();
 8000e2c:	f000 f93c 	bl	80010a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <MX_TIM3_Init+0xac>)
 8000e40:	f003 fe3c 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8000e4a:	f000 f92d 	bl	80010a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4e:	2360      	movs	r3, #96	; 0x60
 8000e50:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	4619      	mov	r1, r3
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <MX_TIM3_Init+0xac>)
 8000e66:	f003 fb5d 	bl	8004524 <HAL_TIM_PWM_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 8000e70:	f000 f91a 	bl	80010a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
//
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <MX_TIM3_Init+0xac>)
 8000e76:	f000 f9b3 	bl	80011e0 <HAL_TIM_MspPostInit>

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000274 	.word	0x20000274
 8000e88:	40000400 	.word	0x40000400

08000e8c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialisation Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */
//
	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_USART2_UART_Init+0x4c>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MX_USART2_UART_Init+0x50>)
 8000e94:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <MX_USART2_UART_Init+0x4c>)
 8000e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e9c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_USART2_UART_Init+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <MX_USART2_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_USART2_UART_Init+0x4c>)
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	f003 fe58 	bl	8004b78 <HAL_UART_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000ece:	f000 f8eb 	bl	80010a8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
//
	/* USER CODE END USART2_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200002bc 	.word	0x200002bc
 8000edc:	40004400 	.word	0x40004400

08000ee0 <MX_USB_PCD_Init>:
/**
 * @brief USB Initialisation Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <MX_USB_PCD_Init+0x3c>)
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <MX_USB_PCD_Init+0x40>)
 8000ee8:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_USB_PCD_Init+0x3c>)
 8000eec:	2208      	movs	r2, #8
 8000eee:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <MX_USB_PCD_Init+0x3c>)
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_USB_PCD_Init+0x3c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <MX_USB_PCD_Init+0x3c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_USB_PCD_Init+0x3c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_USB_PCD_Init+0x3c>)
 8000f0a:	f002 f9d8 	bl	80032be <HAL_PCD_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8000f14:	f000 f8c8 	bl	80010a8 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000300 	.word	0x20000300
 8000f20:	40005c00 	.word	0x40005c00

08000f24 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialisation Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f38:	4b38      	ldr	r3, [pc, #224]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a37      	ldr	r2, [pc, #220]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b35      	ldr	r3, [pc, #212]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f50:	4b32      	ldr	r3, [pc, #200]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a31      	ldr	r2, [pc, #196]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f56:	f043 0320 	orr.w	r3, r3, #32
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0320 	and.w	r3, r3, #32
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a2b      	ldr	r2, [pc, #172]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b29      	ldr	r3, [pc, #164]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a25      	ldr	r2, [pc, #148]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b23      	ldr	r3, [pc, #140]	; (800101c <MX_GPIO_Init+0xf8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9e:	4820      	ldr	r0, [pc, #128]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000fa0:	f002 f95c 	bl	800325c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin | LCD_RST_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000faa:	481e      	ldr	r0, [pc, #120]	; (8001024 <MX_GPIO_Init+0x100>)
 8000fac:	f002 f956 	bl	800325c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2140      	movs	r1, #64	; 0x40
 8000fb4:	481c      	ldr	r0, [pc, #112]	; (8001028 <MX_GPIO_Init+0x104>)
 8000fb6:	f002 f951 	bl	800325c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000fba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fbe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4813      	ldr	r0, [pc, #76]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000fd4:	f001 ffbe 	bl	8002f54 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
	GPIO_InitStruct.Pin = LCD_DC_Pin | LCD_RST_Pin;
 8000fd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fdc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <MX_GPIO_Init+0x100>)
 8000ff2:	f001 ffaf 	bl	8002f54 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_CS_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2302      	movs	r3, #2
 8001004:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4619      	mov	r1, r3
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_GPIO_Init+0x104>)
 800100e:	f001 ffa1 	bl	8002f54 <HAL_GPIO_Init>

}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	40011000 	.word	0x40011000
 8001024:	40010800 	.word	0x40010800
 8001028:	40010c00 	.word	0x40010c00

0800102c <StartDefaultTask>:
 * @brief  Function implementing the vMainTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	while (1) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <StartDefaultTask+0x1c>)
 800103a:	f002 f927 	bl	800328c <HAL_GPIO_TogglePin>
		osDelay(500);
 800103e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001042:	f003 ffe5 	bl	8005010 <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001046:	e7f5      	b.n	8001034 <StartDefaultTask+0x8>
 8001048:	40011000 	.word	0x40011000

0800104c <StartTask02>:
 * @brief Function implementing the vDisplayTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	while (1) {
		osDelay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f003 ffdb 	bl	8005010 <osDelay>
 800105a:	e7fb      	b.n	8001054 <StartTask02+0x8>

0800105c <StartTask03>:
 * @brief Function implementing the vBluetoothTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	while (1) {
		osDelay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f003 ffd3 	bl	8005010 <osDelay>
 800106a:	e7fb      	b.n	8001064 <StartTask03+0x8>

0800106c <_write>:

/**
 * @brief  Write function for printf calls
 * @retval None
 */
int _write(int file, char *ptr, int len) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++) {
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e009      	b.n	8001096 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	60ba      	str	r2, [r7, #8]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fda4 	bl	8000bd8 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	dbf1      	blt.n	8001082 <_write+0x16>
	}
	return len;
 800109e:	687b      	ldr	r3, [r7, #4]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	printf("HAL Error\r\n");
 80010ac:	4801      	ldr	r0, [pc, #4]	; (80010b4 <Error_Handler+0xc>)
 80010ae:	f007 fcbf 	bl	8008a30 <puts>
	while(1);
 80010b2:	e7fe      	b.n	80010b2 <Error_Handler+0xa>
 80010b4:	0800c328 	.word	0x0800c328

080010b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_MspInit+0x68>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HAL_MspInit+0x68>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_MspInit+0x68>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_MspInit+0x68>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a11      	ldr	r2, [pc, #68]	; (8001120 <HAL_MspInit+0x68>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x68>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	210f      	movs	r1, #15
 80010f2:	f06f 0001 	mvn.w	r0, #1
 80010f6:	f001 ff04 	bl	8002f02 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_MspInit+0x6c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_MspInit+0x6c>)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	40010000 	.word	0x40010000

08001128 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a15      	ldr	r2, [pc, #84]	; (8001198 <HAL_SPI_MspInit+0x70>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d123      	bne.n	8001190 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
//
  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_SPI_MspInit+0x74>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <HAL_SPI_MspInit+0x74>)
 800114e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_SPI_MspInit+0x74>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_SPI_MspInit+0x74>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_SPI_MspInit+0x74>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_SPI_MspInit+0x74>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001178:	23a0      	movs	r3, #160	; 0xa0
 800117a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_SPI_MspInit+0x78>)
 800118c:	f001 fee2 	bl	8002f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */
//
  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40013000 	.word	0x40013000
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010800 	.word	0x40010800

080011a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <HAL_TIM_PWM_MspInit+0x34>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d10b      	bne.n	80011ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_TIM_PWM_MspInit+0x38>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <HAL_TIM_PWM_MspInit+0x38>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_TIM_PWM_MspInit+0x38>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40000400 	.word	0x40000400
 80011dc:	40021000 	.word	0x40021000

080011e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <HAL_TIM_MspPostInit+0x58>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d117      	bne.n	8001230 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_TIM_MspPostInit+0x5c>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_TIM_MspPostInit+0x5c>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_TIM_MspPostInit+0x5c>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001218:	2340      	movs	r3, #64	; 0x40
 800121a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_TIM_MspPostInit+0x60>)
 800122c:	f001 fe92 	bl	8002f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40000400 	.word	0x40000400
 800123c:	40021000 	.word	0x40021000
 8001240:	40010800 	.word	0x40010800

08001244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_UART_MspInit+0x88>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d12f      	bne.n	80012c4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_UART_MspInit+0x8c>)
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	4a19      	ldr	r2, [pc, #100]	; (80012d0 <HAL_UART_MspInit+0x8c>)
 800126a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126e:	61d3      	str	r3, [r2, #28]
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <HAL_UART_MspInit+0x8c>)
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_UART_MspInit+0x8c>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <HAL_UART_MspInit+0x8c>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_UART_MspInit+0x8c>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001294:	2304      	movs	r3, #4
 8001296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4619      	mov	r1, r3
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <HAL_UART_MspInit+0x90>)
 80012a8:	f001 fe54 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012ac:	2308      	movs	r3, #8
 80012ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_UART_MspInit+0x90>)
 80012c0:	f001 fe48 	bl	8002f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40004400 	.word	0x40004400
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010800 	.word	0x40010800

080012d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a09      	ldr	r2, [pc, #36]	; (800130c <HAL_PCD_MspInit+0x34>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10b      	bne.n	8001302 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_PCD_MspInit+0x38>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_PCD_MspInit+0x38>)
 80012f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012f4:	61d3      	str	r3, [r2, #28]
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_PCD_MspInit+0x38>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40005c00 	.word	0x40005c00
 8001310:	40021000 	.word	0x40021000

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <HardFault_Handler+0x4>

08001326 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <MemManage_Handler+0x4>

0800132c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <BusFault_Handler+0x4>

08001332 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <UsageFault_Handler+0x4>

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f001 fce0 	bl	8002d0c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800134c:	f005 fa98 	bl	8006880 <xTaskGetSchedulerState>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d001      	beq.n	800135a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001356:	f005 fff7 	bl	8007348 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}

0800135e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
	return 1;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <_kill>:

int _kill(int pid, int sig)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001376:	f006 fa41 	bl	80077fc <__errno>
 800137a:	4603      	mov	r3, r0
 800137c:	2216      	movs	r2, #22
 800137e:	601a      	str	r2, [r3, #0]
	return -1;
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_exit>:

void _exit (int status)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffe7 	bl	800136c <_kill>
	while (1) {}		/* Make sure we hang here */
 800139e:	e7fe      	b.n	800139e <_exit+0x12>

080013a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e00a      	b.n	80013c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b2:	f3af 8000 	nop.w
 80013b6:	4601      	mov	r1, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60ba      	str	r2, [r7, #8]
 80013be:	b2ca      	uxtb	r2, r1
 80013c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf0      	blt.n	80013b2 <_read+0x12>
	}

return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:
	}
	return len;
}

int _close(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001400:	605a      	str	r2, [r3, #4]
	return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <_isatty>:

int _isatty(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	return 1;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
	return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
	...

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	; (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f006 f9c6 	bl	80077fc <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20005000 	.word	0x20005000
 800149c:	00000400 	.word	0x00000400
 80014a0:	200005f8 	.word	0x200005f8
 80014a4:	20001d40 	.word	0x20001d40

080014a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <SystemInit+0x5c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <SystemInit+0x5c>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <SystemInit+0x5c>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4911      	ldr	r1, [pc, #68]	; (8001504 <SystemInit+0x5c>)
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <SystemInit+0x60>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <SystemInit+0x5c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <SystemInit+0x5c>)
 80014ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <SystemInit+0x5c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SystemInit+0x5c>)
 80014da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <SystemInit+0x5c>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <SystemInit+0x5c>)
 80014e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80014ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SystemInit+0x5c>)
 80014ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <SystemInit+0x64>)
 80014f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	40021000 	.word	0x40021000
 8001508:	f8ff0000 	.word	0xf8ff0000
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	; (8001548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	; (800154c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	; (8001554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001536:	f7ff ffb7 	bl	80014a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153a:	f006 fa5b 	bl	80079f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153e:	f7ff fb71 	bl	8000c24 <main>
  bx lr
 8001542:	4770      	bx	lr
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800154c:	08011904 	.word	0x08011904
  ldr r2, =_sbss
 8001550:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001554:	20001d40 	.word	0x20001d40

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>
	...

0800155c <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8001566:	1df9      	adds	r1, r7, #7
 8001568:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800156c:	2201      	movs	r2, #1
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <DEV_SPI_WRite+0x20>)
 8001570:	f002 fd04 	bl	8003f7c <HAL_SPI_Transmit>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000021c 	.word	0x2000021c

08001580 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158a:	480a      	ldr	r0, [pc, #40]	; (80015b4 <DEV_Module_Init+0x34>)
 800158c:	f001 fe66 	bl	800325c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8001590:	2201      	movs	r2, #1
 8001592:	2140      	movs	r1, #64	; 0x40
 8001594:	4808      	ldr	r0, [pc, #32]	; (80015b8 <DEV_Module_Init+0x38>)
 8001596:	f001 fe61 	bl	800325c <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800159a:	2201      	movs	r2, #1
 800159c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <DEV_Module_Init+0x34>)
 80015a2:	f001 fe5b 	bl	800325c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015a6:	2104      	movs	r1, #4
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <DEV_Module_Init+0x3c>)
 80015aa:	f002 ff19 	bl	80043e0 <HAL_TIM_PWM_Start>
		return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40010800 	.word	0x40010800
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	20000274 	.word	0x20000274

080015c0 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	80fb      	strh	r3, [r7, #6]
 80015d2:	4603      	mov	r3, r0
 80015d4:	80bb      	strh	r3, [r7, #4]
 80015d6:	460b      	mov	r3, r1
 80015d8:	807b      	strh	r3, [r7, #2]
 80015da:	4613      	mov	r3, r2
 80015dc:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <Paint_NewImage+0x90>)
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80015e4:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <Paint_NewImage+0x90>)
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 80015ea:	4a19      	ldr	r2, [pc, #100]	; (8001650 <Paint_NewImage+0x90>)
 80015ec:	883b      	ldrh	r3, [r7, #0]
 80015ee:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 80015f0:	4a17      	ldr	r2, [pc, #92]	; (8001650 <Paint_NewImage+0x90>)
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 80015f6:	4a16      	ldr	r2, [pc, #88]	; (8001650 <Paint_NewImage+0x90>)
 80015f8:	88bb      	ldrh	r3, [r7, #4]
 80015fa:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <Paint_NewImage+0x90>)
 80015fe:	8a5b      	ldrh	r3, [r3, #18]
 8001600:	b29b      	uxth	r3, r3
 8001602:	4619      	mov	r1, r3
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <Paint_NewImage+0x90>)
 8001606:	8a9b      	ldrh	r3, [r3, #20]
 8001608:	b29b      	uxth	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	4811      	ldr	r0, [pc, #68]	; (8001654 <Paint_NewImage+0x94>)
 800160e:	f007 f989 	bl	8008924 <iprintf>
   
    Paint.Rotate = Rotate;
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <Paint_NewImage+0x90>)
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <Paint_NewImage+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <Paint_NewImage+0x6a>
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	2bb4      	cmp	r3, #180	; 0xb4
 8001628:	d106      	bne.n	8001638 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <Paint_NewImage+0x90>)
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <Paint_NewImage+0x90>)
 8001632:	88bb      	ldrh	r3, [r7, #4]
 8001634:	80d3      	strh	r3, [r2, #6]
 8001636:	e006      	b.n	8001646 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8001638:	4a05      	ldr	r2, [pc, #20]	; (8001650 <Paint_NewImage+0x90>)
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <Paint_NewImage+0x90>)
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	80d3      	strh	r3, [r2, #6]
    }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}
 800164e:	bf00      	nop
 8001650:	200005fc 	.word	0x200005fc
 8001654:	0800c334 	.word	0x0800c334

08001658 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8001660:	4a03      	ldr	r2, [pc, #12]	; (8001670 <Paint_SetClearFuntion+0x18>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	20000618 	.word	0x20000618

08001674 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 800167c:	4a03      	ldr	r2, [pc, #12]	; (800168c <Paint_SetDisplayFuntion+0x18>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	20000614 	.word	0x20000614

08001690 <Paint_SetRotate>:
function:	Select Image Rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint_SetRotate(UWORD Rotate)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <Paint_SetRotate+0x24>
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	2b5a      	cmp	r3, #90	; 0x5a
 80016a4:	d006      	beq.n	80016b4 <Paint_SetRotate+0x24>
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	2bb4      	cmp	r3, #180	; 0xb4
 80016aa:	d003      	beq.n	80016b4 <Paint_SetRotate+0x24>
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80016b2:	d108      	bne.n	80016c6 <Paint_SetRotate+0x36>
        Debug("Set image Rotate %d\r\n", Rotate);
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <Paint_SetRotate+0x48>)
 80016ba:	f007 f933 	bl	8008924 <iprintf>
        Paint.Rotate = Rotate;
 80016be:	4a07      	ldr	r2, [pc, #28]	; (80016dc <Paint_SetRotate+0x4c>)
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	81d3      	strh	r3, [r2, #14]
 80016c4:	e003      	b.n	80016ce <Paint_SetRotate+0x3e>
    } else {
        Debug("rotate = 0, 90, 180, 270\r\n");
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <Paint_SetRotate+0x50>)
 80016c8:	f007 f9b2 	bl	8008a30 <puts>
      //  exit(0);
    }
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	0800c358 	.word	0x0800c358
 80016dc:	200005fc 	.word	0x200005fc
 80016e0:	0800c378 	.word	0x0800c378

080016e4 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
 80016ee:	460b      	mov	r3, r1
 80016f0:	80bb      	strh	r3, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80016f6:	4b50      	ldr	r3, [pc, #320]	; (8001838 <Paint_SetPixel+0x154>)
 80016f8:	889b      	ldrh	r3, [r3, #4]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	88fa      	ldrh	r2, [r7, #6]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d805      	bhi.n	800170e <Paint_SetPixel+0x2a>
 8001702:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <Paint_SetPixel+0x154>)
 8001704:	88db      	ldrh	r3, [r3, #6]
 8001706:	b29b      	uxth	r3, r3
 8001708:	88ba      	ldrh	r2, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d903      	bls.n	8001716 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 800170e:	484b      	ldr	r0, [pc, #300]	; (800183c <Paint_SetPixel+0x158>)
 8001710:	f007 f98e 	bl	8008a30 <puts>
        return;
 8001714:	e08c      	b.n	8001830 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8001716:	4b48      	ldr	r3, [pc, #288]	; (8001838 <Paint_SetPixel+0x154>)
 8001718:	89db      	ldrh	r3, [r3, #14]
 800171a:	b29b      	uxth	r3, r3
 800171c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001720:	d02d      	beq.n	800177e <Paint_SetPixel+0x9a>
 8001722:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001726:	f300 8080 	bgt.w	800182a <Paint_SetPixel+0x146>
 800172a:	2bb4      	cmp	r3, #180	; 0xb4
 800172c:	d016      	beq.n	800175c <Paint_SetPixel+0x78>
 800172e:	2bb4      	cmp	r3, #180	; 0xb4
 8001730:	dc7b      	bgt.n	800182a <Paint_SetPixel+0x146>
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <Paint_SetPixel+0x58>
 8001736:	2b5a      	cmp	r3, #90	; 0x5a
 8001738:	d005      	beq.n	8001746 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800173a:	e076      	b.n	800182a <Paint_SetPixel+0x146>
        X = Xpoint;
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	81bb      	strh	r3, [r7, #12]
        break;
 8001744:	e026      	b.n	8001794 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <Paint_SetPixel+0x154>)
 8001748:	891b      	ldrh	r3, [r3, #8]
 800174a:	b29a      	uxth	r2, r3
 800174c:	88bb      	ldrh	r3, [r7, #4]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b29b      	uxth	r3, r3
 8001752:	3b01      	subs	r3, #1
 8001754:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	81bb      	strh	r3, [r7, #12]
        break;
 800175a:	e01b      	b.n	8001794 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <Paint_SetPixel+0x154>)
 800175e:	891b      	ldrh	r3, [r3, #8]
 8001760:	b29a      	uxth	r2, r3
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800176c:	4b32      	ldr	r3, [pc, #200]	; (8001838 <Paint_SetPixel+0x154>)
 800176e:	895b      	ldrh	r3, [r3, #10]
 8001770:	b29a      	uxth	r2, r3
 8001772:	88bb      	ldrh	r3, [r7, #4]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	b29b      	uxth	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	81bb      	strh	r3, [r7, #12]
        break;
 800177c:	e00a      	b.n	8001794 <Paint_SetPixel+0xb0>
        X = Ypoint;
 800177e:	88bb      	ldrh	r3, [r7, #4]
 8001780:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <Paint_SetPixel+0x154>)
 8001784:	895b      	ldrh	r3, [r3, #10]
 8001786:	b29a      	uxth	r2, r3
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b29b      	uxth	r3, r3
 800178e:	3b01      	subs	r3, #1
 8001790:	81bb      	strh	r3, [r7, #12]
        break;
 8001792:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <Paint_SetPixel+0x154>)
 8001796:	8a1b      	ldrh	r3, [r3, #16]
 8001798:	b29b      	uxth	r3, r3
 800179a:	2b03      	cmp	r3, #3
 800179c:	d847      	bhi.n	800182e <Paint_SetPixel+0x14a>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <Paint_SetPixel+0xc0>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080017fb 	.word	0x080017fb
 80017a8:	080017b5 	.word	0x080017b5
 80017ac:	080017c7 	.word	0x080017c7
 80017b0:	080017d9 	.word	0x080017d9
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <Paint_SetPixel+0x154>)
 80017b6:	891b      	ldrh	r3, [r3, #8]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3b01      	subs	r3, #1
 80017c2:	81fb      	strh	r3, [r7, #14]
        break;
 80017c4:	e01a      	b.n	80017fc <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <Paint_SetPixel+0x154>)
 80017c8:	895b      	ldrh	r3, [r3, #10]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	89bb      	ldrh	r3, [r7, #12]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3b01      	subs	r3, #1
 80017d4:	81bb      	strh	r3, [r7, #12]
        break;
 80017d6:	e011      	b.n	80017fc <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <Paint_SetPixel+0x154>)
 80017da:	891b      	ldrh	r3, [r3, #8]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	89fb      	ldrh	r3, [r7, #14]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	3b01      	subs	r3, #1
 80017e6:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <Paint_SetPixel+0x154>)
 80017ea:	895b      	ldrh	r3, [r3, #10]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	89bb      	ldrh	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	81bb      	strh	r3, [r7, #12]
        break;
 80017f8:	e000      	b.n	80017fc <Paint_SetPixel+0x118>
        break;
 80017fa:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <Paint_SetPixel+0x154>)
 80017fe:	891b      	ldrh	r3, [r3, #8]
 8001800:	b29b      	uxth	r3, r3
 8001802:	89fa      	ldrh	r2, [r7, #14]
 8001804:	429a      	cmp	r2, r3
 8001806:	d805      	bhi.n	8001814 <Paint_SetPixel+0x130>
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <Paint_SetPixel+0x154>)
 800180a:	895b      	ldrh	r3, [r3, #10]
 800180c:	b29b      	uxth	r3, r3
 800180e:	89ba      	ldrh	r2, [r7, #12]
 8001810:	429a      	cmp	r2, r3
 8001812:	d903      	bls.n	800181c <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 8001814:	4809      	ldr	r0, [pc, #36]	; (800183c <Paint_SetPixel+0x158>)
 8001816:	f007 f90b 	bl	8008a30 <puts>
        return;
 800181a:	e009      	b.n	8001830 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <Paint_SetPixel+0x15c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	887a      	ldrh	r2, [r7, #2]
 8001822:	89b9      	ldrh	r1, [r7, #12]
 8001824:	89f8      	ldrh	r0, [r7, #14]
 8001826:	4798      	blx	r3
 8001828:	e002      	b.n	8001830 <Paint_SetPixel+0x14c>
        return;
 800182a:	bf00      	nop
 800182c:	e000      	b.n	8001830 <Paint_SetPixel+0x14c>
        return;
 800182e:	bf00      	nop
}
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200005fc 	.word	0x200005fc
 800183c:	0800c434 	.word	0x0800c434
 8001840:	20000614 	.word	0x20000614

08001844 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <Paint_Clear+0x1c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	88fa      	ldrh	r2, [r7, #6]
 8001854:	4610      	mov	r0, r2
 8001856:	4798      	blx	r3
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000618 	.word	0x20000618

08001864 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	4604      	mov	r4, r0
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4623      	mov	r3, r4
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	4603      	mov	r3, r0
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	807b      	strh	r3, [r7, #2]
 800187e:	4613      	mov	r3, r2
 8001880:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001882:	4b44      	ldr	r3, [pc, #272]	; (8001994 <Paint_DrawPoint+0x130>)
 8001884:	889b      	ldrh	r3, [r3, #4]
 8001886:	b29b      	uxth	r3, r3
 8001888:	88fa      	ldrh	r2, [r7, #6]
 800188a:	429a      	cmp	r2, r3
 800188c:	d805      	bhi.n	800189a <Paint_DrawPoint+0x36>
 800188e:	4b41      	ldr	r3, [pc, #260]	; (8001994 <Paint_DrawPoint+0x130>)
 8001890:	88db      	ldrh	r3, [r3, #6]
 8001892:	b29b      	uxth	r3, r3
 8001894:	88ba      	ldrh	r2, [r7, #4]
 8001896:	429a      	cmp	r2, r3
 8001898:	d903      	bls.n	80018a2 <Paint_DrawPoint+0x3e>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800189a:	483f      	ldr	r0, [pc, #252]	; (8001998 <Paint_DrawPoint+0x134>)
 800189c:	f007 f8c8 	bl	8008a30 <puts>
        return;
 80018a0:	e074      	b.n	800198c <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 80018a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d144      	bne.n	8001934 <Paint_DrawPoint+0xd0>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	81fb      	strh	r3, [r7, #14]
 80018ae:	e039      	b.n	8001924 <Paint_DrawPoint+0xc0>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	81bb      	strh	r3, [r7, #12]
 80018b4:	e029      	b.n	800190a <Paint_DrawPoint+0xa6>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 80018b6:	88fa      	ldrh	r2, [r7, #6]
 80018b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018bc:	441a      	add	r2, r3
 80018be:	787b      	ldrb	r3, [r7, #1]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db28      	blt.n	8001918 <Paint_DrawPoint+0xb4>
 80018c6:	88ba      	ldrh	r2, [r7, #4]
 80018c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018cc:	441a      	add	r2, r3
 80018ce:	787b      	ldrb	r3, [r7, #1]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db20      	blt.n	8001918 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 80018d6:	89fa      	ldrh	r2, [r7, #14]
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	4413      	add	r3, r2
 80018dc:	b29a      	uxth	r2, r3
 80018de:	787b      	ldrb	r3, [r7, #1]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	b298      	uxth	r0, r3
 80018e6:	89ba      	ldrh	r2, [r7, #12]
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	787b      	ldrb	r3, [r7, #1]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff fef3 	bl	80016e4 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80018fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001902:	b29b      	uxth	r3, r3
 8001904:	3301      	adds	r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	81bb      	strh	r3, [r7, #12]
 800190a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800190e:	787b      	ldrb	r3, [r7, #1]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	3b01      	subs	r3, #1
 8001914:	429a      	cmp	r2, r3
 8001916:	dbce      	blt.n	80018b6 <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8001918:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800191c:	b29b      	uxth	r3, r3
 800191e:	3301      	adds	r3, #1
 8001920:	b29b      	uxth	r3, r3
 8001922:	81fb      	strh	r3, [r7, #14]
 8001924:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	3b01      	subs	r3, #1
 800192e:	429a      	cmp	r2, r3
 8001930:	dbbe      	blt.n	80018b0 <Paint_DrawPoint+0x4c>
 8001932:	e02b      	b.n	800198c <Paint_DrawPoint+0x128>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001934:	2300      	movs	r3, #0
 8001936:	81fb      	strh	r3, [r7, #14]
 8001938:	e023      	b.n	8001982 <Paint_DrawPoint+0x11e>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800193a:	2300      	movs	r3, #0
 800193c:	81bb      	strh	r3, [r7, #12]
 800193e:	e015      	b.n	800196c <Paint_DrawPoint+0x108>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8001940:	89fa      	ldrh	r2, [r7, #14]
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	4413      	add	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	3b01      	subs	r3, #1
 800194a:	b298      	uxth	r0, r3
 800194c:	89ba      	ldrh	r2, [r7, #12]
 800194e:	88bb      	ldrh	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	b29b      	uxth	r3, r3
 8001954:	3b01      	subs	r3, #1
 8001956:	b29b      	uxth	r3, r3
 8001958:	887a      	ldrh	r2, [r7, #2]
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff fec2 	bl	80016e4 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001960:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001964:	b29b      	uxth	r3, r3
 8001966:	3301      	adds	r3, #1
 8001968:	b29b      	uxth	r3, r3
 800196a:	81bb      	strh	r3, [r7, #12]
 800196c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	429a      	cmp	r2, r3
 8001974:	dbe4      	blt.n	8001940 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001976:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800197a:	b29b      	uxth	r3, r3
 800197c:	3301      	adds	r3, #1
 800197e:	b29b      	uxth	r3, r3
 8001980:	81fb      	strh	r3, [r7, #14]
 8001982:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001986:	787b      	ldrb	r3, [r7, #1]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbd6      	blt.n	800193a <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bd90      	pop	{r4, r7, pc}
 8001992:	bf00      	nop
 8001994:	200005fc 	.word	0x200005fc
 8001998:	0800c45c 	.word	0x0800c45c

0800199c <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b08d      	sub	sp, #52	; 0x34
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4623      	mov	r3, r4
 80019ac:	80fb      	strh	r3, [r7, #6]
 80019ae:	4603      	mov	r3, r0
 80019b0:	80bb      	strh	r3, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	807b      	strh	r3, [r7, #2]
 80019b6:	4613      	mov	r3, r2
 80019b8:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80019ba:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <Paint_DrawLine+0x154>)
 80019bc:	889b      	ldrh	r3, [r3, #4]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	88fa      	ldrh	r2, [r7, #6]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d811      	bhi.n	80019ea <Paint_DrawLine+0x4e>
 80019c6:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <Paint_DrawLine+0x154>)
 80019c8:	88db      	ldrh	r3, [r3, #6]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	88ba      	ldrh	r2, [r7, #4]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d80b      	bhi.n	80019ea <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <Paint_DrawLine+0x154>)
 80019d4:	889b      	ldrh	r3, [r3, #4]
 80019d6:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80019d8:	887a      	ldrh	r2, [r7, #2]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d805      	bhi.n	80019ea <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 80019de:	4b44      	ldr	r3, [pc, #272]	; (8001af0 <Paint_DrawLine+0x154>)
 80019e0:	88db      	ldrh	r3, [r3, #6]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	883a      	ldrh	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d903      	bls.n	80019f2 <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 80019ea:	4842      	ldr	r0, [pc, #264]	; (8001af4 <Paint_DrawLine+0x158>)
 80019ec:	f007 f820 	bl	8008a30 <puts>
        return;
 80019f0:	e07b      	b.n	8001aea <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 80019f6:	88bb      	ldrh	r3, [r7, #4]
 80019f8:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bfb8      	it	lt
 8001a04:	425b      	neglt	r3, r3
 8001a06:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001a08:	883a      	ldrh	r2, [r7, #0]
 8001a0a:	88bb      	ldrh	r3, [r7, #4]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bfb8      	it	lt
 8001a12:	425b      	neglt	r3, r3
 8001a14:	425b      	negs	r3, r3
 8001a16:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8001a18:	88fa      	ldrh	r2, [r7, #6]
 8001a1a:	887b      	ldrh	r3, [r7, #2]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d201      	bcs.n	8001a24 <Paint_DrawLine+0x88>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e001      	b.n	8001a28 <Paint_DrawLine+0x8c>
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
 8001a28:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8001a2a:	88ba      	ldrh	r2, [r7, #4]
 8001a2c:	883b      	ldrh	r3, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d201      	bcs.n	8001a36 <Paint_DrawLine+0x9a>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e001      	b.n	8001a3a <Paint_DrawLine+0x9e>
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	4413      	add	r3, r2
 8001a42:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8001a4e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d118      	bne.n	8001a88 <Paint_DrawLine+0xec>
 8001a56:	7ffa      	ldrb	r2, [r7, #31]
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <Paint_DrawLine+0x15c>)
 8001a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a5e:	0859      	lsrs	r1, r3, #1
 8001a60:	460b      	mov	r3, r1
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	440b      	add	r3, r1
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10c      	bne.n	8001a88 <Paint_DrawLine+0xec>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8001a6e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a72:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001a74:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001a76:	2201      	movs	r2, #1
 8001a78:	9200      	str	r2, [sp, #0]
 8001a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a7e:	f7ff fef1 	bl	8001864 <Paint_DrawPoint>
            Dotted_Len = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	77fb      	strb	r3, [r7, #31]
 8001a86:	e008      	b.n	8001a9a <Paint_DrawLine+0xfe>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 8001a88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a8c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001a8e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001a90:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001a92:	2401      	movs	r4, #1
 8001a94:	9400      	str	r4, [sp, #0]
 8001a96:	f7ff fee5 	bl	8001864 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dc0c      	bgt.n	8001abe <Paint_DrawLine+0x122>
            if (Xpoint == Xend)
 8001aa4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d01b      	beq.n	8001ae4 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 8001aac:	6a3a      	ldr	r2, [r7, #32]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aba:	4413      	add	r3, r2
 8001abc:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 8001abe:	6a3b      	ldr	r3, [r7, #32]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbbf      	blt.n	8001a48 <Paint_DrawLine+0xac>
            if (Ypoint == Yend)
 8001ac8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001aca:	883b      	ldrh	r3, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d00b      	beq.n	8001ae8 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 8001ad0:	6a3a      	ldr	r2, [r7, #32]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ade:	4413      	add	r3, r2
 8001ae0:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8001ae2:	e7b1      	b.n	8001a48 <Paint_DrawLine+0xac>
                break;
 8001ae4:	bf00      	nop
 8001ae6:	e000      	b.n	8001aea <Paint_DrawLine+0x14e>
                break;
 8001ae8:	bf00      	nop
        }
    }
}
 8001aea:	372c      	adds	r7, #44	; 0x2c
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd90      	pop	{r4, r7, pc}
 8001af0:	200005fc 	.word	0x200005fc
 8001af4:	0800c49c 	.word	0x0800c49c
 8001af8:	aaaaaaab 	.word	0xaaaaaaab

08001afc <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af04      	add	r7, sp, #16
 8001b02:	4604      	mov	r4, r0
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	80fb      	strh	r3, [r7, #6]
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80bb      	strh	r3, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	807b      	strh	r3, [r7, #2]
 8001b16:	4613      	mov	r3, r2
 8001b18:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <Paint_DrawRectangle+0x108>)
 8001b1c:	889b      	ldrh	r3, [r3, #4]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d811      	bhi.n	8001b4a <Paint_DrawRectangle+0x4e>
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <Paint_DrawRectangle+0x108>)
 8001b28:	88db      	ldrh	r3, [r3, #6]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	88ba      	ldrh	r2, [r7, #4]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d80b      	bhi.n	8001b4a <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <Paint_DrawRectangle+0x108>)
 8001b34:	889b      	ldrh	r3, [r3, #4]
 8001b36:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001b38:	887a      	ldrh	r2, [r7, #2]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d805      	bhi.n	8001b4a <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001b3e:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <Paint_DrawRectangle+0x108>)
 8001b40:	88db      	ldrh	r3, [r3, #6]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	883a      	ldrh	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d903      	bls.n	8001b52 <Paint_DrawRectangle+0x56>
        Debug("Input exceeds the normal display range\r\n");
 8001b4a:	482f      	ldr	r0, [pc, #188]	; (8001c08 <Paint_DrawRectangle+0x10c>)
 8001b4c:	f006 ff70 	bl	8008a30 <puts>
        return;
 8001b50:	e054      	b.n	8001bfc <Paint_DrawRectangle+0x100>
    }

    if (Filled ) {
 8001b52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d018      	beq.n	8001b8c <Paint_DrawRectangle+0x90>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	81fb      	strh	r3, [r7, #14]
 8001b5e:	e010      	b.n	8001b82 <Paint_DrawRectangle+0x86>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 8001b60:	89fc      	ldrh	r4, [r7, #14]
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	89f9      	ldrh	r1, [r7, #14]
 8001b66:	88f8      	ldrh	r0, [r7, #6]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	8c3b      	ldrh	r3, [r7, #32]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	4623      	mov	r3, r4
 8001b78:	f7ff ff10 	bl	800199c <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 8001b7c:	89fb      	ldrh	r3, [r7, #14]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	81fb      	strh	r3, [r7, #14]
 8001b82:	89fa      	ldrh	r2, [r7, #14]
 8001b84:	883b      	ldrh	r3, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d3ea      	bcc.n	8001b60 <Paint_DrawRectangle+0x64>
 8001b8a:	e037      	b.n	8001bfc <Paint_DrawRectangle+0x100>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8001b8c:	88bc      	ldrh	r4, [r7, #4]
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	88b9      	ldrh	r1, [r7, #4]
 8001b92:	88f8      	ldrh	r0, [r7, #6]
 8001b94:	2300      	movs	r3, #0
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	8c3b      	ldrh	r3, [r7, #32]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	f7ff fefa 	bl	800199c <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8001ba8:	883c      	ldrh	r4, [r7, #0]
 8001baa:	88fa      	ldrh	r2, [r7, #6]
 8001bac:	88b9      	ldrh	r1, [r7, #4]
 8001bae:	88f8      	ldrh	r0, [r7, #6]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	8c3b      	ldrh	r3, [r7, #32]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	f7ff feec 	bl	800199c <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 8001bc4:	88bc      	ldrh	r4, [r7, #4]
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	8839      	ldrh	r1, [r7, #0]
 8001bca:	8878      	ldrh	r0, [r7, #2]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	8c3b      	ldrh	r3, [r7, #32]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	4623      	mov	r3, r4
 8001bdc:	f7ff fede 	bl	800199c <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 8001be0:	883c      	ldrh	r4, [r7, #0]
 8001be2:	88fa      	ldrh	r2, [r7, #6]
 8001be4:	8839      	ldrh	r1, [r7, #0]
 8001be6:	8878      	ldrh	r0, [r7, #2]
 8001be8:	2300      	movs	r3, #0
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	8c3b      	ldrh	r3, [r7, #32]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	f7ff fed0 	bl	800199c <Paint_DrawLine>
    }
}
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd90      	pop	{r4, r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200005fc 	.word	0x200005fc
 8001c08:	0800c4dc 	.word	0x0800c4dc

08001c0c <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	4604      	mov	r4, r0
 8001c14:	4608      	mov	r0, r1
 8001c16:	4611      	mov	r1, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	80fb      	strh	r3, [r7, #6]
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80bb      	strh	r3, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	807b      	strh	r3, [r7, #2]
 8001c26:	4613      	mov	r3, r2
 8001c28:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8001c2a:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <Paint_DrawCircle+0x1c0>)
 8001c2c:	889b      	ldrh	r3, [r3, #4]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d805      	bhi.n	8001c42 <Paint_DrawCircle+0x36>
 8001c36:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <Paint_DrawCircle+0x1c0>)
 8001c38:	88db      	ldrh	r3, [r3, #6]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	88ba      	ldrh	r2, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d303      	bcc.n	8001c4a <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 8001c42:	4863      	ldr	r0, [pc, #396]	; (8001dd0 <Paint_DrawCircle+0x1c4>)
 8001c44:	f006 fef4 	bl	8008a30 <puts>
        return;
 8001c48:	e16b      	b.n	8001f22 <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	f1c3 0303 	rsb	r3, r3, #3
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8001c60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f040 8155 	bne.w	8001f14 <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 8001c6a:	e0a6      	b.n	8001dba <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	813b      	strh	r3, [r7, #8]
 8001c70:	e075      	b.n	8001d5e <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8001c72:	89fa      	ldrh	r2, [r7, #14]
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	4413      	add	r3, r2
 8001c78:	b298      	uxth	r0, r3
 8001c7a:	893a      	ldrh	r2, [r7, #8]
 8001c7c:	88bb      	ldrh	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	b299      	uxth	r1, r3
 8001c82:	883a      	ldrh	r2, [r7, #0]
 8001c84:	2301      	movs	r3, #1
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f7ff fdeb 	bl	8001864 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8001c8e:	89fb      	ldrh	r3, [r7, #14]
 8001c90:	88fa      	ldrh	r2, [r7, #6]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	b298      	uxth	r0, r3
 8001c96:	893a      	ldrh	r2, [r7, #8]
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	b299      	uxth	r1, r3
 8001c9e:	883a      	ldrh	r2, [r7, #0]
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f7ff fddd 	bl	8001864 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 8001caa:	893b      	ldrh	r3, [r7, #8]
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b298      	uxth	r0, r3
 8001cb2:	89fa      	ldrh	r2, [r7, #14]
 8001cb4:	88bb      	ldrh	r3, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b299      	uxth	r1, r3
 8001cba:	883a      	ldrh	r2, [r7, #0]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f7ff fdcf 	bl	8001864 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8001cc6:	893b      	ldrh	r3, [r7, #8]
 8001cc8:	88fa      	ldrh	r2, [r7, #6]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b298      	uxth	r0, r3
 8001cce:	89fb      	ldrh	r3, [r7, #14]
 8001cd0:	88ba      	ldrh	r2, [r7, #4]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b299      	uxth	r1, r3
 8001cd6:	883a      	ldrh	r2, [r7, #0]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f7ff fdc1 	bl	8001864 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	88fa      	ldrh	r2, [r7, #6]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	b298      	uxth	r0, r3
 8001cea:	893b      	ldrh	r3, [r7, #8]
 8001cec:	88ba      	ldrh	r2, [r7, #4]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	b299      	uxth	r1, r3
 8001cf2:	883a      	ldrh	r2, [r7, #0]
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f7ff fdb3 	bl	8001864 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8001cfe:	89fa      	ldrh	r2, [r7, #14]
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	4413      	add	r3, r2
 8001d04:	b298      	uxth	r0, r3
 8001d06:	893b      	ldrh	r3, [r7, #8]
 8001d08:	88ba      	ldrh	r2, [r7, #4]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	b299      	uxth	r1, r3
 8001d0e:	883a      	ldrh	r2, [r7, #0]
 8001d10:	2301      	movs	r3, #1
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2301      	movs	r3, #1
 8001d16:	f7ff fda5 	bl	8001864 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8001d1a:	893a      	ldrh	r2, [r7, #8]
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	4413      	add	r3, r2
 8001d20:	b298      	uxth	r0, r3
 8001d22:	89fb      	ldrh	r3, [r7, #14]
 8001d24:	88ba      	ldrh	r2, [r7, #4]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	883a      	ldrh	r2, [r7, #0]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2301      	movs	r3, #1
 8001d32:	f7ff fd97 	bl	8001864 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8001d36:	893a      	ldrh	r2, [r7, #8]
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b298      	uxth	r0, r3
 8001d3e:	89fa      	ldrh	r2, [r7, #14]
 8001d40:	88bb      	ldrh	r3, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	b299      	uxth	r1, r3
 8001d46:	883a      	ldrh	r2, [r7, #0]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f7ff fd89 	bl	8001864 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001d52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	813b      	strh	r3, [r7, #8]
 8001d5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	dd83      	ble.n	8001c72 <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 8001d6a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	da09      	bge.n	8001d86 <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 8001d72:	89fb      	ldrh	r3, [r7, #14]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	897b      	ldrh	r3, [r7, #10]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3306      	adds	r3, #6
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	817b      	strh	r3, [r7, #10]
 8001d84:	e013      	b.n	8001dae <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001d86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	4413      	add	r3, r2
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	330a      	adds	r3, #10
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001da2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001dae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8001dba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001dbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	f77f af52 	ble.w	8001c6c <Paint_DrawCircle+0x60>
 8001dc8:	e0ab      	b.n	8001f22 <Paint_DrawCircle+0x316>
 8001dca:	bf00      	nop
 8001dcc:	200005fc 	.word	0x200005fc
 8001dd0:	0800c50c 	.word	0x0800c50c
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8001dd4:	89fa      	ldrh	r2, [r7, #14]
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	4413      	add	r3, r2
 8001dda:	b298      	uxth	r0, r3
 8001ddc:	89ba      	ldrh	r2, [r7, #12]
 8001dde:	88bb      	ldrh	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	b299      	uxth	r1, r3
 8001de4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001de8:	883a      	ldrh	r2, [r7, #0]
 8001dea:	2401      	movs	r4, #1
 8001dec:	9400      	str	r4, [sp, #0]
 8001dee:	f7ff fd39 	bl	8001864 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	88fa      	ldrh	r2, [r7, #6]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	b298      	uxth	r0, r3
 8001dfa:	89ba      	ldrh	r2, [r7, #12]
 8001dfc:	88bb      	ldrh	r3, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b299      	uxth	r1, r3
 8001e02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e06:	883a      	ldrh	r2, [r7, #0]
 8001e08:	2401      	movs	r4, #1
 8001e0a:	9400      	str	r4, [sp, #0]
 8001e0c:	f7ff fd2a 	bl	8001864 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	88fa      	ldrh	r2, [r7, #6]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	b298      	uxth	r0, r3
 8001e18:	89fa      	ldrh	r2, [r7, #14]
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b299      	uxth	r1, r3
 8001e20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e24:	883a      	ldrh	r2, [r7, #0]
 8001e26:	2401      	movs	r4, #1
 8001e28:	9400      	str	r4, [sp, #0]
 8001e2a:	f7ff fd1b 	bl	8001864 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8001e2e:	89bb      	ldrh	r3, [r7, #12]
 8001e30:	88fa      	ldrh	r2, [r7, #6]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	b298      	uxth	r0, r3
 8001e36:	89fb      	ldrh	r3, [r7, #14]
 8001e38:	88ba      	ldrh	r2, [r7, #4]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	b299      	uxth	r1, r3
 8001e3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e42:	883a      	ldrh	r2, [r7, #0]
 8001e44:	2401      	movs	r4, #1
 8001e46:	9400      	str	r4, [sp, #0]
 8001e48:	f7ff fd0c 	bl	8001864 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8001e4c:	89fb      	ldrh	r3, [r7, #14]
 8001e4e:	88fa      	ldrh	r2, [r7, #6]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	b298      	uxth	r0, r3
 8001e54:	89bb      	ldrh	r3, [r7, #12]
 8001e56:	88ba      	ldrh	r2, [r7, #4]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	b299      	uxth	r1, r3
 8001e5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e60:	883a      	ldrh	r2, [r7, #0]
 8001e62:	2401      	movs	r4, #1
 8001e64:	9400      	str	r4, [sp, #0]
 8001e66:	f7ff fcfd 	bl	8001864 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8001e6a:	89fa      	ldrh	r2, [r7, #14]
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b298      	uxth	r0, r3
 8001e72:	89bb      	ldrh	r3, [r7, #12]
 8001e74:	88ba      	ldrh	r2, [r7, #4]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	b299      	uxth	r1, r3
 8001e7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e7e:	883a      	ldrh	r2, [r7, #0]
 8001e80:	2401      	movs	r4, #1
 8001e82:	9400      	str	r4, [sp, #0]
 8001e84:	f7ff fcee 	bl	8001864 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8001e88:	89ba      	ldrh	r2, [r7, #12]
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b298      	uxth	r0, r3
 8001e90:	89fb      	ldrh	r3, [r7, #14]
 8001e92:	88ba      	ldrh	r2, [r7, #4]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	b299      	uxth	r1, r3
 8001e98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e9c:	883a      	ldrh	r2, [r7, #0]
 8001e9e:	2401      	movs	r4, #1
 8001ea0:	9400      	str	r4, [sp, #0]
 8001ea2:	f7ff fcdf 	bl	8001864 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8001ea6:	89ba      	ldrh	r2, [r7, #12]
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	4413      	add	r3, r2
 8001eac:	b298      	uxth	r0, r3
 8001eae:	89fa      	ldrh	r2, [r7, #14]
 8001eb0:	88bb      	ldrh	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b299      	uxth	r1, r3
 8001eb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eba:	883a      	ldrh	r2, [r7, #0]
 8001ebc:	2401      	movs	r4, #1
 8001ebe:	9400      	str	r4, [sp, #0]
 8001ec0:	f7ff fcd0 	bl	8001864 <Paint_DrawPoint>

            if (Esp < 0 )
 8001ec4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da09      	bge.n	8001ee0 <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	897b      	ldrh	r3, [r7, #10]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3306      	adds	r3, #6
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	e013      	b.n	8001f08 <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001ee0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ee4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	897b      	ldrh	r3, [r7, #10]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	330a      	adds	r3, #10
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8001efc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001f08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 8001f14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	f77f af59 	ble.w	8001dd4 <Paint_DrawCircle+0x1c8>
        }
    }
}
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd90      	pop	{r4, r7, pc}

08001f28 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	4603      	mov	r3, r0
 8001f32:	81fb      	strh	r3, [r7, #14]
 8001f34:	460b      	mov	r3, r1
 8001f36:	81bb      	strh	r3, [r7, #12]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001f3c:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <Paint_DrawChar+0x150>)
 8001f3e:	889b      	ldrh	r3, [r3, #4]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	89fa      	ldrh	r2, [r7, #14]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d805      	bhi.n	8001f54 <Paint_DrawChar+0x2c>
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <Paint_DrawChar+0x150>)
 8001f4a:	88db      	ldrh	r3, [r3, #6]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	89ba      	ldrh	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d903      	bls.n	8001f5c <Paint_DrawChar+0x34>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8001f54:	4849      	ldr	r0, [pc, #292]	; (800207c <Paint_DrawChar+0x154>)
 8001f56:	f006 fd6b 	bl	8008a30 <puts>
        return;
 8001f5a:	e089      	b.n	8002070 <Paint_DrawChar+0x148>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001f5c:	7afb      	ldrb	r3, [r7, #11]
 8001f5e:	3b20      	subs	r3, #32
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	88d2      	ldrh	r2, [r2, #6]
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	8892      	ldrh	r2, [r2, #4]
 8001f6c:	08d2      	lsrs	r2, r2, #3
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	4611      	mov	r1, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	8892      	ldrh	r2, [r2, #4]
 8001f76:	f002 0207 	and.w	r2, r2, #7
 8001f7a:	b292      	uxth	r2, r2
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2201      	movne	r2, #1
 8001f82:	2200      	moveq	r2, #0
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	440a      	add	r2, r1
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	4413      	add	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001f98:	2300      	movs	r3, #0
 8001f9a:	83fb      	strh	r3, [r7, #30]
 8001f9c:	e063      	b.n	8002066 <Paint_DrawChar+0x13e>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	83bb      	strh	r3, [r7, #28]
 8001fa2:	e04e      	b.n	8002042 <Paint_DrawChar+0x11a>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001fa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d118      	bne.n	8001fe0 <Paint_DrawChar+0xb8>
                if (*ptr & (0x80 >> (Column % 8)))
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	8bbb      	ldrh	r3, [r7, #28]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	fa42 f303 	asr.w	r3, r2, r3
 8001fc0:	400b      	ands	r3, r1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d031      	beq.n	800202a <Paint_DrawChar+0x102>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001fc6:	89fa      	ldrh	r2, [r7, #14]
 8001fc8:	8bbb      	ldrh	r3, [r7, #28]
 8001fca:	4413      	add	r3, r2
 8001fcc:	b298      	uxth	r0, r3
 8001fce:	89ba      	ldrh	r2, [r7, #12]
 8001fd0:	8bfb      	ldrh	r3, [r7, #30]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7ff fb83 	bl	80016e4 <Paint_SetPixel>
 8001fde:	e024      	b.n	800202a <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	8bbb      	ldrh	r3, [r7, #28]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	fa42 f303 	asr.w	r3, r2, r3
 8001ff2:	400b      	ands	r3, r1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00c      	beq.n	8002012 <Paint_DrawChar+0xea>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001ff8:	89fa      	ldrh	r2, [r7, #14]
 8001ffa:	8bbb      	ldrh	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	b298      	uxth	r0, r3
 8002000:	89ba      	ldrh	r2, [r7, #12]
 8002002:	8bfb      	ldrh	r3, [r7, #30]
 8002004:	4413      	add	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800200a:	4619      	mov	r1, r3
 800200c:	f7ff fb6a 	bl	80016e4 <Paint_SetPixel>
 8002010:	e00b      	b.n	800202a <Paint_DrawChar+0x102>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8002012:	89fa      	ldrh	r2, [r7, #14]
 8002014:	8bbb      	ldrh	r3, [r7, #28]
 8002016:	4413      	add	r3, r2
 8002018:	b298      	uxth	r0, r3
 800201a:	89ba      	ldrh	r2, [r7, #12]
 800201c:	8bfb      	ldrh	r3, [r7, #30]
 800201e:	4413      	add	r3, r2
 8002020:	b29b      	uxth	r3, r3
 8002022:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002024:	4619      	mov	r1, r3
 8002026:	f7ff fb5d 	bl	80016e4 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800202a:	8bbb      	ldrh	r3, [r7, #28]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b07      	cmp	r3, #7
 8002034:	d102      	bne.n	800203c <Paint_DrawChar+0x114>
                ptr++;
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	3301      	adds	r3, #1
 800203a:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800203c:	8bbb      	ldrh	r3, [r7, #28]
 800203e:	3301      	adds	r3, #1
 8002040:	83bb      	strh	r3, [r7, #28]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	889b      	ldrh	r3, [r3, #4]
 8002046:	8bba      	ldrh	r2, [r7, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	d3ab      	bcc.n	8001fa4 <Paint_DrawChar+0x7c>
        }// Write a line
        if (Font->Width % 8 != 0)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	889b      	ldrh	r3, [r3, #4]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	b29b      	uxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <Paint_DrawChar+0x138>
            ptr++;
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	3301      	adds	r3, #1
 800205e:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8002060:	8bfb      	ldrh	r3, [r7, #30]
 8002062:	3301      	adds	r3, #1
 8002064:	83fb      	strh	r3, [r7, #30]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	88db      	ldrh	r3, [r3, #6]
 800206a:	8bfa      	ldrh	r2, [r7, #30]
 800206c:	429a      	cmp	r2, r3
 800206e:	d396      	bcc.n	8001f9e <Paint_DrawChar+0x76>
    }// Write all
}
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200005fc 	.word	0x200005fc
 800207c:	0800c550 	.word	0x0800c550

08002080 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af02      	add	r7, sp, #8
 8002086:	60ba      	str	r2, [r7, #8]
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	4603      	mov	r3, r0
 800208c:	81fb      	strh	r3, [r7, #14]
 800208e:	460b      	mov	r3, r1
 8002090:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8002092:	89fb      	ldrh	r3, [r7, #14]
 8002094:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8002096:	89bb      	ldrh	r3, [r7, #12]
 8002098:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <Paint_DrawString_EN+0xa8>)
 800209c:	889b      	ldrh	r3, [r3, #4]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	89fa      	ldrh	r2, [r7, #14]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d805      	bhi.n	80020b2 <Paint_DrawString_EN+0x32>
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <Paint_DrawString_EN+0xa8>)
 80020a8:	88db      	ldrh	r3, [r3, #6]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	89ba      	ldrh	r2, [r7, #12]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d933      	bls.n	800211a <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80020b2:	481e      	ldr	r0, [pc, #120]	; (800212c <Paint_DrawString_EN+0xac>)
 80020b4:	f006 fcbc 	bl	8008a30 <puts>
        return;
 80020b8:	e033      	b.n	8002122 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80020ba:	8afb      	ldrh	r3, [r7, #22]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	8892      	ldrh	r2, [r2, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a19      	ldr	r2, [pc, #100]	; (8002128 <Paint_DrawString_EN+0xa8>)
 80020c4:	8892      	ldrh	r2, [r2, #4]
 80020c6:	b292      	uxth	r2, r2
 80020c8:	4293      	cmp	r3, r2
 80020ca:	dd06      	ble.n	80020da <Paint_DrawString_EN+0x5a>
            Xpoint = Xstart;
 80020cc:	89fb      	ldrh	r3, [r7, #14]
 80020ce:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	88da      	ldrh	r2, [r3, #6]
 80020d4:	8abb      	ldrh	r3, [r7, #20]
 80020d6:	4413      	add	r3, r2
 80020d8:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80020da:	8abb      	ldrh	r3, [r7, #20]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	88d2      	ldrh	r2, [r2, #6]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a11      	ldr	r2, [pc, #68]	; (8002128 <Paint_DrawString_EN+0xa8>)
 80020e4:	88d2      	ldrh	r2, [r2, #6]
 80020e6:	b292      	uxth	r2, r2
 80020e8:	4293      	cmp	r3, r2
 80020ea:	dd03      	ble.n	80020f4 <Paint_DrawString_EN+0x74>
            Xpoint = Xstart;
 80020ec:	89fb      	ldrh	r3, [r7, #14]
 80020ee:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 80020f0:	89bb      	ldrh	r3, [r7, #12]
 80020f2:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	8ab9      	ldrh	r1, [r7, #20]
 80020fa:	8af8      	ldrh	r0, [r7, #22]
 80020fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	8c3b      	ldrh	r3, [r7, #32]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f7ff ff0f 	bl	8001f28 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3301      	adds	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	889a      	ldrh	r2, [r3, #4]
 8002114:	8afb      	ldrh	r3, [r7, #22]
 8002116:	4413      	add	r3, r2
 8002118:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1cb      	bne.n	80020ba <Paint_DrawString_EN+0x3a>
    }
}
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200005fc 	.word	0x200005fc
 800212c:	0800c590 	.word	0x0800c590

08002130 <Paint_DrawString_CN>:
    Font             ：A structure pointer that displays a character size
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_CN(UWORD Xstart, UWORD Ystart, const char * pString, cFONT* font, UWORD Color_Background, UWORD Color_Foreground)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	; 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	60ba      	str	r2, [r7, #8]
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	4603      	mov	r3, r0
 800213c:	81fb      	strh	r3, [r7, #14]
 800213e:	460b      	mov	r3, r1
 8002140:	81bb      	strh	r3, [r7, #12]
    const char* p_text = pString;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
    int x = Xstart, y = Ystart;
 8002146:	89fb      	ldrh	r3, [r7, #14]
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
 800214a:	89bb      	ldrh	r3, [r7, #12]
 800214c:	613b      	str	r3, [r7, #16]
    int i, j,Num;

    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 800214e:	e180      	b.n	8002452 <Paint_DrawString_CN+0x322>
        if(*p_text <= 0x7F) {  //ASCII < 126
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b25b      	sxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f2c0 80b7 	blt.w	80022ca <Paint_DrawString_CN+0x19a>
            for(Num = 0; Num < font->size; Num++) {
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	e0a2      	b.n	80022a8 <Paint_DrawString_CN+0x178>
                if(*p_text== font->table[Num].index[0]) {
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	20a6      	movs	r0, #166	; 0xa6
 800216e:	fb00 f303 	mul.w	r3, r0, r3
 8002172:	440b      	add	r3, r1
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	f040 8093 	bne.w	80022a2 <Paint_DrawString_CN+0x172>
                    const char* ptr = &font->table[Num].matrix[0];
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	21a6      	movs	r1, #166	; 0xa6
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3302      	adds	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]

                    for (j = 0; j < font->Height; j++) {
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
 8002192:	e07e      	b.n	8002292 <Paint_DrawString_CN+0x162>
                        for (i = 0; i < font->Width; i++) {
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
 8002198:	e068      	b.n	800226c <Paint_DrawString_CN+0x13c>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800219a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800219c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d121      	bne.n	80021e8 <Paint_DrawString_CN+0xb8>
                                if (*ptr & (0x80 >> (i % 8))) {
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	425a      	negs	r2, r3
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	f002 0207 	and.w	r2, r2, #7
 80021b6:	bf58      	it	pl
 80021b8:	4253      	negpl	r3, r2
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	fa42 f303 	asr.w	r3, r2, r3
 80021c0:	400b      	ands	r3, r1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d042      	beq.n	800224c <Paint_DrawString_CN+0x11c>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	b298      	uxth	r0, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	4413      	add	r3, r2
 80021dc:	b29b      	uxth	r3, r3
 80021de:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7ff fa7f 	bl	80016e4 <Paint_SetPixel>
 80021e6:	e031      	b.n	800224c <Paint_DrawString_CN+0x11c>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	425a      	negs	r2, r3
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	f002 0207 	and.w	r2, r2, #7
 80021fa:	bf58      	it	pl
 80021fc:	4253      	negpl	r3, r2
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	fa42 f303 	asr.w	r3, r2, r3
 8002204:	400b      	ands	r3, r1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d010      	beq.n	800222c <Paint_DrawString_CN+0xfc>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	b29a      	uxth	r2, r3
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	b29b      	uxth	r3, r3
 8002212:	4413      	add	r3, r2
 8002214:	b298      	uxth	r0, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	b29a      	uxth	r2, r3
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	b29b      	uxth	r3, r3
 800221e:	4413      	add	r3, r2
 8002220:	b29b      	uxth	r3, r3
 8002222:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002224:	4619      	mov	r1, r3
 8002226:	f7ff fa5d 	bl	80016e4 <Paint_SetPixel>
 800222a:	e00f      	b.n	800224c <Paint_DrawString_CN+0x11c>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222e:	b29a      	uxth	r2, r3
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	b29b      	uxth	r3, r3
 8002234:	4413      	add	r3, r2
 8002236:	b298      	uxth	r0, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	b29a      	uxth	r2, r3
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4413      	add	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002246:	4619      	mov	r1, r3
 8002248:	f7ff fa4c 	bl	80016e4 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	425a      	negs	r2, r3
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	f002 0207 	and.w	r2, r2, #7
 8002258:	bf58      	it	pl
 800225a:	4253      	negpl	r3, r2
 800225c:	2b07      	cmp	r3, #7
 800225e:	d102      	bne.n	8002266 <Paint_DrawString_CN+0x136>
                                ptr++;
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	3301      	adds	r3, #1
 8002264:	61bb      	str	r3, [r7, #24]
                        for (i = 0; i < font->Width; i++) {
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	3301      	adds	r3, #1
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	891b      	ldrh	r3, [r3, #8]
 8002270:	461a      	mov	r2, r3
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	4293      	cmp	r3, r2
 8002276:	db90      	blt.n	800219a <Paint_DrawString_CN+0x6a>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	891b      	ldrh	r3, [r3, #8]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <Paint_DrawString_CN+0x15c>
                            ptr++;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	3301      	adds	r3, #1
 800228a:	61bb      	str	r3, [r7, #24]
                    for (j = 0; j < font->Height; j++) {
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	3301      	adds	r3, #1
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	895b      	ldrh	r3, [r3, #10]
 8002296:	461a      	mov	r2, r3
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	4293      	cmp	r3, r2
 800229c:	f6ff af7a 	blt.w	8002194 <Paint_DrawString_CN+0x64>
                        }
                    }
                    break;
 80022a0:	e009      	b.n	80022b6 <Paint_DrawString_CN+0x186>
            for(Num = 0; Num < font->size; Num++) {
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3301      	adds	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	889b      	ldrh	r3, [r3, #4]
 80022ac:	461a      	mov	r2, r3
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4293      	cmp	r3, r2
 80022b2:	f6ff af56 	blt.w	8002162 <Paint_DrawString_CN+0x32>
                }
            }
            /* Point on the next character */
            p_text += 1;
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	3301      	adds	r3, #1
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->ASCII_Width;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	88db      	ldrh	r3, [r3, #6]
 80022c0:	461a      	mov	r2, r3
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	4413      	add	r3, r2
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022c8:	e0c3      	b.n	8002452 <Paint_DrawString_CN+0x322>
        } else {        //Chinese
            for(Num = 0; Num < font->size; Num++) {
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e0b0      	b.n	8002432 <Paint_DrawString_CN+0x302>
                if((*p_text== font->table[Num].index[0]) && (*(p_text+1) == font->table[Num].index[1])) {
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6819      	ldr	r1, [r3, #0]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	20a6      	movs	r0, #166	; 0xa6
 80022dc:	fb00 f303 	mul.w	r3, r0, r3
 80022e0:	440b      	add	r3, r1
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	f040 80a1 	bne.w	800242c <Paint_DrawString_CN+0x2fc>
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	3301      	adds	r3, #1
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6819      	ldr	r1, [r3, #0]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	20a6      	movs	r0, #166	; 0xa6
 80022f8:	fb00 f303 	mul.w	r3, r0, r3
 80022fc:	440b      	add	r3, r1
 80022fe:	785b      	ldrb	r3, [r3, #1]
 8002300:	429a      	cmp	r2, r3
 8002302:	f040 8093 	bne.w	800242c <Paint_DrawString_CN+0x2fc>
                    const char* ptr = &font->table[Num].matrix[0];
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	21a6      	movs	r1, #166	; 0xa6
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3302      	adds	r3, #2
 8002316:	617b      	str	r3, [r7, #20]

                    for (j = 0; j < font->Height; j++) {
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	e07e      	b.n	800241c <Paint_DrawString_CN+0x2ec>
                        for (i = 0; i < font->Width; i++) {
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
 8002322:	e068      	b.n	80023f6 <Paint_DrawString_CN+0x2c6>
                            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8002324:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232a:	4293      	cmp	r3, r2
 800232c:	d121      	bne.n	8002372 <Paint_DrawString_CN+0x242>
                                if (*ptr & (0x80 >> (i % 8))) {
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	4619      	mov	r1, r3
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	425a      	negs	r2, r3
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	f002 0207 	and.w	r2, r2, #7
 8002340:	bf58      	it	pl
 8002342:	4253      	negpl	r3, r2
 8002344:	2280      	movs	r2, #128	; 0x80
 8002346:	fa42 f303 	asr.w	r3, r2, r3
 800234a:	400b      	ands	r3, r1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d042      	beq.n	80023d6 <Paint_DrawString_CN+0x2a6>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	b29a      	uxth	r2, r3
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	b29b      	uxth	r3, r3
 8002358:	4413      	add	r3, r2
 800235a:	b298      	uxth	r0, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	b29a      	uxth	r2, r3
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	b29b      	uxth	r3, r3
 8002364:	4413      	add	r3, r2
 8002366:	b29b      	uxth	r3, r3
 8002368:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800236a:	4619      	mov	r1, r3
 800236c:	f7ff f9ba 	bl	80016e4 <Paint_SetPixel>
 8002370:	e031      	b.n	80023d6 <Paint_DrawString_CN+0x2a6>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            } else {
                                if (*ptr & (0x80 >> (i % 8))) {
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	4619      	mov	r1, r3
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	425a      	negs	r2, r3
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	f002 0207 	and.w	r2, r2, #7
 8002384:	bf58      	it	pl
 8002386:	4253      	negpl	r3, r2
 8002388:	2280      	movs	r2, #128	; 0x80
 800238a:	fa42 f303 	asr.w	r3, r2, r3
 800238e:	400b      	ands	r3, r1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d010      	beq.n	80023b6 <Paint_DrawString_CN+0x286>
                                    Paint_SetPixel(x + i, y + j, Color_Foreground);
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	b29a      	uxth	r2, r3
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	b29b      	uxth	r3, r3
 800239c:	4413      	add	r3, r2
 800239e:	b298      	uxth	r0, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7ff f998 	bl	80016e4 <Paint_SetPixel>
 80023b4:	e00f      	b.n	80023d6 <Paint_DrawString_CN+0x2a6>
                                    // Paint_DrawPoint(x + i, y + j, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                } else {
                                    Paint_SetPixel(x + i, y + j, Color_Background);
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	b29b      	uxth	r3, r3
 80023be:	4413      	add	r3, r2
 80023c0:	b298      	uxth	r0, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7ff f987 	bl	80016e4 <Paint_SetPixel>
                                    // Paint_DrawPoint(x + i, y + j, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                                }
                            }
                            if (i % 8 == 7) {
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	425a      	negs	r2, r3
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	f002 0207 	and.w	r2, r2, #7
 80023e2:	bf58      	it	pl
 80023e4:	4253      	negpl	r3, r2
 80023e6:	2b07      	cmp	r3, #7
 80023e8:	d102      	bne.n	80023f0 <Paint_DrawString_CN+0x2c0>
                                ptr++;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
                        for (i = 0; i < font->Width; i++) {
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	3301      	adds	r3, #1
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	891b      	ldrh	r3, [r3, #8]
 80023fa:	461a      	mov	r2, r3
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	4293      	cmp	r3, r2
 8002400:	db90      	blt.n	8002324 <Paint_DrawString_CN+0x1f4>
                            }
                        }
                        if (font->Width % 8 != 0) {
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	891b      	ldrh	r3, [r3, #8]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <Paint_DrawString_CN+0x2e6>
                            ptr++;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
                    for (j = 0; j < font->Height; j++) {
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	3301      	adds	r3, #1
 800241a:	623b      	str	r3, [r7, #32]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	895b      	ldrh	r3, [r3, #10]
 8002420:	461a      	mov	r2, r3
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	4293      	cmp	r3, r2
 8002426:	f6ff af7a 	blt.w	800231e <Paint_DrawString_CN+0x1ee>
                        }
                    }
                    break;
 800242a:	e009      	b.n	8002440 <Paint_DrawString_CN+0x310>
            for(Num = 0; Num < font->size; Num++) {
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	3301      	adds	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	889b      	ldrh	r3, [r3, #4]
 8002436:	461a      	mov	r2, r3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4293      	cmp	r3, r2
 800243c:	f6ff af48 	blt.w	80022d0 <Paint_DrawString_CN+0x1a0>
                }
            }
            /* Point on the next character */
            p_text += 2;
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	3302      	adds	r3, #2
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Decrement the column position by 16 */
            x += font->Width;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	891b      	ldrh	r3, [r3, #8]
 800244a:	461a      	mov	r2, r3
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	4413      	add	r3, r2
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
    while (*p_text != 0) {
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f47f ae7a 	bne.w	8002150 <Paint_DrawString_CN+0x20>
        }
    }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3730      	adds	r7, #48	; 0x30
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b0c8      	sub	sp, #288	; 0x120
 800246c:	af02      	add	r7, sp, #8
 800246e:	e9c7 2300 	strd	r2, r3, [r7]
 8002472:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002476:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800247a:	4602      	mov	r2, r0
 800247c:	801a      	strh	r2, [r3, #0]
 800247e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002482:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002486:	460a      	mov	r2, r1
 8002488:	801a      	strh	r2, [r3, #0]
    char Str[ARRAY_LEN];
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 800248a:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 800248e:	1c99      	adds	r1, r3, #2
 8002490:	f107 0014 	add.w	r0, r7, #20
 8002494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002498:	e9cd 2300 	strd	r2, r3, [sp]
 800249c:	460a      	mov	r2, r1
 800249e:	4932      	ldr	r1, [pc, #200]	; (8002568 <Paint_DrawFloatNum+0x100>)
 80024a0:	f006 fb4c 	bl	8008b3c <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fd fe51 	bl	8000150 <strlen>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f005 fac7 	bl	8007a44 <malloc>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    memcpy(pStr,Str,(strlen(Str)-2));
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fd fe45 	bl	8000150 <strlen>
 80024c6:	4603      	mov	r3, r0
 80024c8:	1e9a      	subs	r2, r3, #2
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80024d4:	f005 fac6 	bl	8007a64 <memcpy>
    * (pStr+strlen(Str)-1)='\0';
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd fe37 	bl	8000150 <strlen>
 80024e2:	4603      	mov	r3, r0
 80024e4:	3b01      	subs	r3, #1
 80024e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024ea:	4413      	add	r3, r2
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fd fe2b 	bl	8000150 <strlen>
 80024fa:	4603      	mov	r3, r0
 80024fc:	3b03      	subs	r3, #3
 80024fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002502:	4413      	add	r3, r2
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b2e      	cmp	r3, #46	; 0x2e
 8002508:	d10b      	bne.n	8002522 <Paint_DrawFloatNum+0xba>
    {
      *(pStr+strlen(Str)-3)='\0';
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4618      	mov	r0, r3
 8002510:	f7fd fe1e 	bl	8000150 <strlen>
 8002514:	4603      	mov	r3, r0
 8002516:	3b03      	subs	r3, #3
 8002518:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800251c:	4413      	add	r3, r2
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 8002522:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002526:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800252a:	8819      	ldrh	r1, [r3, #0]
 800252c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002530:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002534:	8818      	ldrh	r0, [r3, #0]
 8002536:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002546:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800254a:	f7ff fd99 	bl	8002080 <Paint_DrawString_EN>
    free(pStr);
 800254e:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8002552:	f005 fa7f 	bl	8007a54 <free>
    pStr=NULL;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
}
 800255c:	bf00      	nop
 800255e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	0800c614 	.word	0x0800c614

0800256c <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	4608      	mov	r0, r1
 8002576:	4611      	mov	r1, r2
 8002578:	461a      	mov	r2, r3
 800257a:	4603      	mov	r3, r0
 800257c:	817b      	strh	r3, [r7, #10]
 800257e:	460b      	mov	r3, r1
 8002580:	813b      	strh	r3, [r7, #8]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]
    int i,j; 
		for(j = 0; j < H_Image; j++){
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	e049      	b.n	8002620 <Paint_DrawImage+0xb4>
			for(i = 0; i < W_Image; i++){
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e03f      	b.n	8002612 <Paint_DrawImage+0xa6>
				if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 8002592:	897a      	ldrh	r2, [r7, #10]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4413      	add	r3, r2
 8002598:	4a26      	ldr	r2, [pc, #152]	; (8002634 <Paint_DrawImage+0xc8>)
 800259a:	8912      	ldrh	r2, [r2, #8]
 800259c:	b292      	uxth	r2, r2
 800259e:	4293      	cmp	r3, r2
 80025a0:	da34      	bge.n	800260c <Paint_DrawImage+0xa0>
 80025a2:	893a      	ldrh	r2, [r7, #8]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a22      	ldr	r2, [pc, #136]	; (8002634 <Paint_DrawImage+0xc8>)
 80025aa:	8952      	ldrh	r2, [r2, #10]
 80025ac:	b292      	uxth	r2, r2
 80025ae:	4293      	cmp	r3, r2
 80025b0:	da2c      	bge.n	800260c <Paint_DrawImage+0xa0>
					Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	897b      	ldrh	r3, [r7, #10]
 80025b8:	4413      	add	r3, r2
 80025ba:	b298      	uxth	r0, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	893b      	ldrh	r3, [r7, #8]
 80025c2:	4413      	add	r3, r2
 80025c4:	b29c      	uxth	r4, r3
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	461a      	mov	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	3301      	adds	r3, #1
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	b21a      	sxth	r2, r3
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	6939      	ldr	r1, [r7, #16]
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4619      	mov	r1, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	440b      	add	r3, r1
 80025f6:	68f9      	ldr	r1, [r7, #12]
 80025f8:	440b      	add	r3, r1
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	4313      	orrs	r3, r2
 8002600:	b21b      	sxth	r3, r3
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	4621      	mov	r1, r4
 8002608:	f7ff f86c 	bl	80016e4 <Paint_SetPixel>
			for(i = 0; i < W_Image; i++){
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	3301      	adds	r3, #1
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	88fb      	ldrh	r3, [r7, #6]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	429a      	cmp	r2, r3
 8002618:	dbbb      	blt.n	8002592 <Paint_DrawImage+0x26>
		for(j = 0; j < H_Image; j++){
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	3301      	adds	r3, #1
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	429a      	cmp	r2, r3
 8002626:	dbb1      	blt.n	800258c <Paint_DrawImage+0x20>
				//j*W_Image*2 			   Y offset
				//i*2              	   X offset
			}
		}
      
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}
 8002632:	bf00      	nop
 8002634:	200005fc 	.word	0x200005fc

08002638 <LCD_1IN54_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN54_Reset(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
    LCD_1IN54_RST_1;
 800263c:	2201      	movs	r2, #1
 800263e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002642:	480d      	ldr	r0, [pc, #52]	; (8002678 <LCD_1IN54_Reset+0x40>)
 8002644:	f000 fe0a 	bl	800325c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8002648:	2064      	movs	r0, #100	; 0x64
 800264a:	f000 fb7b 	bl	8002d44 <HAL_Delay>
    LCD_1IN54_RST_0;
 800264e:	2200      	movs	r2, #0
 8002650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002654:	4808      	ldr	r0, [pc, #32]	; (8002678 <LCD_1IN54_Reset+0x40>)
 8002656:	f000 fe01 	bl	800325c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800265a:	2064      	movs	r0, #100	; 0x64
 800265c:	f000 fb72 	bl	8002d44 <HAL_Delay>
    LCD_1IN54_RST_1;
 8002660:	2201      	movs	r2, #1
 8002662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002666:	4804      	ldr	r0, [pc, #16]	; (8002678 <LCD_1IN54_Reset+0x40>)
 8002668:	f000 fdf8 	bl	800325c <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f000 fb69 	bl	8002d44 <HAL_Delay>
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40010800 	.word	0x40010800

0800267c <LCD_1IN54_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN54_SendCommand(UBYTE Reg)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
    LCD_1IN54_DC_0;
 8002686:	2200      	movs	r2, #0
 8002688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800268c:	4807      	ldr	r0, [pc, #28]	; (80026ac <LCD_1IN54_SendCommand+0x30>)
 800268e:	f000 fde5 	bl	800325c <HAL_GPIO_WritePin>
    LCD_1IN54_CS_0;
 8002692:	2200      	movs	r2, #0
 8002694:	2140      	movs	r1, #64	; 0x40
 8002696:	4806      	ldr	r0, [pc, #24]	; (80026b0 <LCD_1IN54_SendCommand+0x34>)
 8002698:	f000 fde0 	bl	800325c <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe ff5c 	bl	800155c <DEV_SPI_WRite>
    //LCD_1IN54_CS_1;
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40010800 	.word	0x40010800
 80026b0:	40010c00 	.word	0x40010c00

080026b4 <LCD_1IN54_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN54_SendData_8Bit(UBYTE Data)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
    LCD_1IN54_DC_1;
 80026be:	2201      	movs	r2, #1
 80026c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026c4:	480a      	ldr	r0, [pc, #40]	; (80026f0 <LCD_1IN54_SendData_8Bit+0x3c>)
 80026c6:	f000 fdc9 	bl	800325c <HAL_GPIO_WritePin>
    LCD_1IN54_CS_0;
 80026ca:	2200      	movs	r2, #0
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	4809      	ldr	r0, [pc, #36]	; (80026f4 <LCD_1IN54_SendData_8Bit+0x40>)
 80026d0:	f000 fdc4 	bl	800325c <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe ff40 	bl	800155c <DEV_SPI_WRite>
    LCD_1IN54_CS_1;
 80026dc:	2201      	movs	r2, #1
 80026de:	2140      	movs	r1, #64	; 0x40
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <LCD_1IN54_SendData_8Bit+0x40>)
 80026e2:	f000 fdbb 	bl	800325c <HAL_GPIO_WritePin>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40010800 	.word	0x40010800
 80026f4:	40010c00 	.word	0x40010c00

080026f8 <LCD_1IN54_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN54_SendData_16Bit(UWORD Data)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	80fb      	strh	r3, [r7, #6]
    LCD_1IN54_DC_1;
 8002702:	2201      	movs	r2, #1
 8002704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002708:	480e      	ldr	r0, [pc, #56]	; (8002744 <LCD_1IN54_SendData_16Bit+0x4c>)
 800270a:	f000 fda7 	bl	800325c <HAL_GPIO_WritePin>
    LCD_1IN54_CS_0;
 800270e:	2200      	movs	r2, #0
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	480d      	ldr	r0, [pc, #52]	; (8002748 <LCD_1IN54_SendData_16Bit+0x50>)
 8002714:	f000 fda2 	bl	800325c <HAL_GPIO_WritePin>
    DEV_SPI_WRITE((Data >> 8) & 0xFF);
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	b29b      	uxth	r3, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe ff1b 	bl	800155c <DEV_SPI_WRite>
    DEV_SPI_WRITE(Data & 0xFF);
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe ff16 	bl	800155c <DEV_SPI_WRite>
    LCD_1IN54_CS_1;
 8002730:	2201      	movs	r2, #1
 8002732:	2140      	movs	r1, #64	; 0x40
 8002734:	4804      	ldr	r0, [pc, #16]	; (8002748 <LCD_1IN54_SendData_16Bit+0x50>)
 8002736:	f000 fd91 	bl	800325c <HAL_GPIO_WritePin>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40010800 	.word	0x40010800
 8002748:	40010c00 	.word	0x40010c00

0800274c <LCD_1IN54_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN54_InitReg(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
    LCD_1IN54_SendCommand(0x3A);
 8002750:	203a      	movs	r0, #58	; 0x3a
 8002752:	f7ff ff93 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0x05);
 8002756:	2005      	movs	r0, #5
 8002758:	f7ff ffac 	bl	80026b4 <LCD_1IN54_SendData_8Bit>

    LCD_1IN54_SendCommand(0xB2);
 800275c:	20b2      	movs	r0, #178	; 0xb2
 800275e:	f7ff ff8d 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0x0C);
 8002762:	200c      	movs	r0, #12
 8002764:	f7ff ffa6 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x0C);
 8002768:	200c      	movs	r0, #12
 800276a:	f7ff ffa3 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x00);
 800276e:	2000      	movs	r0, #0
 8002770:	f7ff ffa0 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x33);
 8002774:	2033      	movs	r0, #51	; 0x33
 8002776:	f7ff ff9d 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x33);
 800277a:	2033      	movs	r0, #51	; 0x33
 800277c:	f7ff ff9a 	bl	80026b4 <LCD_1IN54_SendData_8Bit>

    LCD_1IN54_SendCommand(0xB7);  //Gate Control
 8002780:	20b7      	movs	r0, #183	; 0xb7
 8002782:	f7ff ff7b 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0x35);
 8002786:	2035      	movs	r0, #53	; 0x35
 8002788:	f7ff ff94 	bl	80026b4 <LCD_1IN54_SendData_8Bit>

    LCD_1IN54_SendCommand(0xBB);  //VCOM Setting
 800278c:	20bb      	movs	r0, #187	; 0xbb
 800278e:	f7ff ff75 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0x19);
 8002792:	2019      	movs	r0, #25
 8002794:	f7ff ff8e 	bl	80026b4 <LCD_1IN54_SendData_8Bit>

    LCD_1IN54_SendCommand(0xC0); //LCM Control     
 8002798:	20c0      	movs	r0, #192	; 0xc0
 800279a:	f7ff ff6f 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0x2C);
 800279e:	202c      	movs	r0, #44	; 0x2c
 80027a0:	f7ff ff88 	bl	80026b4 <LCD_1IN54_SendData_8Bit>

    LCD_1IN54_SendCommand(0xC2);  //VDV and VRH Command Enable
 80027a4:	20c2      	movs	r0, #194	; 0xc2
 80027a6:	f7ff ff69 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0x01);
 80027aa:	2001      	movs	r0, #1
 80027ac:	f7ff ff82 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendCommand(0xC3);  //VRH Set
 80027b0:	20c3      	movs	r0, #195	; 0xc3
 80027b2:	f7ff ff63 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0x12);
 80027b6:	2012      	movs	r0, #18
 80027b8:	f7ff ff7c 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendCommand(0xC4);  //VDV Set
 80027bc:	20c4      	movs	r0, #196	; 0xc4
 80027be:	f7ff ff5d 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0x20);
 80027c2:	2020      	movs	r0, #32
 80027c4:	f7ff ff76 	bl	80026b4 <LCD_1IN54_SendData_8Bit>

    LCD_1IN54_SendCommand(0xC6);  //Frame Rate Control in Normal Mode
 80027c8:	20c6      	movs	r0, #198	; 0xc6
 80027ca:	f7ff ff57 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0x0F);
 80027ce:	200f      	movs	r0, #15
 80027d0:	f7ff ff70 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    
    LCD_1IN54_SendCommand(0xD0);  // Power Control 1
 80027d4:	20d0      	movs	r0, #208	; 0xd0
 80027d6:	f7ff ff51 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0xA4);
 80027da:	20a4      	movs	r0, #164	; 0xa4
 80027dc:	f7ff ff6a 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0xA1);
 80027e0:	20a1      	movs	r0, #161	; 0xa1
 80027e2:	f7ff ff67 	bl	80026b4 <LCD_1IN54_SendData_8Bit>

    LCD_1IN54_SendCommand(0xE0);  //Positive Voltage Gamma Control
 80027e6:	20e0      	movs	r0, #224	; 0xe0
 80027e8:	f7ff ff48 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0xD0);
 80027ec:	20d0      	movs	r0, #208	; 0xd0
 80027ee:	f7ff ff61 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x04);
 80027f2:	2004      	movs	r0, #4
 80027f4:	f7ff ff5e 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x0D);
 80027f8:	200d      	movs	r0, #13
 80027fa:	f7ff ff5b 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x11);
 80027fe:	2011      	movs	r0, #17
 8002800:	f7ff ff58 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x13);
 8002804:	2013      	movs	r0, #19
 8002806:	f7ff ff55 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x2B);
 800280a:	202b      	movs	r0, #43	; 0x2b
 800280c:	f7ff ff52 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x3F);
 8002810:	203f      	movs	r0, #63	; 0x3f
 8002812:	f7ff ff4f 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x54);
 8002816:	2054      	movs	r0, #84	; 0x54
 8002818:	f7ff ff4c 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x4C);
 800281c:	204c      	movs	r0, #76	; 0x4c
 800281e:	f7ff ff49 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x18);
 8002822:	2018      	movs	r0, #24
 8002824:	f7ff ff46 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x0D);
 8002828:	200d      	movs	r0, #13
 800282a:	f7ff ff43 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x0B);
 800282e:	200b      	movs	r0, #11
 8002830:	f7ff ff40 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x1F);
 8002834:	201f      	movs	r0, #31
 8002836:	f7ff ff3d 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x23);
 800283a:	2023      	movs	r0, #35	; 0x23
 800283c:	f7ff ff3a 	bl	80026b4 <LCD_1IN54_SendData_8Bit>

    LCD_1IN54_SendCommand(0xE1);  //Negative Voltage Gamma Control
 8002840:	20e1      	movs	r0, #225	; 0xe1
 8002842:	f7ff ff1b 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(0xD0);
 8002846:	20d0      	movs	r0, #208	; 0xd0
 8002848:	f7ff ff34 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x04);
 800284c:	2004      	movs	r0, #4
 800284e:	f7ff ff31 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x0C);
 8002852:	200c      	movs	r0, #12
 8002854:	f7ff ff2e 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x11);
 8002858:	2011      	movs	r0, #17
 800285a:	f7ff ff2b 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x13);
 800285e:	2013      	movs	r0, #19
 8002860:	f7ff ff28 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x2C);
 8002864:	202c      	movs	r0, #44	; 0x2c
 8002866:	f7ff ff25 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x3F);
 800286a:	203f      	movs	r0, #63	; 0x3f
 800286c:	f7ff ff22 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x44);
 8002870:	2044      	movs	r0, #68	; 0x44
 8002872:	f7ff ff1f 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x51);
 8002876:	2051      	movs	r0, #81	; 0x51
 8002878:	f7ff ff1c 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x2F);
 800287c:	202f      	movs	r0, #47	; 0x2f
 800287e:	f7ff ff19 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x1F);
 8002882:	201f      	movs	r0, #31
 8002884:	f7ff ff16 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x1F);
 8002888:	201f      	movs	r0, #31
 800288a:	f7ff ff13 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x20);
 800288e:	2020      	movs	r0, #32
 8002890:	f7ff ff10 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(0x23);
 8002894:	2023      	movs	r0, #35	; 0x23
 8002896:	f7ff ff0d 	bl	80026b4 <LCD_1IN54_SendData_8Bit>

    LCD_1IN54_SendCommand(0x21);  //Display Inversion On
 800289a:	2021      	movs	r0, #33	; 0x21
 800289c:	f7ff feee 	bl	800267c <LCD_1IN54_SendCommand>

    LCD_1IN54_SendCommand(0x11);  //Sleep Out
 80028a0:	2011      	movs	r0, #17
 80028a2:	f7ff feeb 	bl	800267c <LCD_1IN54_SendCommand>

    LCD_1IN54_SendCommand(0x29);  //Display On
 80028a6:	2029      	movs	r0, #41	; 0x29
 80028a8:	f7ff fee8 	bl	800267c <LCD_1IN54_SendCommand>
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <LCD_1IN54_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN54_SetAttributes(UBYTE Scan_dir)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN54.SCAN_DIR = Scan_dir;
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <LCD_1IN54_SetAttributes+0x54>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x00;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d108      	bne.n	80028dc <LCD_1IN54_SetAttributes+0x2c>
        LCD_1IN54.HEIGHT	= LCD_1IN54_HEIGHT;
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <LCD_1IN54_SetAttributes+0x54>)
 80028cc:	22f0      	movs	r2, #240	; 0xf0
 80028ce:	805a      	strh	r2, [r3, #2]
        LCD_1IN54.WIDTH   = LCD_1IN54_WIDTH;
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <LCD_1IN54_SetAttributes+0x54>)
 80028d2:	22f0      	movs	r2, #240	; 0xf0
 80028d4:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X70;
 80028d6:	2370      	movs	r3, #112	; 0x70
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	e007      	b.n	80028ec <LCD_1IN54_SetAttributes+0x3c>
    } else {
        LCD_1IN54.HEIGHT	= LCD_1IN54_WIDTH;
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <LCD_1IN54_SetAttributes+0x54>)
 80028de:	22f0      	movs	r2, #240	; 0xf0
 80028e0:	805a      	strh	r2, [r3, #2]
        LCD_1IN54.WIDTH   = LCD_1IN54_HEIGHT;
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <LCD_1IN54_SetAttributes+0x54>)
 80028e4:	22f0      	movs	r2, #240	; 0xf0
 80028e6:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X00;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN54_SendCommand(0x36); //MX, MY, RGB mode
 80028ec:	2036      	movs	r0, #54	; 0x36
 80028ee:	f7ff fec5 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fedd 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2000061c 	.word	0x2000061c

08002908 <LCD_1IN54_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN54_Init(UBYTE Scan_dir)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
    //Hardware reset
    LCD_1IN54_Reset();
 8002912:	f7ff fe91 	bl	8002638 <LCD_1IN54_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN54_SetAttributes(Scan_dir);
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ffc9 	bl	80028b0 <LCD_1IN54_SetAttributes>
    
    //Set the initialization register
    LCD_1IN54_InitReg();
 800291e:	f7ff ff15 	bl	800274c <LCD_1IN54_InitReg>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <LCD_1IN54_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN54_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 800292a:	b590      	push	{r4, r7, lr}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	4604      	mov	r4, r0
 8002932:	4608      	mov	r0, r1
 8002934:	4611      	mov	r1, r2
 8002936:	461a      	mov	r2, r3
 8002938:	4623      	mov	r3, r4
 800293a:	80fb      	strh	r3, [r7, #6]
 800293c:	4603      	mov	r3, r0
 800293e:	80bb      	strh	r3, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
 8002944:	4613      	mov	r3, r2
 8002946:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN54_SendCommand(0x2A);
 8002948:	202a      	movs	r0, #42	; 0x2a
 800294a:	f7ff fe97 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit((Xstart >> 8) & 0xFF);
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	b29b      	uxth	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff feac 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(Xstart & 0xFF);
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fea7 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(((Xend  ) >> 8) & 0xFF);
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	b29b      	uxth	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fea0 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit((Xend  ) & 0xFF);
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fe9b 	bl	80026b4 <LCD_1IN54_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN54_SendCommand(0x2B);
 800297e:	202b      	movs	r0, #43	; 0x2b
 8002980:	f7ff fe7c 	bl	800267c <LCD_1IN54_SendCommand>
    LCD_1IN54_SendData_8Bit((Ystart >> 8) & 0xFF);
 8002984:	88bb      	ldrh	r3, [r7, #4]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	b29b      	uxth	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fe91 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(Ystart & 0xFF);
 8002992:	88bb      	ldrh	r3, [r7, #4]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fe8c 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit(((Yend  ) >> 8) & 0xFF);
 800299c:	883b      	ldrh	r3, [r7, #0]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fe85 	bl	80026b4 <LCD_1IN54_SendData_8Bit>
    LCD_1IN54_SendData_8Bit((Yend  ) & 0xFF);
 80029aa:	883b      	ldrh	r3, [r7, #0]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fe80 	bl	80026b4 <LCD_1IN54_SendData_8Bit>

    LCD_1IN54_SendCommand(0X2C);
 80029b4:	202c      	movs	r0, #44	; 0x2c
 80029b6:	f7ff fe61 	bl	800267c <LCD_1IN54_SendCommand>
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}
	...

080029c4 <LCD_1IN54_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN54_Clear(UWORD Color)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN54_SetWindows(0, 0, LCD_1IN54_WIDTH-1, LCD_1IN54_HEIGHT-1);
 80029ce:	23ef      	movs	r3, #239	; 0xef
 80029d0:	22ef      	movs	r2, #239	; 0xef
 80029d2:	2100      	movs	r1, #0
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7ff ffa8 	bl	800292a <LCD_1IN54_SetWindows>

	DEV_Digital_Write(DEV_DC_PIN, 1);
 80029da:	2201      	movs	r2, #1
 80029dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e0:	4812      	ldr	r0, [pc, #72]	; (8002a2c <LCD_1IN54_Clear+0x68>)
 80029e2:	f000 fc3b 	bl	800325c <HAL_GPIO_WritePin>
	for(i = 0; i < LCD_1IN54_WIDTH; i++){
 80029e6:	2300      	movs	r3, #0
 80029e8:	81fb      	strh	r3, [r7, #14]
 80029ea:	e017      	b.n	8002a1c <LCD_1IN54_Clear+0x58>
		for(j = 0; j < LCD_1IN54_HEIGHT; j++){
 80029ec:	2300      	movs	r3, #0
 80029ee:	81bb      	strh	r3, [r7, #12]
 80029f0:	e00e      	b.n	8002a10 <LCD_1IN54_Clear+0x4c>
			DEV_SPI_WRITE((Color>>8)&0xff);
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fdae 	bl	800155c <DEV_SPI_WRite>
			DEV_SPI_WRITE(Color);
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fda9 	bl	800155c <DEV_SPI_WRite>
		for(j = 0; j < LCD_1IN54_HEIGHT; j++){
 8002a0a:	89bb      	ldrh	r3, [r7, #12]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	81bb      	strh	r3, [r7, #12]
 8002a10:	89bb      	ldrh	r3, [r7, #12]
 8002a12:	2bef      	cmp	r3, #239	; 0xef
 8002a14:	d9ed      	bls.n	80029f2 <LCD_1IN54_Clear+0x2e>
	for(i = 0; i < LCD_1IN54_WIDTH; i++){
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	81fb      	strh	r3, [r7, #14]
 8002a1c:	89fb      	ldrh	r3, [r7, #14]
 8002a1e:	2bef      	cmp	r3, #239	; 0xef
 8002a20:	d9e4      	bls.n	80029ec <LCD_1IN54_Clear+0x28>
		}
	 }
}
 8002a22:	bf00      	nop
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40010800 	.word	0x40010800

08002a30 <LCD_1IN54_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN54_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	80fb      	strh	r3, [r7, #6]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	80bb      	strh	r3, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	807b      	strh	r3, [r7, #2]
	LCD_1IN54_SetWindows(x,y,x,y);
 8002a42:	88bb      	ldrh	r3, [r7, #4]
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	88b9      	ldrh	r1, [r7, #4]
 8002a48:	88f8      	ldrh	r0, [r7, #6]
 8002a4a:	f7ff ff6e 	bl	800292a <LCD_1IN54_SetWindows>
	LCD_1IN54_SendData_16Bit(Color); 	    
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fe51 	bl	80026f8 <LCD_1IN54_SendData_16Bit>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <LCD_1IN54_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN54_SetBackLight(UWORD Value)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
	DEV_Set_PWM(Value);
 8002a6a:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <LCD_1IN54_SetBackLight+0x1c>)
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40000400 	.word	0x40000400

08002a80 <LCD_1in54_test>:
#include "LCD_1in54.h"
#include "DEV_Config.h"


void LCD_1in54_test()
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af04      	add	r7, sp, #16
	printf("LCD_1IN54_test Demo\r\n");
 8002a86:	486e      	ldr	r0, [pc, #440]	; (8002c40 <LCD_1in54_test+0x1c0>)
 8002a88:	f005 ffd2 	bl	8008a30 <puts>
	DEV_Module_Init();
 8002a8c:	f7fe fd78 	bl	8001580 <DEV_Module_Init>
  
  printf("LCD_1IN54_ Init and Clear...\r\n");
 8002a90:	486c      	ldr	r0, [pc, #432]	; (8002c44 <LCD_1in54_test+0x1c4>)
 8002a92:	f005 ffcd 	bl	8008a30 <puts>
	LCD_1IN54_SetBackLight(1000);
 8002a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a9a:	f7ff ffe1 	bl	8002a60 <LCD_1IN54_SetBackLight>
	LCD_1IN54_Init(VERTICAL);
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7ff ff32 	bl	8002908 <LCD_1IN54_Init>
	LCD_1IN54_Clear(WHITE);
 8002aa4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002aa8:	f7ff ff8c 	bl	80029c4 <LCD_1IN54_Clear>
  
  printf("Paint_NewImage\r\n");
 8002aac:	4866      	ldr	r0, [pc, #408]	; (8002c48 <LCD_1in54_test+0x1c8>)
 8002aae:	f005 ffbf 	bl	8008a30 <puts>
	Paint_NewImage(LCD_1IN54_WIDTH,LCD_1IN54_HEIGHT, 0, WHITE);
 8002ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	21f0      	movs	r1, #240	; 0xf0
 8002aba:	20f0      	movs	r0, #240	; 0xf0
 8002abc:	f7fe fd80 	bl	80015c0 <Paint_NewImage>
  
  printf("Set Clear and Display Funtion\r\n");
 8002ac0:	4862      	ldr	r0, [pc, #392]	; (8002c4c <LCD_1in54_test+0x1cc>)
 8002ac2:	f005 ffb5 	bl	8008a30 <puts>
	Paint_SetClearFuntion(LCD_1IN54_Clear);
 8002ac6:	4862      	ldr	r0, [pc, #392]	; (8002c50 <LCD_1in54_test+0x1d0>)
 8002ac8:	f7fe fdc6 	bl	8001658 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN54_DrawPaint);
 8002acc:	4861      	ldr	r0, [pc, #388]	; (8002c54 <LCD_1in54_test+0x1d4>)
 8002ace:	f7fe fdd1 	bl	8001674 <Paint_SetDisplayFuntion>
  
  printf("Paint_Clear\r\n");
 8002ad2:	4861      	ldr	r0, [pc, #388]	; (8002c58 <LCD_1in54_test+0x1d8>)
 8002ad4:	f005 ffac 	bl	8008a30 <puts>
	Paint_Clear(WHITE);
 8002ad8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002adc:	f7fe feb2 	bl	8001844 <Paint_Clear>
  DEV_Delay_ms(1000);
 8002ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ae4:	f000 f92e 	bl	8002d44 <HAL_Delay>
  
  printf("drawing...\r\n");
 8002ae8:	485c      	ldr	r0, [pc, #368]	; (8002c5c <LCD_1in54_test+0x1dc>)
 8002aea:	f005 ffa1 	bl	8008a30 <puts>
	Paint_SetRotate(180);
 8002aee:	20b4      	movs	r0, #180	; 0xb4
 8002af0:	f7fe fdce 	bl	8001690 <Paint_SetRotate>
	Paint_DrawString_EN(30, 10, "123",        &Font24,  YELLOW, RED);  
 8002af4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	4b57      	ldr	r3, [pc, #348]	; (8002c60 <LCD_1in54_test+0x1e0>)
 8002b02:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <LCD_1in54_test+0x1e4>)
 8002b04:	210a      	movs	r1, #10
 8002b06:	201e      	movs	r0, #30
 8002b08:	f7ff faba 	bl	8002080 <Paint_DrawString_EN>
	Paint_DrawString_EN(30, 34, "TWAT",        &Font24,  BLUE,   CYAN);
 8002b0c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002b10:	9301      	str	r3, [sp, #4]
 8002b12:	231f      	movs	r3, #31
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	4b52      	ldr	r3, [pc, #328]	; (8002c60 <LCD_1in54_test+0x1e0>)
 8002b18:	4a53      	ldr	r2, [pc, #332]	; (8002c68 <LCD_1in54_test+0x1e8>)
 8002b1a:	2122      	movs	r1, #34	; 0x22
 8002b1c:	201e      	movs	r0, #30
 8002b1e:	f7ff faaf 	bl	8002080 <Paint_DrawString_EN>
  Paint_DrawFloatNum (30, 58 ,987.654321,3, &Font12,  WHITE,  BLACK);
 8002b22:	2300      	movs	r3, #0
 8002b24:	9303      	str	r3, [sp, #12]
 8002b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b2a:	9302      	str	r3, [sp, #8]
 8002b2c:	4b4f      	ldr	r3, [pc, #316]	; (8002c6c <LCD_1in54_test+0x1ec>)
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	2303      	movs	r3, #3
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	a340      	add	r3, pc, #256	; (adr r3, 8002c38 <LCD_1in54_test+0x1b8>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	213a      	movs	r1, #58	; 0x3a
 8002b3c:	201e      	movs	r0, #30
 8002b3e:	f7ff fc93 	bl	8002468 <Paint_DrawFloatNum>
	Paint_DrawString_CN(50,180, "΢ѩ����",   &Font24CN,WHITE,  RED);
 8002b42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4b48      	ldr	r3, [pc, #288]	; (8002c70 <LCD_1in54_test+0x1f0>)
 8002b50:	4a48      	ldr	r2, [pc, #288]	; (8002c74 <LCD_1in54_test+0x1f4>)
 8002b52:	21b4      	movs	r1, #180	; 0xb4
 8002b54:	2032      	movs	r0, #50	; 0x32
 8002b56:	f7ff faeb 	bl	8002130 <Paint_DrawString_CN>
  Paint_DrawImage(gImage_1,25,70,60,60);
 8002b5a:	233c      	movs	r3, #60	; 0x3c
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	233c      	movs	r3, #60	; 0x3c
 8002b60:	2246      	movs	r2, #70	; 0x46
 8002b62:	2119      	movs	r1, #25
 8002b64:	4844      	ldr	r0, [pc, #272]	; (8002c78 <LCD_1in54_test+0x1f8>)
 8002b66:	f7ff fd01 	bl	800256c <Paint_DrawImage>
  
	Paint_DrawRectangle(125, 10, 225, 58, RED     ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9302      	str	r3, [sp, #8]
 8002b6e:	2302      	movs	r3, #2
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	233a      	movs	r3, #58	; 0x3a
 8002b7a:	22e1      	movs	r2, #225	; 0xe1
 8002b7c:	210a      	movs	r1, #10
 8002b7e:	207d      	movs	r0, #125	; 0x7d
 8002b80:	f7fe ffbc 	bl	8001afc <Paint_DrawRectangle>
	Paint_DrawLine  (125, 10, 225, 58,    MAGENTA ,DOT_PIXEL_2X2,LINE_STYLE_SOLID);
 8002b84:	2300      	movs	r3, #0
 8002b86:	9302      	str	r3, [sp, #8]
 8002b88:	2302      	movs	r3, #2
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	233a      	movs	r3, #58	; 0x3a
 8002b94:	22e1      	movs	r2, #225	; 0xe1
 8002b96:	210a      	movs	r1, #10
 8002b98:	207d      	movs	r0, #125	; 0x7d
 8002b9a:	f7fe feff 	bl	800199c <Paint_DrawLine>
	Paint_DrawLine  (225, 10, 125, 58,    MAGENTA ,DOT_PIXEL_2X2,LINE_STYLE_SOLID);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	9302      	str	r3, [sp, #8]
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	233a      	movs	r3, #58	; 0x3a
 8002bae:	227d      	movs	r2, #125	; 0x7d
 8002bb0:	210a      	movs	r1, #10
 8002bb2:	20e1      	movs	r0, #225	; 0xe1
 8002bb4:	f7fe fef2 	bl	800199c <Paint_DrawLine>
	Paint_DrawCircle(150,100,  25,        BLUE    ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 8002bb8:	2300      	movs	r3, #0
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	231f      	movs	r3, #31
 8002bc2:	2219      	movs	r2, #25
 8002bc4:	2164      	movs	r1, #100	; 0x64
 8002bc6:	2096      	movs	r0, #150	; 0x96
 8002bc8:	f7ff f820 	bl	8001c0c <Paint_DrawCircle>
	Paint_DrawCircle(180,100,  25,        BLACK   ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2219      	movs	r2, #25
 8002bd8:	2164      	movs	r1, #100	; 0x64
 8002bda:	20b4      	movs	r0, #180	; 0xb4
 8002bdc:	f7ff f816 	bl	8001c0c <Paint_DrawCircle>
	Paint_DrawCircle(210,100,  25,        RED     ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 8002be0:	2300      	movs	r3, #0
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	2302      	movs	r3, #2
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002bec:	2219      	movs	r2, #25
 8002bee:	2164      	movs	r1, #100	; 0x64
 8002bf0:	20d2      	movs	r0, #210	; 0xd2
 8002bf2:	f7ff f80b 	bl	8001c0c <Paint_DrawCircle>
	Paint_DrawCircle(165,125,  25,        YELLOW  ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002c02:	2219      	movs	r2, #25
 8002c04:	217d      	movs	r1, #125	; 0x7d
 8002c06:	20a5      	movs	r0, #165	; 0xa5
 8002c08:	f7ff f800 	bl	8001c0c <Paint_DrawCircle>
	Paint_DrawCircle(195,125,  25,        GREEN   ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	2302      	movs	r3, #2
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c18:	2219      	movs	r2, #25
 8002c1a:	217d      	movs	r1, #125	; 0x7d
 8002c1c:	20c3      	movs	r0, #195	; 0xc3
 8002c1e:	f7fe fff5 	bl	8001c0c <Paint_DrawCircle>
	DEV_Delay_ms(3000);
 8002c22:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c26:	f000 f88d 	bl	8002d44 <HAL_Delay>
	
	printf("quit...\r\n");
 8002c2a:	4814      	ldr	r0, [pc, #80]	; (8002c7c <LCD_1in54_test+0x1fc>)
 8002c2c:	f005 ff00 	bl	8008a30 <puts>
//	DEV_Module_Exit();
  
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	0ca600b0 	.word	0x0ca600b0
 8002c3c:	408edd3c 	.word	0x408edd3c
 8002c40:	0800c628 	.word	0x0800c628
 8002c44:	0800c640 	.word	0x0800c640
 8002c48:	0800c660 	.word	0x0800c660
 8002c4c:	0800c670 	.word	0x0800c670
 8002c50:	080029c5 	.word	0x080029c5
 8002c54:	08002a31 	.word	0x08002a31
 8002c58:	0800c690 	.word	0x0800c690
 8002c5c:	0800c6a0 	.word	0x0800c6a0
 8002c60:	2000000c 	.word	0x2000000c
 8002c64:	0800c6ac 	.word	0x0800c6ac
 8002c68:	0800c6b0 	.word	0x0800c6b0
 8002c6c:	20000004 	.word	0x20000004
 8002c70:	20000014 	.word	0x20000014
 8002c74:	0800c6b8 	.word	0x0800c6b8
 8002c78:	0800f834 	.word	0x0800f834
 8002c7c:	0800c6cc 	.word	0x0800c6cc

08002c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_Init+0x28>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <HAL_Init+0x28>)
 8002c8a:	f043 0310 	orr.w	r3, r3, #16
 8002c8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c90:	2003      	movs	r0, #3
 8002c92:	f000 f92b 	bl	8002eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c96:	200f      	movs	r0, #15
 8002c98:	f000 f808 	bl	8002cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c9c:	f7fe fa0c 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40022000 	.word	0x40022000

08002cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_InitTick+0x54>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_InitTick+0x58>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f935 	bl	8002f3a <HAL_SYSTICK_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e00e      	b.n	8002cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d80a      	bhi.n	8002cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	f000 f90b 	bl	8002f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cec:	4a06      	ldr	r2, [pc, #24]	; (8002d08 <HAL_InitTick+0x5c>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e000      	b.n	8002cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000024 	.word	0x20000024
 8002d08:	20000020 	.word	0x20000020

08002d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_IncTick+0x1c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_IncTick+0x20>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a03      	ldr	r2, [pc, #12]	; (8002d2c <HAL_IncTick+0x20>)
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	20000024 	.word	0x20000024
 8002d2c:	20000624 	.word	0x20000624

08002d30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return uwTick;
 8002d34:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <HAL_GetTick+0x10>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr
 8002d40:	20000624 	.word	0x20000624

08002d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d4c:	f7ff fff0 	bl	8002d30 <HAL_GetTick>
 8002d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d005      	beq.n	8002d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_Delay+0x44>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d6a:	bf00      	nop
 8002d6c:	f7ff ffe0 	bl	8002d30 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d8f7      	bhi.n	8002d6c <HAL_Delay+0x28>
  {
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000024 	.word	0x20000024

08002d8c <__NVIC_SetPriorityGrouping>:
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]
		reg_value = SCB->AIRCR; /* read old register configuration    */
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da8:	4013      	ands	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	021a      	lsls	r2, r3, #8
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8002db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbc:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8002dbe:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	60d3      	str	r3, [r2, #12]
	}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <__NVIC_GetPriorityGrouping>:
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <__NVIC_GetPriorityGrouping+0x18>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f003 0307 	and.w	r3, r3, #7
	}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_SetPriority>:
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	db0a      	blt.n	8002e1a <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	490c      	ldr	r1, [pc, #48]	; (8002e3c <__NVIC_SetPriority+0x4c>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	440b      	add	r3, r1
 8002e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	}
 8002e18:	e00a      	b.n	8002e30 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4908      	ldr	r1, [pc, #32]	; (8002e40 <__NVIC_SetPriority+0x50>)
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	3b04      	subs	r3, #4
 8002e28:	0112      	lsls	r2, r2, #4
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	761a      	strb	r2, [r3, #24]
	}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000e100 	.word	0xe000e100
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <NVIC_EncodePriority>:
			uint32_t PreemptPriority, uint32_t SubPriority) {
 8002e44:	b480      	push	{r7}
 8002e46:	b089      	sub	sp, #36	; 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	61fb      	str	r3, [r7, #28]
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	bf28      	it	cs
 8002e62:	2304      	movcs	r3, #4
 8002e64:	61bb      	str	r3, [r7, #24]
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3304      	adds	r3, #4
						(uint32_t) 0UL :
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d902      	bls.n	8002e74 <NVIC_EncodePriority+0x30>
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3b03      	subs	r3, #3
 8002e72:	e000      	b.n	8002e76 <NVIC_EncodePriority+0x32>
 8002e74:	2300      	movs	r3, #0
		SubPriorityBits =
 8002e76:	617b      	str	r3, [r7, #20]
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8002e78:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	43d9      	mvns	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	400b      	ands	r3, r1
 8002e9c:	4313      	orrs	r3, r2
	}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <SysTick_Config>:
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb8:	d301      	bcc.n	8002ebe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00f      	b.n	8002ede <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <SysTick_Config+0x40>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f7ff ff90 	bl	8002df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000e010 	.word	0xe000e010

08002eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff49 	bl	8002d8c <__NVIC_SetPriorityGrouping>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f14:	f7ff ff5e 	bl	8002dd4 <__NVIC_GetPriorityGrouping>
 8002f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f7ff ff90 	bl	8002e44 <NVIC_EncodePriority>
 8002f24:	4602      	mov	r2, r0
 8002f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff5f 	bl	8002df0 <__NVIC_SetPriority>
}
 8002f32:	bf00      	nop
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ffb0 	bl	8002ea8 <SysTick_Config>
 8002f48:	4603      	mov	r3, r0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b08b      	sub	sp, #44	; 0x2c
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f62:	2300      	movs	r3, #0
 8002f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f66:	e169      	b.n	800323c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f68:	2201      	movs	r2, #1
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	f040 8158 	bne.w	8003236 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a9a      	ldr	r2, [pc, #616]	; (80031f4 <HAL_GPIO_Init+0x2a0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d05e      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002f90:	4a98      	ldr	r2, [pc, #608]	; (80031f4 <HAL_GPIO_Init+0x2a0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d875      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002f96:	4a98      	ldr	r2, [pc, #608]	; (80031f8 <HAL_GPIO_Init+0x2a4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d058      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002f9c:	4a96      	ldr	r2, [pc, #600]	; (80031f8 <HAL_GPIO_Init+0x2a4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d86f      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fa2:	4a96      	ldr	r2, [pc, #600]	; (80031fc <HAL_GPIO_Init+0x2a8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d052      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002fa8:	4a94      	ldr	r2, [pc, #592]	; (80031fc <HAL_GPIO_Init+0x2a8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d869      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fae:	4a94      	ldr	r2, [pc, #592]	; (8003200 <HAL_GPIO_Init+0x2ac>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04c      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002fb4:	4a92      	ldr	r2, [pc, #584]	; (8003200 <HAL_GPIO_Init+0x2ac>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d863      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fba:	4a92      	ldr	r2, [pc, #584]	; (8003204 <HAL_GPIO_Init+0x2b0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d046      	beq.n	800304e <HAL_GPIO_Init+0xfa>
 8002fc0:	4a90      	ldr	r2, [pc, #576]	; (8003204 <HAL_GPIO_Init+0x2b0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d85d      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fc6:	2b12      	cmp	r3, #18
 8002fc8:	d82a      	bhi.n	8003020 <HAL_GPIO_Init+0xcc>
 8002fca:	2b12      	cmp	r3, #18
 8002fcc:	d859      	bhi.n	8003082 <HAL_GPIO_Init+0x12e>
 8002fce:	a201      	add	r2, pc, #4	; (adr r2, 8002fd4 <HAL_GPIO_Init+0x80>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	0800304f 	.word	0x0800304f
 8002fd8:	08003029 	.word	0x08003029
 8002fdc:	0800303b 	.word	0x0800303b
 8002fe0:	0800307d 	.word	0x0800307d
 8002fe4:	08003083 	.word	0x08003083
 8002fe8:	08003083 	.word	0x08003083
 8002fec:	08003083 	.word	0x08003083
 8002ff0:	08003083 	.word	0x08003083
 8002ff4:	08003083 	.word	0x08003083
 8002ff8:	08003083 	.word	0x08003083
 8002ffc:	08003083 	.word	0x08003083
 8003000:	08003083 	.word	0x08003083
 8003004:	08003083 	.word	0x08003083
 8003008:	08003083 	.word	0x08003083
 800300c:	08003083 	.word	0x08003083
 8003010:	08003083 	.word	0x08003083
 8003014:	08003083 	.word	0x08003083
 8003018:	08003031 	.word	0x08003031
 800301c:	08003045 	.word	0x08003045
 8003020:	4a79      	ldr	r2, [pc, #484]	; (8003208 <HAL_GPIO_Init+0x2b4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003026:	e02c      	b.n	8003082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	623b      	str	r3, [r7, #32]
          break;
 800302e:	e029      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	3304      	adds	r3, #4
 8003036:	623b      	str	r3, [r7, #32]
          break;
 8003038:	e024      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	3308      	adds	r3, #8
 8003040:	623b      	str	r3, [r7, #32]
          break;
 8003042:	e01f      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	330c      	adds	r3, #12
 800304a:	623b      	str	r3, [r7, #32]
          break;
 800304c:	e01a      	b.n	8003084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003056:	2304      	movs	r3, #4
 8003058:	623b      	str	r3, [r7, #32]
          break;
 800305a:	e013      	b.n	8003084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003064:	2308      	movs	r3, #8
 8003066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	611a      	str	r2, [r3, #16]
          break;
 800306e:	e009      	b.n	8003084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003070:	2308      	movs	r3, #8
 8003072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	615a      	str	r2, [r3, #20]
          break;
 800307a:	e003      	b.n	8003084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800307c:	2300      	movs	r3, #0
 800307e:	623b      	str	r3, [r7, #32]
          break;
 8003080:	e000      	b.n	8003084 <HAL_GPIO_Init+0x130>
          break;
 8003082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2bff      	cmp	r3, #255	; 0xff
 8003088:	d801      	bhi.n	800308e <HAL_GPIO_Init+0x13a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	e001      	b.n	8003092 <HAL_GPIO_Init+0x13e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2bff      	cmp	r3, #255	; 0xff
 8003098:	d802      	bhi.n	80030a0 <HAL_GPIO_Init+0x14c>
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	e002      	b.n	80030a6 <HAL_GPIO_Init+0x152>
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	3b08      	subs	r3, #8
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	210f      	movs	r1, #15
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	6a39      	ldr	r1, [r7, #32]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	431a      	orrs	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80b1 	beq.w	8003236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030d4:	4b4d      	ldr	r3, [pc, #308]	; (800320c <HAL_GPIO_Init+0x2b8>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	4a4c      	ldr	r2, [pc, #304]	; (800320c <HAL_GPIO_Init+0x2b8>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6193      	str	r3, [r2, #24]
 80030e0:	4b4a      	ldr	r3, [pc, #296]	; (800320c <HAL_GPIO_Init+0x2b8>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030ec:	4a48      	ldr	r2, [pc, #288]	; (8003210 <HAL_GPIO_Init+0x2bc>)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	3302      	adds	r3, #2
 80030f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	220f      	movs	r2, #15
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4013      	ands	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a40      	ldr	r2, [pc, #256]	; (8003214 <HAL_GPIO_Init+0x2c0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d013      	beq.n	8003140 <HAL_GPIO_Init+0x1ec>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a3f      	ldr	r2, [pc, #252]	; (8003218 <HAL_GPIO_Init+0x2c4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00d      	beq.n	800313c <HAL_GPIO_Init+0x1e8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3e      	ldr	r2, [pc, #248]	; (800321c <HAL_GPIO_Init+0x2c8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d007      	beq.n	8003138 <HAL_GPIO_Init+0x1e4>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a3d      	ldr	r2, [pc, #244]	; (8003220 <HAL_GPIO_Init+0x2cc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <HAL_GPIO_Init+0x1e0>
 8003130:	2303      	movs	r3, #3
 8003132:	e006      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 8003134:	2304      	movs	r3, #4
 8003136:	e004      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 8003138:	2302      	movs	r3, #2
 800313a:	e002      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_GPIO_Init+0x1ee>
 8003140:	2300      	movs	r3, #0
 8003142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003144:	f002 0203 	and.w	r2, r2, #3
 8003148:	0092      	lsls	r2, r2, #2
 800314a:	4093      	lsls	r3, r2
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003152:	492f      	ldr	r1, [pc, #188]	; (8003210 <HAL_GPIO_Init+0x2bc>)
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	3302      	adds	r3, #2
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d006      	beq.n	800317a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800316c:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	492c      	ldr	r1, [pc, #176]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800317a:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	43db      	mvns	r3, r3
 8003182:	4928      	ldr	r1, [pc, #160]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 8003184:	4013      	ands	r3, r2
 8003186:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d006      	beq.n	80031a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	4922      	ldr	r1, [pc, #136]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
 80031a0:	e006      	b.n	80031b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	491e      	ldr	r1, [pc, #120]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d006      	beq.n	80031ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	4918      	ldr	r1, [pc, #96]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
 80031c8:	e006      	b.n	80031d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4914      	ldr	r1, [pc, #80]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d021      	beq.n	8003228 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	490e      	ldr	r1, [pc, #56]	; (8003224 <HAL_GPIO_Init+0x2d0>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]
 80031f0:	e021      	b.n	8003236 <HAL_GPIO_Init+0x2e2>
 80031f2:	bf00      	nop
 80031f4:	10320000 	.word	0x10320000
 80031f8:	10310000 	.word	0x10310000
 80031fc:	10220000 	.word	0x10220000
 8003200:	10210000 	.word	0x10210000
 8003204:	10120000 	.word	0x10120000
 8003208:	10110000 	.word	0x10110000
 800320c:	40021000 	.word	0x40021000
 8003210:	40010000 	.word	0x40010000
 8003214:	40010800 	.word	0x40010800
 8003218:	40010c00 	.word	0x40010c00
 800321c:	40011000 	.word	0x40011000
 8003220:	40011400 	.word	0x40011400
 8003224:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_GPIO_Init+0x304>)
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	43db      	mvns	r3, r3
 8003230:	4909      	ldr	r1, [pc, #36]	; (8003258 <HAL_GPIO_Init+0x304>)
 8003232:	4013      	ands	r3, r2
 8003234:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	3301      	adds	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	fa22 f303 	lsr.w	r3, r2, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	f47f ae8e 	bne.w	8002f68 <HAL_GPIO_Init+0x14>
  }
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	372c      	adds	r7, #44	; 0x2c
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	40010400 	.word	0x40010400

0800325c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
 8003268:	4613      	mov	r3, r2
 800326a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800326c:	787b      	ldrb	r3, [r7, #1]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003272:	887a      	ldrh	r2, [r7, #2]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003278:	e003      	b.n	8003282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	041a      	lsls	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	611a      	str	r2, [r3, #16]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4013      	ands	r3, r2
 80032a4:	041a      	lsls	r2, r3, #16
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	43d9      	mvns	r1, r3
 80032aa:	887b      	ldrh	r3, [r7, #2]
 80032ac:	400b      	ands	r3, r1
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	611a      	str	r2, [r3, #16]
}
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c0:	b08b      	sub	sp, #44	; 0x2c
 80032c2:	af06      	add	r7, sp, #24
 80032c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0fd      	b.n	80034cc <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d106      	bne.n	80032ea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fd fff7 	bl	80012d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2203      	movs	r2, #3
 80032ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f001 fd2a 	bl	8004d50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	687e      	ldr	r6, [r7, #4]
 8003304:	466d      	mov	r5, sp
 8003306:	f106 0410 	add.w	r4, r6, #16
 800330a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800330c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	602b      	str	r3, [r5, #0]
 8003312:	1d33      	adds	r3, r6, #4
 8003314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003316:	6838      	ldr	r0, [r7, #0]
 8003318:	f001 fd0a 	bl	8004d30 <USB_CoreInit>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0ce      	b.n	80034cc <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f001 fd25 	bl	8004d84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e04c      	b.n	80033da <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	3301      	adds	r3, #1
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	b298      	uxth	r0, r3
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	3336      	adds	r3, #54	; 0x36
 800337e:	4602      	mov	r2, r0
 8003380:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	440b      	add	r3, r1
 8003392:	3303      	adds	r3, #3
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	440b      	add	r3, r1
 80033a6:	3338      	adds	r3, #56	; 0x38
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	333c      	adds	r3, #60	; 0x3c
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	440b      	add	r3, r1
 80033ce:	3340      	adds	r3, #64	; 0x40
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	3301      	adds	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3ad      	bcc.n	8003340 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e044      	b.n	8003474 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	440b      	add	r3, r1
 80033f8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	440b      	add	r3, r1
 8003424:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	440b      	add	r3, r1
 800343a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	440b      	add	r3, r1
 8003450:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	440b      	add	r3, r1
 8003466:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	3301      	adds	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d3b5      	bcc.n	80033ea <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	687e      	ldr	r6, [r7, #4]
 8003486:	466d      	mov	r5, sp
 8003488:	f106 0410 	add.w	r4, r6, #16
 800348c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800348e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	602b      	str	r3, [r5, #0]
 8003494:	1d33      	adds	r3, r6, #4
 8003496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003498:	6838      	ldr	r0, [r7, #0]
 800349a:	f001 fc7f 	bl	8004d9c <USB_DevInit>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e00d      	b.n	80034cc <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 fc89 	bl	8004ddc <USB_DevDisconnect>

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e272      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8087 	beq.w	8003602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f4:	4b92      	ldr	r3, [pc, #584]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d00c      	beq.n	800351a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003500:	4b8f      	ldr	r3, [pc, #572]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b08      	cmp	r3, #8
 800350a:	d112      	bne.n	8003532 <HAL_RCC_OscConfig+0x5e>
 800350c:	4b8c      	ldr	r3, [pc, #560]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d10b      	bne.n	8003532 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351a:	4b89      	ldr	r3, [pc, #548]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d06c      	beq.n	8003600 <HAL_RCC_OscConfig+0x12c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d168      	bne.n	8003600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e24c      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353a:	d106      	bne.n	800354a <HAL_RCC_OscConfig+0x76>
 800353c:	4b80      	ldr	r3, [pc, #512]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a7f      	ldr	r2, [pc, #508]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	e02e      	b.n	80035a8 <HAL_RCC_OscConfig+0xd4>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0x98>
 8003552:	4b7b      	ldr	r3, [pc, #492]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7a      	ldr	r2, [pc, #488]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b78      	ldr	r3, [pc, #480]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a77      	ldr	r2, [pc, #476]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e01d      	b.n	80035a8 <HAL_RCC_OscConfig+0xd4>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0xbc>
 8003576:	4b72      	ldr	r3, [pc, #456]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a71      	ldr	r2, [pc, #452]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b6f      	ldr	r3, [pc, #444]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a6e      	ldr	r2, [pc, #440]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e00b      	b.n	80035a8 <HAL_RCC_OscConfig+0xd4>
 8003590:	4b6b      	ldr	r3, [pc, #428]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a6a      	ldr	r2, [pc, #424]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b68      	ldr	r3, [pc, #416]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a67      	ldr	r2, [pc, #412]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80035a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7ff fbbe 	bl	8002d30 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b8:	f7ff fbba 	bl	8002d30 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e200      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b5d      	ldr	r3, [pc, #372]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0xe4>
 80035d6:	e014      	b.n	8003602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7ff fbaa 	bl	8002d30 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e0:	f7ff fba6 	bl	8002d30 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e1ec      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	4b53      	ldr	r3, [pc, #332]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x10c>
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d063      	beq.n	80036d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800360e:	4b4c      	ldr	r3, [pc, #304]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800361a:	4b49      	ldr	r3, [pc, #292]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b08      	cmp	r3, #8
 8003624:	d11c      	bne.n	8003660 <HAL_RCC_OscConfig+0x18c>
 8003626:	4b46      	ldr	r3, [pc, #280]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d116      	bne.n	8003660 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	4b43      	ldr	r3, [pc, #268]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_RCC_OscConfig+0x176>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e1c0      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364a:	4b3d      	ldr	r3, [pc, #244]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4939      	ldr	r1, [pc, #228]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	e03a      	b.n	80036d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003668:	4b36      	ldr	r3, [pc, #216]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366e:	f7ff fb5f 	bl	8002d30 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003676:	f7ff fb5b 	bl	8002d30 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1a1      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4927      	ldr	r1, [pc, #156]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]
 80036a8:	e015      	b.n	80036d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036aa:	4b26      	ldr	r3, [pc, #152]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7ff fb3e 	bl	8002d30 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b8:	f7ff fb3a 	bl	8002d30 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e180      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d03a      	beq.n	8003758 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d019      	beq.n	800371e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f0:	f7ff fb1e 	bl	8002d30 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f8:	f7ff fb1a 	bl	8002d30 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e160      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003716:	2001      	movs	r0, #1
 8003718:	f000 fad8 	bl	8003ccc <RCC_Delay>
 800371c:	e01c      	b.n	8003758 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003724:	f7ff fb04 	bl	8002d30 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372a:	e00f      	b.n	800374c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7ff fb00 	bl	8002d30 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d908      	bls.n	800374c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e146      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	42420000 	.word	0x42420000
 8003748:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	4b92      	ldr	r3, [pc, #584]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e9      	bne.n	800372c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80a6 	beq.w	80038b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376a:	4b8b      	ldr	r3, [pc, #556]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003776:	4b88      	ldr	r3, [pc, #544]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	4a87      	ldr	r2, [pc, #540]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003780:	61d3      	str	r3, [r2, #28]
 8003782:	4b85      	ldr	r3, [pc, #532]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003792:	4b82      	ldr	r3, [pc, #520]	; (800399c <HAL_RCC_OscConfig+0x4c8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d118      	bne.n	80037d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379e:	4b7f      	ldr	r3, [pc, #508]	; (800399c <HAL_RCC_OscConfig+0x4c8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7e      	ldr	r2, [pc, #504]	; (800399c <HAL_RCC_OscConfig+0x4c8>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037aa:	f7ff fac1 	bl	8002d30 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b2:	f7ff fabd 	bl	8002d30 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b64      	cmp	r3, #100	; 0x64
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e103      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	4b75      	ldr	r3, [pc, #468]	; (800399c <HAL_RCC_OscConfig+0x4c8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x312>
 80037d8:	4b6f      	ldr	r3, [pc, #444]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	4a6e      	ldr	r2, [pc, #440]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6213      	str	r3, [r2, #32]
 80037e4:	e02d      	b.n	8003842 <HAL_RCC_OscConfig+0x36e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0x334>
 80037ee:	4b6a      	ldr	r3, [pc, #424]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	4a69      	ldr	r2, [pc, #420]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	6213      	str	r3, [r2, #32]
 80037fa:	4b67      	ldr	r3, [pc, #412]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4a66      	ldr	r2, [pc, #408]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	6213      	str	r3, [r2, #32]
 8003806:	e01c      	b.n	8003842 <HAL_RCC_OscConfig+0x36e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2b05      	cmp	r3, #5
 800380e:	d10c      	bne.n	800382a <HAL_RCC_OscConfig+0x356>
 8003810:	4b61      	ldr	r3, [pc, #388]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	4a60      	ldr	r2, [pc, #384]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	f043 0304 	orr.w	r3, r3, #4
 800381a:	6213      	str	r3, [r2, #32]
 800381c:	4b5e      	ldr	r3, [pc, #376]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4a5d      	ldr	r2, [pc, #372]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6213      	str	r3, [r2, #32]
 8003828:	e00b      	b.n	8003842 <HAL_RCC_OscConfig+0x36e>
 800382a:	4b5b      	ldr	r3, [pc, #364]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4a5a      	ldr	r2, [pc, #360]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	6213      	str	r3, [r2, #32]
 8003836:	4b58      	ldr	r3, [pc, #352]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4a57      	ldr	r2, [pc, #348]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d015      	beq.n	8003876 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384a:	f7ff fa71 	bl	8002d30 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7ff fa6d 	bl	8002d30 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e0b1      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003868:	4b4b      	ldr	r3, [pc, #300]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ee      	beq.n	8003852 <HAL_RCC_OscConfig+0x37e>
 8003874:	e014      	b.n	80038a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003876:	f7ff fa5b 	bl	8002d30 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7ff fa57 	bl	8002d30 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	; 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e09b      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003894:	4b40      	ldr	r3, [pc, #256]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ee      	bne.n	800387e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a6:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8087 	beq.w	80039ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038bc:	4b36      	ldr	r3, [pc, #216]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d061      	beq.n	800398c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d146      	bne.n	800395e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d0:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <HAL_RCC_OscConfig+0x4cc>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7ff fa2b 	bl	8002d30 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038de:	f7ff fa27 	bl	8002d30 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e06d      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f0:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f0      	bne.n	80038de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d108      	bne.n	8003918 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003906:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	4921      	ldr	r1, [pc, #132]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003918:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a19      	ldr	r1, [r3, #32]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	430b      	orrs	r3, r1
 800392a:	491b      	ldr	r1, [pc, #108]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x4cc>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003936:	f7ff f9fb 	bl	8002d30 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393e:	f7ff f9f7 	bl	8002d30 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e03d      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x46a>
 800395c:	e035      	b.n	80039ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <HAL_RCC_OscConfig+0x4cc>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7ff f9e4 	bl	8002d30 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7ff f9e0 	bl	8002d30 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e026      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x498>
 800398a:	e01e      	b.n	80039ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e019      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
 8003998:	40021000 	.word	0x40021000
 800399c:	40007000 	.word	0x40007000
 80039a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_OscConfig+0x500>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000

080039d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0d0      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039ec:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d910      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b67      	ldr	r3, [pc, #412]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 0207 	bic.w	r2, r3, #7
 8003a02:	4965      	ldr	r1, [pc, #404]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b63      	ldr	r3, [pc, #396]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b8      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b59      	ldr	r3, [pc, #356]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4c:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a52      	ldr	r2, [pc, #328]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	494d      	ldr	r1, [pc, #308]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d040      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d115      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e073      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06b      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4936      	ldr	r1, [pc, #216]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac8:	f7ff f932 	bl	8002d30 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad0:	f7ff f92e 	bl	8002d30 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e053      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 020c 	and.w	r2, r3, #12
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1eb      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af8:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d210      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 0207 	bic.w	r2, r3, #7
 8003b0e:	4922      	ldr	r1, [pc, #136]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e032      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4916      	ldr	r1, [pc, #88]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	490e      	ldr	r1, [pc, #56]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 f821 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	490a      	ldr	r1, [pc, #40]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	5ccb      	ldrb	r3, [r1, r3]
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	4a09      	ldr	r2, [pc, #36]	; (8003ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff f890 	bl	8002cac <HAL_InitTick>

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40022000 	.word	0x40022000
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	0800c76c 	.word	0x0800c76c
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	20000020 	.word	0x20000020

08003bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	b490      	push	{r4, r7}
 8003bae:	b08a      	sub	sp, #40	; 0x28
 8003bb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bb2:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <HAL_RCC_GetSysClockFreq+0xac>)
 8003bb4:	1d3c      	adds	r4, r7, #4
 8003bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bbc:	f240 2301 	movw	r3, #513	; 0x201
 8003bc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bd6:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d002      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x40>
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x46>
 8003bea:	e02b      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bec:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bee:	623b      	str	r3, [r7, #32]
      break;
 8003bf0:	e02b      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	0c9b      	lsrs	r3, r3, #18
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	3328      	adds	r3, #40	; 0x28
 8003bfc:	443b      	add	r3, r7
 8003bfe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c02:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d012      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	0c5b      	lsrs	r3, r3, #17
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	3328      	adds	r3, #40	; 0x28
 8003c1a:	443b      	add	r3, r7
 8003c1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	4a0e      	ldr	r2, [pc, #56]	; (8003c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c26:	fb03 f202 	mul.w	r2, r3, r2
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
 8003c32:	e004      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	4a0b      	ldr	r2, [pc, #44]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c38:	fb02 f303 	mul.w	r3, r2, r3
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	623b      	str	r3, [r7, #32]
      break;
 8003c42:	e002      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c46:	623b      	str	r3, [r7, #32]
      break;
 8003c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3728      	adds	r7, #40	; 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc90      	pop	{r4, r7}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	0800c6d8 	.word	0x0800c6d8
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	007a1200 	.word	0x007a1200
 8003c64:	003d0900 	.word	0x003d0900

08003c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c6c:	4b02      	ldr	r3, [pc, #8]	; (8003c78 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	20000000 	.word	0x20000000

08003c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c80:	f7ff fff2 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	; (8003ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	0800c77c 	.word	0x0800c77c

08003ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ca8:	f7ff ffde 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	0adb      	lsrs	r3, r3, #11
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4903      	ldr	r1, [pc, #12]	; (8003cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	0800c77c 	.word	0x0800c77c

08003ccc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <RCC_Delay+0x34>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <RCC_Delay+0x38>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	0a5b      	lsrs	r3, r3, #9
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ce8:	bf00      	nop
  }
  while (Delay --);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1e5a      	subs	r2, r3, #1
 8003cee:	60fa      	str	r2, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f9      	bne.n	8003ce8 <RCC_Delay+0x1c>
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr
 8003d00:	20000000 	.word	0x20000000
 8003d04:	10624dd3 	.word	0x10624dd3

08003d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d07d      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d24:	2300      	movs	r3, #0
 8003d26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d28:	4b4f      	ldr	r3, [pc, #316]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10d      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d34:	4b4c      	ldr	r3, [pc, #304]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4a4b      	ldr	r2, [pc, #300]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	61d3      	str	r3, [r2, #28]
 8003d40:	4b49      	ldr	r3, [pc, #292]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d50:	4b46      	ldr	r3, [pc, #280]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d118      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5c:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a42      	ldr	r2, [pc, #264]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d68:	f7fe ffe2 	bl	8002d30 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6e:	e008      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d70:	f7fe ffde 	bl	8002d30 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e06d      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d82:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d8e:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d02e      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d027      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dac:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003db6:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dbc:	4b2c      	ldr	r3, [pc, #176]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dc2:	4a29      	ldr	r2, [pc, #164]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d014      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd2:	f7fe ffad 	bl	8002d30 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dda:	f7fe ffa9 	bl	8002d30 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e036      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df0:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ee      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4917      	ldr	r1, [pc, #92]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e14:	4b14      	ldr	r3, [pc, #80]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e2c:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	490b      	ldr	r1, [pc, #44]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	4904      	ldr	r1, [pc, #16]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	40007000 	.word	0x40007000
 8003e70:	42420440 	.word	0x42420440

08003e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e076      	b.n	8003f74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d108      	bne.n	8003ea0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e96:	d009      	beq.n	8003eac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61da      	str	r2, [r3, #28]
 8003e9e:	e005      	b.n	8003eac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd f92e 	bl	8001128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f30:	ea42 0103 	orr.w	r1, r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	0c1a      	lsrs	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f002 0204 	and.w	r2, r2, #4
 8003f52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_SPI_Transmit+0x22>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e126      	b.n	80041ec <HAL_SPI_Transmit+0x270>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa6:	f7fe fec3 	bl	8002d30 <HAL_GetTick>
 8003faa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d002      	beq.n	8003fc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fc0:	e10b      	b.n	80041da <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_SPI_Transmit+0x52>
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d102      	bne.n	8003fd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fd2:	e102      	b.n	80041da <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401a:	d10f      	bne.n	800403c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800403a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d007      	beq.n	800405a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004058:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004062:	d14b      	bne.n	80040fc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_SPI_Transmit+0xf6>
 800406c:	8afb      	ldrh	r3, [r7, #22]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d13e      	bne.n	80040f0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004096:	e02b      	b.n	80040f0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d112      	bne.n	80040cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	881a      	ldrh	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	1c9a      	adds	r2, r3, #2
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80040ca:	e011      	b.n	80040f0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040cc:	f7fe fe30 	bl	8002d30 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d803      	bhi.n	80040e4 <HAL_SPI_Transmit+0x168>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e2:	d102      	bne.n	80040ea <HAL_SPI_Transmit+0x16e>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040ee:	e074      	b.n	80041da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1ce      	bne.n	8004098 <HAL_SPI_Transmit+0x11c>
 80040fa:	e04c      	b.n	8004196 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_SPI_Transmit+0x18e>
 8004104:	8afb      	ldrh	r3, [r7, #22]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d140      	bne.n	800418c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	7812      	ldrb	r2, [r2, #0]
 8004116:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004130:	e02c      	b.n	800418c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b02      	cmp	r3, #2
 800413e:	d113      	bne.n	8004168 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	7812      	ldrb	r2, [r2, #0]
 800414c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	86da      	strh	r2, [r3, #54]	; 0x36
 8004166:	e011      	b.n	800418c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004168:	f7fe fde2 	bl	8002d30 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d803      	bhi.n	8004180 <HAL_SPI_Transmit+0x204>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d102      	bne.n	8004186 <HAL_SPI_Transmit+0x20a>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	77fb      	strb	r3, [r7, #31]
          goto error;
 800418a:	e026      	b.n	80041da <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1cd      	bne.n	8004132 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	6839      	ldr	r1, [r7, #0]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f8b2 	bl	8004304 <SPI_EndRxTxTransaction>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041b4:	2300      	movs	r3, #0
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e000      	b.n	80041da <HAL_SPI_Transmit+0x25e>
  }

error:
 80041d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004204:	f7fe fd94 	bl	8002d30 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	4413      	add	r3, r2
 8004212:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004214:	f7fe fd8c 	bl	8002d30 <HAL_GetTick>
 8004218:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800421a:	4b39      	ldr	r3, [pc, #228]	; (8004300 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	015b      	lsls	r3, r3, #5
 8004220:	0d1b      	lsrs	r3, r3, #20
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800422a:	e054      	b.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d050      	beq.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004234:	f7fe fd7c 	bl	8002d30 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	429a      	cmp	r2, r3
 8004242:	d902      	bls.n	800424a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d13d      	bne.n	80042c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004258:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004262:	d111      	bne.n	8004288 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	d004      	beq.n	8004278 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004276:	d107      	bne.n	8004288 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004286:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004290:	d10f      	bne.n	80042b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e017      	b.n	80042f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	bf0c      	ite	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	2300      	movne	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d19b      	bne.n	800422c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000000 	.word	0x20000000

08004304 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2200      	movs	r2, #0
 8004318:	2180      	movs	r1, #128	; 0x80
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff ff6a 	bl	80041f4 <SPI_WaitFlagStateUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e000      	b.n	8004338 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e041      	b.n	80043d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fc ff1c 	bl	80011a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f000 f98e 	bl	80046a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <HAL_TIM_PWM_Start+0x24>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e022      	b.n	800444a <HAL_TIM_PWM_Start+0x6a>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b04      	cmp	r3, #4
 8004408:	d109      	bne.n	800441e <HAL_TIM_PWM_Start+0x3e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	bf14      	ite	ne
 8004416:	2301      	movne	r3, #1
 8004418:	2300      	moveq	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	e015      	b.n	800444a <HAL_TIM_PWM_Start+0x6a>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d109      	bne.n	8004438 <HAL_TIM_PWM_Start+0x58>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e008      	b.n	800444a <HAL_TIM_PWM_Start+0x6a>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e05e      	b.n	8004510 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0x82>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004460:	e013      	b.n	800448a <HAL_TIM_PWM_Start+0xaa>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b04      	cmp	r3, #4
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0x92>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004470:	e00b      	b.n	800448a <HAL_TIM_PWM_Start+0xaa>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d104      	bne.n	8004482 <HAL_TIM_PWM_Start+0xa2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	e003      	b.n	800448a <HAL_TIM_PWM_Start+0xaa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2201      	movs	r2, #1
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 faee 	bl	8004a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <HAL_TIM_PWM_Start+0x138>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d107      	bne.n	80044b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a18      	ldr	r2, [pc, #96]	; (8004518 <HAL_TIM_PWM_Start+0x138>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00e      	beq.n	80044da <HAL_TIM_PWM_Start+0xfa>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d009      	beq.n	80044da <HAL_TIM_PWM_Start+0xfa>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a14      	ldr	r2, [pc, #80]	; (800451c <HAL_TIM_PWM_Start+0x13c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_TIM_PWM_Start+0xfa>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a12      	ldr	r2, [pc, #72]	; (8004520 <HAL_TIM_PWM_Start+0x140>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d111      	bne.n	80044fe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d010      	beq.n	800450e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fc:	e007      	b.n	800450e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800

08004524 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800453a:	2302      	movs	r3, #2
 800453c:	e0ac      	b.n	8004698 <HAL_TIM_PWM_ConfigChannel+0x174>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	f200 809f 	bhi.w	800468c <HAL_TIM_PWM_ConfigChannel+0x168>
 800454e:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	08004589 	.word	0x08004589
 8004558:	0800468d 	.word	0x0800468d
 800455c:	0800468d 	.word	0x0800468d
 8004560:	0800468d 	.word	0x0800468d
 8004564:	080045c9 	.word	0x080045c9
 8004568:	0800468d 	.word	0x0800468d
 800456c:	0800468d 	.word	0x0800468d
 8004570:	0800468d 	.word	0x0800468d
 8004574:	0800460b 	.word	0x0800460b
 8004578:	0800468d 	.word	0x0800468d
 800457c:	0800468d 	.word	0x0800468d
 8004580:	0800468d 	.word	0x0800468d
 8004584:	0800464b 	.word	0x0800464b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f8e8 	bl	8004764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0208 	orr.w	r2, r2, #8
 80045a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0204 	bic.w	r2, r2, #4
 80045b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6999      	ldr	r1, [r3, #24]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	619a      	str	r2, [r3, #24]
      break;
 80045c6:	e062      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f92e 	bl	8004830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6999      	ldr	r1, [r3, #24]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	021a      	lsls	r2, r3, #8
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	619a      	str	r2, [r3, #24]
      break;
 8004608:	e041      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	4618      	mov	r0, r3
 8004612:	f000 f977 	bl	8004904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0208 	orr.w	r2, r2, #8
 8004624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0204 	bic.w	r2, r2, #4
 8004634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69d9      	ldr	r1, [r3, #28]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	61da      	str	r2, [r3, #28]
      break;
 8004648:	e021      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f9c1 	bl	80049d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69d9      	ldr	r1, [r3, #28]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	021a      	lsls	r2, r3, #8
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	61da      	str	r2, [r3, #28]
      break;
 800468a:	e000      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800468c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a29      	ldr	r2, [pc, #164]	; (8004758 <TIM_Base_SetConfig+0xb8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00b      	beq.n	80046d0 <TIM_Base_SetConfig+0x30>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046be:	d007      	beq.n	80046d0 <TIM_Base_SetConfig+0x30>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a26      	ldr	r2, [pc, #152]	; (800475c <TIM_Base_SetConfig+0xbc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d003      	beq.n	80046d0 <TIM_Base_SetConfig+0x30>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a25      	ldr	r2, [pc, #148]	; (8004760 <TIM_Base_SetConfig+0xc0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d108      	bne.n	80046e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <TIM_Base_SetConfig+0xb8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00b      	beq.n	8004702 <TIM_Base_SetConfig+0x62>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f0:	d007      	beq.n	8004702 <TIM_Base_SetConfig+0x62>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a19      	ldr	r2, [pc, #100]	; (800475c <TIM_Base_SetConfig+0xbc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_Base_SetConfig+0x62>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a18      	ldr	r2, [pc, #96]	; (8004760 <TIM_Base_SetConfig+0xc0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d108      	bne.n	8004714 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a07      	ldr	r2, [pc, #28]	; (8004758 <TIM_Base_SetConfig+0xb8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d103      	bne.n	8004748 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	615a      	str	r2, [r3, #20]
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40000400 	.word	0x40000400
 8004760:	40000800 	.word	0x40000800

08004764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0201 	bic.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0303 	bic.w	r3, r3, #3
 800479a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f023 0302 	bic.w	r3, r3, #2
 80047ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a1c      	ldr	r2, [pc, #112]	; (800482c <TIM_OC1_SetConfig+0xc8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d10c      	bne.n	80047da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f023 0308 	bic.w	r3, r3, #8
 80047c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f023 0304 	bic.w	r3, r3, #4
 80047d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a13      	ldr	r2, [pc, #76]	; (800482c <TIM_OC1_SetConfig+0xc8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d111      	bne.n	8004806 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	621a      	str	r2, [r3, #32]
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40012c00 	.word	0x40012c00

08004830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 0210 	bic.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 0320 	bic.w	r3, r3, #32
 800487a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a1d      	ldr	r2, [pc, #116]	; (8004900 <TIM_OC2_SetConfig+0xd0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d10d      	bne.n	80048ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a14      	ldr	r2, [pc, #80]	; (8004900 <TIM_OC2_SetConfig+0xd0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d113      	bne.n	80048dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	40012c00 	.word	0x40012c00

08004904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800494c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1d      	ldr	r2, [pc, #116]	; (80049d4 <TIM_OC3_SetConfig+0xd0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10d      	bne.n	800497e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800497c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <TIM_OC3_SetConfig+0xd0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d113      	bne.n	80049ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800498c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	621a      	str	r2, [r3, #32]
}
 80049c8:	bf00      	nop
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40012c00 	.word	0x40012c00

080049d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	031b      	lsls	r3, r3, #12
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a0f      	ldr	r2, [pc, #60]	; (8004a70 <TIM_OC4_SetConfig+0x98>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d109      	bne.n	8004a4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	019b      	lsls	r3, r3, #6
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	621a      	str	r2, [r3, #32]
}
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr
 8004a70:	40012c00 	.word	0x40012c00

08004a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	2201      	movs	r2, #1
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a1a      	ldr	r2, [r3, #32]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	43db      	mvns	r3, r3
 8004a96:	401a      	ands	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1a      	ldr	r2, [r3, #32]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e046      	b.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00e      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b20:	d009      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a12      	ldr	r2, [pc, #72]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d10c      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr
 8004b6c:	40012c00 	.word	0x40012c00
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800

08004b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e03f      	b.n	8004c0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fc fb50 	bl	8001244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2224      	movs	r2, #36	; 0x24
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f829 	bl	8004c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c4e:	f023 030c 	bic.w	r3, r3, #12
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699a      	ldr	r2, [r3, #24]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2c      	ldr	r2, [pc, #176]	; (8004d28 <UART_SetConfig+0x114>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d103      	bne.n	8004c84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c7c:	f7ff f812 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	e002      	b.n	8004c8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c84:	f7fe fffa 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8004c88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	009a      	lsls	r2, r3, #2
 8004c94:	441a      	add	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <UART_SetConfig+0x118>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	0119      	lsls	r1, r3, #4
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009a      	lsls	r2, r3, #2
 8004cb4:	441a      	add	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc0:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <UART_SetConfig+0x118>)
 8004cc2:	fba3 0302 	umull	r0, r3, r3, r2
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	2064      	movs	r0, #100	; 0x64
 8004cca:	fb00 f303 	mul.w	r3, r0, r3
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	3332      	adds	r3, #50	; 0x32
 8004cd4:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <UART_SetConfig+0x118>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce0:	4419      	add	r1, r3
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009a      	lsls	r2, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cf8:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <UART_SetConfig+0x118>)
 8004cfa:	fba3 0302 	umull	r0, r3, r3, r2
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	2064      	movs	r0, #100	; 0x64
 8004d02:	fb00 f303 	mul.w	r3, r0, r3
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	3332      	adds	r3, #50	; 0x32
 8004d0c:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <UART_SetConfig+0x118>)
 8004d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	f003 020f 	and.w	r2, r3, #15
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40013800 	.word	0x40013800
 8004d2c:	51eb851f 	.word	0x51eb851f

08004d30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d30:	b084      	sub	sp, #16
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	f107 0014 	add.w	r0, r7, #20
 8004d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	b004      	add	sp, #16
 8004d4e:	4770      	bx	lr

08004d50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d58:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	4013      	ands	r3, r2
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	f107 0014 	add.w	r0, r7, #20
 8004daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	b004      	add	sp, #16
 8004dda:	4770      	bx	lr

08004ddc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df6:	f3ef 8305 	mrs	r3, IPSR
 8004dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e02:	f3ef 8310 	mrs	r3, PRIMASK
 8004e06:	607b      	str	r3, [r7, #4]
  return(result);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <osKernelInitialize+0x32>
 8004e0e:	4b10      	ldr	r3, [pc, #64]	; (8004e50 <osKernelInitialize+0x60>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d109      	bne.n	8004e2a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e16:	f3ef 8311 	mrs	r3, BASEPRI
 8004e1a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004e22:	f06f 0305 	mvn.w	r3, #5
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e00c      	b.n	8004e44 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <osKernelInitialize+0x60>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d105      	bne.n	8004e3e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004e32:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <osKernelInitialize+0x60>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e002      	b.n	8004e44 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e44:	68fb      	ldr	r3, [r7, #12]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	20000628 	.word	0x20000628

08004e54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e5a:	f3ef 8305 	mrs	r3, IPSR
 8004e5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10f      	bne.n	8004e86 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e66:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6a:	607b      	str	r3, [r7, #4]
  return(result);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d109      	bne.n	8004e86 <osKernelStart+0x32>
 8004e72:	4b11      	ldr	r3, [pc, #68]	; (8004eb8 <osKernelStart+0x64>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d109      	bne.n	8004e8e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e7e:	603b      	str	r3, [r7, #0]
  return(result);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004e86:	f06f 0305 	mvn.w	r3, #5
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e00e      	b.n	8004eac <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <osKernelStart+0x64>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d107      	bne.n	8004ea6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004e96:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <osKernelStart+0x64>)
 8004e98:	2202      	movs	r2, #2
 8004e9a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004e9c:	f001 f88e 	bl	8005fbc <vTaskStartScheduler>
      stat = osOK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e002      	b.n	8004eac <osKernelStart+0x58>
    } else {
      stat = osError;
 8004ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eaa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004eac:	68fb      	ldr	r3, [r7, #12]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000628 	.word	0x20000628

08004ebc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b092      	sub	sp, #72	; 0x48
 8004ec0:	af04      	add	r7, sp, #16
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ecc:	f3ef 8305 	mrs	r3, IPSR
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f040 8094 	bne.w	8005002 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eda:	f3ef 8310 	mrs	r3, PRIMASK
 8004ede:	623b      	str	r3, [r7, #32]
  return(result);
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 808d 	bne.w	8005002 <osThreadNew+0x146>
 8004ee8:	4b48      	ldr	r3, [pc, #288]	; (800500c <osThreadNew+0x150>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d106      	bne.n	8004efe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ef0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f040 8082 	bne.w	8005002 <osThreadNew+0x146>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d07e      	beq.n	8005002 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004f04:	2340      	movs	r3, #64	; 0x40
 8004f06:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004f08:	2318      	movs	r3, #24
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004f10:	f107 031b 	add.w	r3, r7, #27
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004f16:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d045      	beq.n	8004fae <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <osThreadNew+0x74>
        name = attr->name;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <osThreadNew+0x9a>
 8004f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f46:	2b38      	cmp	r3, #56	; 0x38
 8004f48:	d805      	bhi.n	8004f56 <osThreadNew+0x9a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <osThreadNew+0x9e>
        return (NULL);
 8004f56:	2300      	movs	r3, #0
 8004f58:	e054      	b.n	8005004 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	089b      	lsrs	r3, r3, #2
 8004f68:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00e      	beq.n	8004f90 <osThreadNew+0xd4>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	2bbb      	cmp	r3, #187	; 0xbb
 8004f78:	d90a      	bls.n	8004f90 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d006      	beq.n	8004f90 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <osThreadNew+0xd4>
        mem = 1;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f8e:	e010      	b.n	8004fb2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10c      	bne.n	8004fb2 <osThreadNew+0xf6>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d108      	bne.n	8004fb2 <osThreadNew+0xf6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d104      	bne.n	8004fb2 <osThreadNew+0xf6>
          mem = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fac:	e001      	b.n	8004fb2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d110      	bne.n	8004fda <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fc0:	9202      	str	r2, [sp, #8]
 8004fc2:	9301      	str	r3, [sp, #4]
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fe10 	bl	8005bf4 <xTaskCreateStatic>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e013      	b.n	8005002 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d110      	bne.n	8005002 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	f107 0314 	add.w	r3, r7, #20
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fe5a 	bl	8005cac <xTaskCreate>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d001      	beq.n	8005002 <osThreadNew+0x146>
          hTask = NULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005002:	697b      	ldr	r3, [r7, #20]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3738      	adds	r7, #56	; 0x38
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000628 	.word	0x20000628

08005010 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005018:	f3ef 8305 	mrs	r3, IPSR
 800501c:	613b      	str	r3, [r7, #16]
  return(result);
 800501e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10f      	bne.n	8005044 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005024:	f3ef 8310 	mrs	r3, PRIMASK
 8005028:	60fb      	str	r3, [r7, #12]
  return(result);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <osDelay+0x34>
 8005030:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <osDelay+0x58>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d109      	bne.n	800504c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005038:	f3ef 8311 	mrs	r3, BASEPRI
 800503c:	60bb      	str	r3, [r7, #8]
  return(result);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <osDelay+0x3c>
    stat = osErrorISR;
 8005044:	f06f 0305 	mvn.w	r3, #5
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e007      	b.n	800505c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 ff7c 	bl	8005f54 <vTaskDelay>
    }
  }

  return (stat);
 800505c:	697b      	ldr	r3, [r7, #20]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000628 	.word	0x20000628

0800506c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a06      	ldr	r2, [pc, #24]	; (8005094 <vApplicationGetIdleTaskMemory+0x28>)
 800507c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4a05      	ldr	r2, [pc, #20]	; (8005098 <vApplicationGetIdleTaskMemory+0x2c>)
 8005082:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2240      	movs	r2, #64	; 0x40
 8005088:	601a      	str	r2, [r3, #0]
}
 800508a:	bf00      	nop
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr
 8005094:	2000062c 	.word	0x2000062c
 8005098:	200006e8 	.word	0x200006e8

0800509c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4a06      	ldr	r2, [pc, #24]	; (80050c4 <vApplicationGetTimerTaskMemory+0x28>)
 80050ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4a05      	ldr	r2, [pc, #20]	; (80050c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80050b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2280      	movs	r2, #128	; 0x80
 80050b8:	601a      	str	r2, [r3, #0]
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	bc80      	pop	{r7}
 80050c2:	4770      	bx	lr
 80050c4:	200007e8 	.word	0x200007e8
 80050c8:	200008a4 	.word	0x200008a4

080050cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f103 0208 	add.w	r2, r3, #8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f04f 32ff 	mov.w	r2, #4294967295
 80050e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f103 0208 	add.w	r2, r3, #8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f103 0208 	add.w	r2, r3, #8
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005122:	b480      	push	{r7}
 8005124:	b085      	sub	sp, #20
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	601a      	str	r2, [r3, #0]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d103      	bne.n	8005188 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e00c      	b.n	80051a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3308      	adds	r3, #8
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	e002      	b.n	8005196 <vListInsert+0x2e>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d2f6      	bcs.n	8005190 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]
}
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6892      	ldr	r2, [r2, #8]
 80051ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6852      	ldr	r2, [r2, #4]
 80051f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d103      	bne.n	800520c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	1e5a      	subs	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr
	...

0800522c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005256:	f001 fff9 	bl	800724c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005266:	fb01 f303 	mul.w	r3, r1, r3
 800526a:	441a      	add	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005286:	3b01      	subs	r3, #1
 8005288:	68f9      	ldr	r1, [r7, #12]
 800528a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800528c:	fb01 f303 	mul.w	r3, r1, r3
 8005290:	441a      	add	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	22ff      	movs	r2, #255	; 0xff
 800529a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	22ff      	movs	r2, #255	; 0xff
 80052a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d114      	bne.n	80052d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01a      	beq.n	80052ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3310      	adds	r3, #16
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 f91b 	bl	80064f4 <xTaskRemoveFromEventList>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d012      	beq.n	80052ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <xQueueGenericReset+0xcc>)
 80052c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	e009      	b.n	80052ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3310      	adds	r3, #16
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff fef6 	bl	80050cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3324      	adds	r3, #36	; 0x24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fef1 	bl	80050cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052ea:	f001 ffdf 	bl	80072ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052ee:	2301      	movs	r3, #1
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08e      	sub	sp, #56	; 0x38
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005322:	bf00      	nop
 8005324:	e7fe      	b.n	8005324 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <xQueueGenericCreateStatic+0x52>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <xQueueGenericCreateStatic+0x56>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <xQueueGenericCreateStatic+0x58>
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	623b      	str	r3, [r7, #32]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d102      	bne.n	800537a <xQueueGenericCreateStatic+0x7e>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <xQueueGenericCreateStatic+0x82>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <xQueueGenericCreateStatic+0x84>
 800537e:	2300      	movs	r3, #0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	61fb      	str	r3, [r7, #28]
}
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800539a:	2350      	movs	r3, #80	; 0x50
 800539c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b50      	cmp	r3, #80	; 0x50
 80053a2:	d00a      	beq.n	80053ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	61bb      	str	r3, [r7, #24]
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f805 	bl	80053ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3730      	adds	r7, #48	; 0x30
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e002      	b.n	800540c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005418:	2101      	movs	r1, #1
 800541a:	69b8      	ldr	r0, [r7, #24]
 800541c:	f7ff ff06 	bl	800522c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005428:	bf00      	nop
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08e      	sub	sp, #56	; 0x38
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800543e:	2300      	movs	r3, #0
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <xQueueGenericSend+0x32>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d103      	bne.n	8005470 <xQueueGenericSend+0x40>
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <xQueueGenericSend+0x44>
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <xQueueGenericSend+0x46>
 8005474:	2300      	movs	r3, #0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <xQueueGenericSend+0x60>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d103      	bne.n	800549e <xQueueGenericSend+0x6e>
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <xQueueGenericSend+0x72>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <xQueueGenericSend+0x74>
 80054a2:	2300      	movs	r3, #0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <xQueueGenericSend+0x8e>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	623b      	str	r3, [r7, #32]
}
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054be:	f001 f9df 	bl	8006880 <xTaskGetSchedulerState>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d102      	bne.n	80054ce <xQueueGenericSend+0x9e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <xQueueGenericSend+0xa2>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <xQueueGenericSend+0xa4>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <xQueueGenericSend+0xbe>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	61fb      	str	r3, [r7, #28]
}
 80054ea:	bf00      	nop
 80054ec:	e7fe      	b.n	80054ec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054ee:	f001 fead 	bl	800724c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d302      	bcc.n	8005504 <xQueueGenericSend+0xd4>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d129      	bne.n	8005558 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800550a:	f000 fa07 	bl	800591c <prvCopyDataToQueue>
 800550e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d010      	beq.n	800553a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	3324      	adds	r3, #36	; 0x24
 800551c:	4618      	mov	r0, r3
 800551e:	f000 ffe9 	bl	80064f4 <xTaskRemoveFromEventList>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d013      	beq.n	8005550 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005528:	4b3f      	ldr	r3, [pc, #252]	; (8005628 <xQueueGenericSend+0x1f8>)
 800552a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	e00a      	b.n	8005550 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005540:	4b39      	ldr	r3, [pc, #228]	; (8005628 <xQueueGenericSend+0x1f8>)
 8005542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005550:	f001 feac 	bl	80072ac <vPortExitCritical>
				return pdPASS;
 8005554:	2301      	movs	r3, #1
 8005556:	e063      	b.n	8005620 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d103      	bne.n	8005566 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800555e:	f001 fea5 	bl	80072ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005562:	2300      	movs	r3, #0
 8005564:	e05c      	b.n	8005620 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	2b00      	cmp	r3, #0
 800556a:	d106      	bne.n	800557a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800556c:	f107 0314 	add.w	r3, r7, #20
 8005570:	4618      	mov	r0, r3
 8005572:	f001 f823 	bl	80065bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005576:	2301      	movs	r3, #1
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800557a:	f001 fe97 	bl	80072ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800557e:	f000 fd8d 	bl	800609c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005582:	f001 fe63 	bl	800724c <vPortEnterCritical>
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800558c:	b25b      	sxtb	r3, r3
 800558e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005592:	d103      	bne.n	800559c <xQueueGenericSend+0x16c>
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a2:	b25b      	sxtb	r3, r3
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d103      	bne.n	80055b2 <xQueueGenericSend+0x182>
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055b2:	f001 fe7b 	bl	80072ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055b6:	1d3a      	adds	r2, r7, #4
 80055b8:	f107 0314 	add.w	r3, r7, #20
 80055bc:	4611      	mov	r1, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 f812 	bl	80065e8 <xTaskCheckForTimeOut>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d124      	bne.n	8005614 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055cc:	f000 fa9e 	bl	8005b0c <prvIsQueueFull>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d018      	beq.n	8005608 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	3310      	adds	r3, #16
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	4611      	mov	r1, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 ff38 	bl	8006454 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055e6:	f000 fa29 	bl	8005a3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055ea:	f000 fd65 	bl	80060b8 <xTaskResumeAll>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f47f af7c 	bne.w	80054ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <xQueueGenericSend+0x1f8>)
 80055f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	e772      	b.n	80054ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800560a:	f000 fa17 	bl	8005a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800560e:	f000 fd53 	bl	80060b8 <xTaskResumeAll>
 8005612:	e76c      	b.n	80054ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005616:	f000 fa11 	bl	8005a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800561a:	f000 fd4d 	bl	80060b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800561e:	2300      	movs	r3, #0
		}
	}
}
 8005620:	4618      	mov	r0, r3
 8005622:	3738      	adds	r7, #56	; 0x38
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08e      	sub	sp, #56	; 0x38
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d103      	bne.n	8005668 <xQueueGenericSendFromISR+0x3c>
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <xQueueGenericSendFromISR+0x40>
 8005668:	2301      	movs	r3, #1
 800566a:	e000      	b.n	800566e <xQueueGenericSendFromISR+0x42>
 800566c:	2300      	movs	r3, #0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	623b      	str	r3, [r7, #32]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d103      	bne.n	8005696 <xQueueGenericSendFromISR+0x6a>
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <xQueueGenericSendFromISR+0x6e>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <xQueueGenericSendFromISR+0x70>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	61fb      	str	r3, [r7, #28]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056b6:	f001 fe8b 	bl	80073d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056ba:	f3ef 8211 	mrs	r2, BASEPRI
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	61ba      	str	r2, [r7, #24]
 80056d0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	429a      	cmp	r2, r3
 80056e0:	d302      	bcc.n	80056e8 <xQueueGenericSendFromISR+0xbc>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d12c      	bne.n	8005742 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056f8:	f000 f910 	bl	800591c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d112      	bne.n	800572c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d016      	beq.n	800573c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	3324      	adds	r3, #36	; 0x24
 8005712:	4618      	mov	r0, r3
 8005714:	f000 feee 	bl	80064f4 <xTaskRemoveFromEventList>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00e      	beq.n	800573c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e007      	b.n	800573c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800572c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005730:	3301      	adds	r3, #1
 8005732:	b2db      	uxtb	r3, r3
 8005734:	b25a      	sxtb	r2, r3
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800573c:	2301      	movs	r3, #1
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005740:	e001      	b.n	8005746 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005742:	2300      	movs	r3, #0
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005750:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005754:	4618      	mov	r0, r3
 8005756:	3738      	adds	r7, #56	; 0x38
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	; 0x30
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005768:	2300      	movs	r3, #0
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <xQueueReceive+0x30>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	623b      	str	r3, [r7, #32]
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <xQueueReceive+0x3e>
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <xQueueReceive+0x42>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <xQueueReceive+0x44>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <xQueueReceive+0x5e>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	61fb      	str	r3, [r7, #28]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057ba:	f001 f861 	bl	8006880 <xTaskGetSchedulerState>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <xQueueReceive+0x6e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <xQueueReceive+0x72>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <xQueueReceive+0x74>
 80057ce:	2300      	movs	r3, #0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <xQueueReceive+0x8e>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	61bb      	str	r3, [r7, #24]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80057ea:	f001 fd2f 	bl	800724c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01f      	beq.n	800583a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fe:	f000 f8f7 	bl	80059f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	1e5a      	subs	r2, r3, #1
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00f      	beq.n	8005832 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	3310      	adds	r3, #16
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fe6c 	bl	80064f4 <xTaskRemoveFromEventList>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005822:	4b3d      	ldr	r3, [pc, #244]	; (8005918 <xQueueReceive+0x1bc>)
 8005824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005832:	f001 fd3b 	bl	80072ac <vPortExitCritical>
				return pdPASS;
 8005836:	2301      	movs	r3, #1
 8005838:	e069      	b.n	800590e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005840:	f001 fd34 	bl	80072ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005844:	2300      	movs	r3, #0
 8005846:	e062      	b.n	800590e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800584e:	f107 0310 	add.w	r3, r7, #16
 8005852:	4618      	mov	r0, r3
 8005854:	f000 feb2 	bl	80065bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005858:	2301      	movs	r3, #1
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800585c:	f001 fd26 	bl	80072ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005860:	f000 fc1c 	bl	800609c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005864:	f001 fcf2 	bl	800724c <vPortEnterCritical>
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800586e:	b25b      	sxtb	r3, r3
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d103      	bne.n	800587e <xQueueReceive+0x122>
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005884:	b25b      	sxtb	r3, r3
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588a:	d103      	bne.n	8005894 <xQueueReceive+0x138>
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005894:	f001 fd0a 	bl	80072ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005898:	1d3a      	adds	r2, r7, #4
 800589a:	f107 0310 	add.w	r3, r7, #16
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fea1 	bl	80065e8 <xTaskCheckForTimeOut>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d123      	bne.n	80058f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ae:	f000 f917 	bl	8005ae0 <prvIsQueueEmpty>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d017      	beq.n	80058e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	3324      	adds	r3, #36	; 0x24
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4611      	mov	r1, r2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fdc7 	bl	8006454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c8:	f000 f8b8 	bl	8005a3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058cc:	f000 fbf4 	bl	80060b8 <xTaskResumeAll>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d189      	bne.n	80057ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80058d6:	4b10      	ldr	r3, [pc, #64]	; (8005918 <xQueueReceive+0x1bc>)
 80058d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	e780      	b.n	80057ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ea:	f000 f8a7 	bl	8005a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ee:	f000 fbe3 	bl	80060b8 <xTaskResumeAll>
 80058f2:	e77a      	b.n	80057ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058f6:	f000 f8a1 	bl	8005a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058fa:	f000 fbdd 	bl	80060b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005900:	f000 f8ee 	bl	8005ae0 <prvIsQueueEmpty>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	f43f af6f 	beq.w	80057ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800590c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800590e:	4618      	mov	r0, r3
 8005910:	3730      	adds	r7, #48	; 0x30
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d14d      	bne.n	80059de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 ffb8 	bl	80068bc <xTaskPriorityDisinherit>
 800594c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	605a      	str	r2, [r3, #4]
 8005954:	e043      	b.n	80059de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d119      	bne.n	8005990 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6898      	ldr	r0, [r3, #8]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	461a      	mov	r2, r3
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	f002 f87c 	bl	8007a64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	441a      	add	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d32b      	bcc.n	80059de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	609a      	str	r2, [r3, #8]
 800598e:	e026      	b.n	80059de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68d8      	ldr	r0, [r3, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	461a      	mov	r2, r3
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	f002 f862 	bl	8007a64 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	425b      	negs	r3, r3
 80059aa:	441a      	add	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d207      	bcs.n	80059cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	425b      	negs	r3, r3
 80059c6:	441a      	add	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d105      	bne.n	80059de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	3b01      	subs	r3, #1
 80059dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059e6:	697b      	ldr	r3, [r7, #20]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d018      	beq.n	8005a34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	441a      	add	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d303      	bcc.n	8005a24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68d9      	ldr	r1, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6838      	ldr	r0, [r7, #0]
 8005a30:	f002 f818 	bl	8007a64 <memcpy>
	}
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a44:	f001 fc02 	bl	800724c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a50:	e011      	b.n	8005a76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d012      	beq.n	8005a80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3324      	adds	r3, #36	; 0x24
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fd48 	bl	80064f4 <xTaskRemoveFromEventList>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a6a:	f000 fe1f 	bl	80066ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dce9      	bgt.n	8005a52 <prvUnlockQueue+0x16>
 8005a7e:	e000      	b.n	8005a82 <prvUnlockQueue+0x46>
					break;
 8005a80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a8a:	f001 fc0f 	bl	80072ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a8e:	f001 fbdd 	bl	800724c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a9a:	e011      	b.n	8005ac0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d012      	beq.n	8005aca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3310      	adds	r3, #16
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fd23 	bl	80064f4 <xTaskRemoveFromEventList>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ab4:	f000 fdfa 	bl	80066ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	dce9      	bgt.n	8005a9c <prvUnlockQueue+0x60>
 8005ac8:	e000      	b.n	8005acc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005aca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	22ff      	movs	r2, #255	; 0xff
 8005ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ad4:	f001 fbea 	bl	80072ac <vPortExitCritical>
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ae8:	f001 fbb0 	bl	800724c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	e001      	b.n	8005afe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005afe:	f001 fbd5 	bl	80072ac <vPortExitCritical>

	return xReturn;
 8005b02:	68fb      	ldr	r3, [r7, #12]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b14:	f001 fb9a 	bl	800724c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d102      	bne.n	8005b2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b24:	2301      	movs	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e001      	b.n	8005b2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b2e:	f001 fbbd 	bl	80072ac <vPortExitCritical>

	return xReturn;
 8005b32:	68fb      	ldr	r3, [r7, #12]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e014      	b.n	8005b76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b4c:	4a0e      	ldr	r2, [pc, #56]	; (8005b88 <vQueueAddToRegistry+0x4c>)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10b      	bne.n	8005b70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b58:	490b      	ldr	r1, [pc, #44]	; (8005b88 <vQueueAddToRegistry+0x4c>)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b62:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <vQueueAddToRegistry+0x4c>)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4413      	add	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b6e:	e006      	b.n	8005b7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b07      	cmp	r3, #7
 8005b7a:	d9e7      	bls.n	8005b4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr
 8005b88:	20000aa4 	.word	0x20000aa4

08005b8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b9c:	f001 fb56 	bl	800724c <vPortEnterCritical>
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ba6:	b25b      	sxtb	r3, r3
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d103      	bne.n	8005bb6 <vQueueWaitForMessageRestricted+0x2a>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bbc:	b25b      	sxtb	r3, r3
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d103      	bne.n	8005bcc <vQueueWaitForMessageRestricted+0x40>
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bcc:	f001 fb6e 	bl	80072ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	3324      	adds	r3, #36	; 0x24
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fc5b 	bl	800649c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005be6:	6978      	ldr	r0, [r7, #20]
 8005be8:	f7ff ff28 	bl	8005a3c <prvUnlockQueue>
	}
 8005bec:	bf00      	nop
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08e      	sub	sp, #56	; 0x38
 8005bf8:	af04      	add	r7, sp, #16
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	623b      	str	r3, [r7, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	e7fe      	b.n	8005c1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <xTaskCreateStatic+0x46>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	61fb      	str	r3, [r7, #28]
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c3a:	23bc      	movs	r3, #188	; 0xbc
 8005c3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2bbc      	cmp	r3, #188	; 0xbc
 8005c42:	d00a      	beq.n	8005c5a <xTaskCreateStatic+0x66>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	61bb      	str	r3, [r7, #24]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01e      	beq.n	8005c9e <xTaskCreateStatic+0xaa>
 8005c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d01b      	beq.n	8005c9e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c78:	2300      	movs	r3, #0
 8005c7a:	9303      	str	r3, [sp, #12]
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	9302      	str	r3, [sp, #8]
 8005c80:	f107 0314 	add.w	r3, r7, #20
 8005c84:	9301      	str	r3, [sp, #4]
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f851 	bl	8005d38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c98:	f000 f8ec 	bl	8005e74 <prvAddNewTaskToReadyList>
 8005c9c:	e001      	b.n	8005ca2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ca2:	697b      	ldr	r3, [r7, #20]
	}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3728      	adds	r7, #40	; 0x28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08c      	sub	sp, #48	; 0x30
 8005cb0:	af04      	add	r7, sp, #16
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f001 fbc3 	bl	800744c <pvPortMalloc>
 8005cc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00e      	beq.n	8005cec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005cce:	20bc      	movs	r0, #188	; 0xbc
 8005cd0:	f001 fbbc 	bl	800744c <pvPortMalloc>
 8005cd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ce2:	e005      	b.n	8005cf0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ce4:	6978      	ldr	r0, [r7, #20]
 8005ce6:	f001 fc75 	bl	80075d4 <vPortFree>
 8005cea:	e001      	b.n	8005cf0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d017      	beq.n	8005d26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cfe:	88fa      	ldrh	r2, [r7, #6]
 8005d00:	2300      	movs	r3, #0
 8005d02:	9303      	str	r3, [sp, #12]
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	9302      	str	r3, [sp, #8]
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	9301      	str	r3, [sp, #4]
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f80f 	bl	8005d38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d1a:	69f8      	ldr	r0, [r7, #28]
 8005d1c:	f000 f8aa 	bl	8005e74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d20:	2301      	movs	r3, #1
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	e002      	b.n	8005d2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d26:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
	}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	461a      	mov	r2, r3
 8005d50:	21a5      	movs	r1, #165	; 0xa5
 8005d52:	f001 fe95 	bl	8007a80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d60:	3b01      	subs	r3, #1
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	f023 0307 	bic.w	r3, r3, #7
 8005d6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	617b      	str	r3, [r7, #20]
}
 8005d8c:	bf00      	nop
 8005d8e:	e7fe      	b.n	8005d8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d90:	2300      	movs	r3, #0
 8005d92:	61fb      	str	r3, [r7, #28]
 8005d94:	e012      	b.n	8005dbc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	7819      	ldrb	r1, [r3, #0]
 8005d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	3334      	adds	r3, #52	; 0x34
 8005da6:	460a      	mov	r2, r1
 8005da8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d006      	beq.n	8005dc4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	3301      	adds	r3, #1
 8005dba:	61fb      	str	r3, [r7, #28]
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	2b0f      	cmp	r3, #15
 8005dc0:	d9e9      	bls.n	8005d96 <prvInitialiseNewTask+0x5e>
 8005dc2:	e000      	b.n	8005dc6 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005dc4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	2b37      	cmp	r3, #55	; 0x37
 8005dd2:	d901      	bls.n	8005dd8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dd4:	2337      	movs	r3, #55	; 0x37
 8005dd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ddc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	2200      	movs	r2, #0
 8005de8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	3304      	adds	r3, #4
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff f98b 	bl	800510a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	3318      	adds	r3, #24
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff f986 	bl	800510a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e26:	3354      	adds	r3, #84	; 0x54
 8005e28:	2260      	movs	r2, #96	; 0x60
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 fe27 	bl	8007a80 <memset>
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	4a0c      	ldr	r2, [pc, #48]	; (8005e68 <prvInitialiseNewTask+0x130>)
 8005e36:	659a      	str	r2, [r3, #88]	; 0x58
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	4a0c      	ldr	r2, [pc, #48]	; (8005e6c <prvInitialiseNewTask+0x134>)
 8005e3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	4a0b      	ldr	r2, [pc, #44]	; (8005e70 <prvInitialiseNewTask+0x138>)
 8005e42:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	69b8      	ldr	r0, [r7, #24]
 8005e4a:	f001 f90b 	bl	8007064 <pxPortInitialiseStack>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e60:	bf00      	nop
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	08011474 	.word	0x08011474
 8005e6c:	08011494 	.word	0x08011494
 8005e70:	08011454 	.word	0x08011454

08005e74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e7c:	f001 f9e6 	bl	800724c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e80:	4b2d      	ldr	r3, [pc, #180]	; (8005f38 <prvAddNewTaskToReadyList+0xc4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3301      	adds	r3, #1
 8005e86:	4a2c      	ldr	r2, [pc, #176]	; (8005f38 <prvAddNewTaskToReadyList+0xc4>)
 8005e88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e8a:	4b2c      	ldr	r3, [pc, #176]	; (8005f3c <prvAddNewTaskToReadyList+0xc8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e92:	4a2a      	ldr	r2, [pc, #168]	; (8005f3c <prvAddNewTaskToReadyList+0xc8>)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e98:	4b27      	ldr	r3, [pc, #156]	; (8005f38 <prvAddNewTaskToReadyList+0xc4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d110      	bne.n	8005ec2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ea0:	f000 fc28 	bl	80066f4 <prvInitialiseTaskLists>
 8005ea4:	e00d      	b.n	8005ec2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ea6:	4b26      	ldr	r3, [pc, #152]	; (8005f40 <prvAddNewTaskToReadyList+0xcc>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005eae:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <prvAddNewTaskToReadyList+0xc8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d802      	bhi.n	8005ec2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <prvAddNewTaskToReadyList+0xc8>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ec2:	4b20      	ldr	r3, [pc, #128]	; (8005f44 <prvAddNewTaskToReadyList+0xd0>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	4a1e      	ldr	r2, [pc, #120]	; (8005f44 <prvAddNewTaskToReadyList+0xd0>)
 8005eca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ecc:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <prvAddNewTaskToReadyList+0xd0>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <prvAddNewTaskToReadyList+0xd4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d903      	bls.n	8005ee8 <prvAddNewTaskToReadyList+0x74>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <prvAddNewTaskToReadyList+0xd4>)
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <prvAddNewTaskToReadyList+0xd8>)
 8005ef6:	441a      	add	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f7ff f90f 	bl	8005122 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f04:	f001 f9d2 	bl	80072ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f08:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <prvAddNewTaskToReadyList+0xcc>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00e      	beq.n	8005f2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <prvAddNewTaskToReadyList+0xc8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d207      	bcs.n	8005f2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f1e:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <prvAddNewTaskToReadyList+0xdc>)
 8005f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000fb8 	.word	0x20000fb8
 8005f3c:	20000ae4 	.word	0x20000ae4
 8005f40:	20000fc4 	.word	0x20000fc4
 8005f44:	20000fd4 	.word	0x20000fd4
 8005f48:	20000fc0 	.word	0x20000fc0
 8005f4c:	20000ae8 	.word	0x20000ae8
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d017      	beq.n	8005f96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f66:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <vTaskDelay+0x60>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <vTaskDelay+0x30>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	60bb      	str	r3, [r7, #8]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f84:	f000 f88a 	bl	800609c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f88:	2100      	movs	r1, #0
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fd04 	bl	8006998 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f90:	f000 f892 	bl	80060b8 <xTaskResumeAll>
 8005f94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d107      	bne.n	8005fac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <vTaskDelay+0x64>)
 8005f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000fe0 	.word	0x20000fe0
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	; 0x28
 8005fc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fca:	463a      	mov	r2, r7
 8005fcc:	1d39      	adds	r1, r7, #4
 8005fce:	f107 0308 	add.w	r3, r7, #8
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff f84a 	bl	800506c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	9202      	str	r2, [sp, #8]
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	460a      	mov	r2, r1
 8005fea:	4924      	ldr	r1, [pc, #144]	; (800607c <vTaskStartScheduler+0xc0>)
 8005fec:	4824      	ldr	r0, [pc, #144]	; (8006080 <vTaskStartScheduler+0xc4>)
 8005fee:	f7ff fe01 	bl	8005bf4 <xTaskCreateStatic>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4a23      	ldr	r2, [pc, #140]	; (8006084 <vTaskStartScheduler+0xc8>)
 8005ff6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ff8:	4b22      	ldr	r3, [pc, #136]	; (8006084 <vTaskStartScheduler+0xc8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006000:	2301      	movs	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e001      	b.n	800600a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006006:	2300      	movs	r3, #0
 8006008:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d102      	bne.n	8006016 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006010:	f000 fd16 	bl	8006a40 <xTimerCreateTimerTask>
 8006014:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d11b      	bne.n	8006054 <vTaskStartScheduler+0x98>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	613b      	str	r3, [r7, #16]
}
 800602e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006030:	4b15      	ldr	r3, [pc, #84]	; (8006088 <vTaskStartScheduler+0xcc>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3354      	adds	r3, #84	; 0x54
 8006036:	4a15      	ldr	r2, [pc, #84]	; (800608c <vTaskStartScheduler+0xd0>)
 8006038:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800603a:	4b15      	ldr	r3, [pc, #84]	; (8006090 <vTaskStartScheduler+0xd4>)
 800603c:	f04f 32ff 	mov.w	r2, #4294967295
 8006040:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006042:	4b14      	ldr	r3, [pc, #80]	; (8006094 <vTaskStartScheduler+0xd8>)
 8006044:	2201      	movs	r2, #1
 8006046:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006048:	4b13      	ldr	r3, [pc, #76]	; (8006098 <vTaskStartScheduler+0xdc>)
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800604e:	f001 f88b 	bl	8007168 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006052:	e00e      	b.n	8006072 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d10a      	bne.n	8006072 <vTaskStartScheduler+0xb6>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60fb      	str	r3, [r7, #12]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <vTaskStartScheduler+0xb4>
}
 8006072:	bf00      	nop
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	0800c6e8 	.word	0x0800c6e8
 8006080:	080066c5 	.word	0x080066c5
 8006084:	20000fdc 	.word	0x20000fdc
 8006088:	20000ae4 	.word	0x20000ae4
 800608c:	2000002c 	.word	0x2000002c
 8006090:	20000fd8 	.word	0x20000fd8
 8006094:	20000fc4 	.word	0x20000fc4
 8006098:	20000fbc 	.word	0x20000fbc

0800609c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80060a0:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <vTaskSuspendAll+0x18>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	4a03      	ldr	r2, [pc, #12]	; (80060b4 <vTaskSuspendAll+0x18>)
 80060a8:	6013      	str	r3, [r2, #0]
}
 80060aa:	bf00      	nop
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20000fe0 	.word	0x20000fe0

080060b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060c6:	4b42      	ldr	r3, [pc, #264]	; (80061d0 <xTaskResumeAll+0x118>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	603b      	str	r3, [r7, #0]
}
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060e4:	f001 f8b2 	bl	800724c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060e8:	4b39      	ldr	r3, [pc, #228]	; (80061d0 <xTaskResumeAll+0x118>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	4a38      	ldr	r2, [pc, #224]	; (80061d0 <xTaskResumeAll+0x118>)
 80060f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060f2:	4b37      	ldr	r3, [pc, #220]	; (80061d0 <xTaskResumeAll+0x118>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d162      	bne.n	80061c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060fa:	4b36      	ldr	r3, [pc, #216]	; (80061d4 <xTaskResumeAll+0x11c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d05e      	beq.n	80061c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006102:	e02f      	b.n	8006164 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006104:	4b34      	ldr	r3, [pc, #208]	; (80061d8 <xTaskResumeAll+0x120>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3318      	adds	r3, #24
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff f861 	bl	80051d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3304      	adds	r3, #4
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff f85c 	bl	80051d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006124:	4b2d      	ldr	r3, [pc, #180]	; (80061dc <xTaskResumeAll+0x124>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d903      	bls.n	8006134 <xTaskResumeAll+0x7c>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	4a2a      	ldr	r2, [pc, #168]	; (80061dc <xTaskResumeAll+0x124>)
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4a27      	ldr	r2, [pc, #156]	; (80061e0 <xTaskResumeAll+0x128>)
 8006142:	441a      	add	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f7fe ffe9 	bl	8005122 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006154:	4b23      	ldr	r3, [pc, #140]	; (80061e4 <xTaskResumeAll+0x12c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	429a      	cmp	r2, r3
 800615c:	d302      	bcc.n	8006164 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800615e:	4b22      	ldr	r3, [pc, #136]	; (80061e8 <xTaskResumeAll+0x130>)
 8006160:	2201      	movs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006164:	4b1c      	ldr	r3, [pc, #112]	; (80061d8 <xTaskResumeAll+0x120>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1cb      	bne.n	8006104 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006172:	f000 fb61 	bl	8006838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006176:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <xTaskResumeAll+0x134>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d010      	beq.n	80061a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006182:	f000 f845 	bl	8006210 <xTaskIncrementTick>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800618c:	4b16      	ldr	r3, [pc, #88]	; (80061e8 <xTaskResumeAll+0x130>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3b01      	subs	r3, #1
 8006196:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f1      	bne.n	8006182 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800619e:	4b13      	ldr	r3, [pc, #76]	; (80061ec <xTaskResumeAll+0x134>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061a4:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <xTaskResumeAll+0x130>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d009      	beq.n	80061c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061ac:	2301      	movs	r3, #1
 80061ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061b0:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <xTaskResumeAll+0x138>)
 80061b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061c0:	f001 f874 	bl	80072ac <vPortExitCritical>

	return xAlreadyYielded;
 80061c4:	68bb      	ldr	r3, [r7, #8]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000fe0 	.word	0x20000fe0
 80061d4:	20000fb8 	.word	0x20000fb8
 80061d8:	20000f78 	.word	0x20000f78
 80061dc:	20000fc0 	.word	0x20000fc0
 80061e0:	20000ae8 	.word	0x20000ae8
 80061e4:	20000ae4 	.word	0x20000ae4
 80061e8:	20000fcc 	.word	0x20000fcc
 80061ec:	20000fc8 	.word	0x20000fc8
 80061f0:	e000ed04 	.word	0xe000ed04

080061f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061fa:	4b04      	ldr	r3, [pc, #16]	; (800620c <xTaskGetTickCount+0x18>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006200:	687b      	ldr	r3, [r7, #4]
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr
 800620c:	20000fbc 	.word	0x20000fbc

08006210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800621a:	4b51      	ldr	r3, [pc, #324]	; (8006360 <xTaskIncrementTick+0x150>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f040 808e 	bne.w	8006340 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006224:	4b4f      	ldr	r3, [pc, #316]	; (8006364 <xTaskIncrementTick+0x154>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3301      	adds	r3, #1
 800622a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800622c:	4a4d      	ldr	r2, [pc, #308]	; (8006364 <xTaskIncrementTick+0x154>)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d120      	bne.n	800627a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006238:	4b4b      	ldr	r3, [pc, #300]	; (8006368 <xTaskIncrementTick+0x158>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <xTaskIncrementTick+0x48>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	603b      	str	r3, [r7, #0]
}
 8006254:	bf00      	nop
 8006256:	e7fe      	b.n	8006256 <xTaskIncrementTick+0x46>
 8006258:	4b43      	ldr	r3, [pc, #268]	; (8006368 <xTaskIncrementTick+0x158>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	4b43      	ldr	r3, [pc, #268]	; (800636c <xTaskIncrementTick+0x15c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a41      	ldr	r2, [pc, #260]	; (8006368 <xTaskIncrementTick+0x158>)
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	4a41      	ldr	r2, [pc, #260]	; (800636c <xTaskIncrementTick+0x15c>)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4b40      	ldr	r3, [pc, #256]	; (8006370 <xTaskIncrementTick+0x160>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3301      	adds	r3, #1
 8006272:	4a3f      	ldr	r2, [pc, #252]	; (8006370 <xTaskIncrementTick+0x160>)
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	f000 fadf 	bl	8006838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800627a:	4b3e      	ldr	r3, [pc, #248]	; (8006374 <xTaskIncrementTick+0x164>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	429a      	cmp	r2, r3
 8006282:	d34e      	bcc.n	8006322 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006284:	4b38      	ldr	r3, [pc, #224]	; (8006368 <xTaskIncrementTick+0x158>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <xTaskIncrementTick+0x82>
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <xTaskIncrementTick+0x84>
 8006292:	2300      	movs	r3, #0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006298:	4b36      	ldr	r3, [pc, #216]	; (8006374 <xTaskIncrementTick+0x164>)
 800629a:	f04f 32ff 	mov.w	r2, #4294967295
 800629e:	601a      	str	r2, [r3, #0]
					break;
 80062a0:	e03f      	b.n	8006322 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062a2:	4b31      	ldr	r3, [pc, #196]	; (8006368 <xTaskIncrementTick+0x158>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d203      	bcs.n	80062c2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062ba:	4a2e      	ldr	r2, [pc, #184]	; (8006374 <xTaskIncrementTick+0x164>)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6013      	str	r3, [r2, #0]
						break;
 80062c0:	e02f      	b.n	8006322 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	3304      	adds	r3, #4
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe ff86 	bl	80051d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	3318      	adds	r3, #24
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fe ff7d 	bl	80051d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e2:	4b25      	ldr	r3, [pc, #148]	; (8006378 <xTaskIncrementTick+0x168>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d903      	bls.n	80062f2 <xTaskIncrementTick+0xe2>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ee:	4a22      	ldr	r2, [pc, #136]	; (8006378 <xTaskIncrementTick+0x168>)
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4a1f      	ldr	r2, [pc, #124]	; (800637c <xTaskIncrementTick+0x16c>)
 8006300:	441a      	add	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	3304      	adds	r3, #4
 8006306:	4619      	mov	r1, r3
 8006308:	4610      	mov	r0, r2
 800630a:	f7fe ff0a 	bl	8005122 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006312:	4b1b      	ldr	r3, [pc, #108]	; (8006380 <xTaskIncrementTick+0x170>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	429a      	cmp	r2, r3
 800631a:	d3b3      	bcc.n	8006284 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006320:	e7b0      	b.n	8006284 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006322:	4b17      	ldr	r3, [pc, #92]	; (8006380 <xTaskIncrementTick+0x170>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006328:	4914      	ldr	r1, [pc, #80]	; (800637c <xTaskIncrementTick+0x16c>)
 800632a:	4613      	mov	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d907      	bls.n	800634a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800633a:	2301      	movs	r3, #1
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	e004      	b.n	800634a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006340:	4b10      	ldr	r3, [pc, #64]	; (8006384 <xTaskIncrementTick+0x174>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3301      	adds	r3, #1
 8006346:	4a0f      	ldr	r2, [pc, #60]	; (8006384 <xTaskIncrementTick+0x174>)
 8006348:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800634a:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <xTaskIncrementTick+0x178>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006352:	2301      	movs	r3, #1
 8006354:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006356:	697b      	ldr	r3, [r7, #20]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20000fe0 	.word	0x20000fe0
 8006364:	20000fbc 	.word	0x20000fbc
 8006368:	20000f70 	.word	0x20000f70
 800636c:	20000f74 	.word	0x20000f74
 8006370:	20000fd0 	.word	0x20000fd0
 8006374:	20000fd8 	.word	0x20000fd8
 8006378:	20000fc0 	.word	0x20000fc0
 800637c:	20000ae8 	.word	0x20000ae8
 8006380:	20000ae4 	.word	0x20000ae4
 8006384:	20000fc8 	.word	0x20000fc8
 8006388:	20000fcc 	.word	0x20000fcc

0800638c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006392:	4b2a      	ldr	r3, [pc, #168]	; (800643c <vTaskSwitchContext+0xb0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800639a:	4b29      	ldr	r3, [pc, #164]	; (8006440 <vTaskSwitchContext+0xb4>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063a0:	e046      	b.n	8006430 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80063a2:	4b27      	ldr	r3, [pc, #156]	; (8006440 <vTaskSwitchContext+0xb4>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80063a8:	4b26      	ldr	r3, [pc, #152]	; (8006444 <vTaskSwitchContext+0xb8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	e010      	b.n	80063d2 <vTaskSwitchContext+0x46>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10a      	bne.n	80063cc <vTaskSwitchContext+0x40>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	607b      	str	r3, [r7, #4]
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <vTaskSwitchContext+0x3e>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	491d      	ldr	r1, [pc, #116]	; (8006448 <vTaskSwitchContext+0xbc>)
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0e4      	beq.n	80063b0 <vTaskSwitchContext+0x24>
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4a15      	ldr	r2, [pc, #84]	; (8006448 <vTaskSwitchContext+0xbc>)
 80063f2:	4413      	add	r3, r2
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	605a      	str	r2, [r3, #4]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	3308      	adds	r3, #8
 8006408:	429a      	cmp	r2, r3
 800640a:	d104      	bne.n	8006416 <vTaskSwitchContext+0x8a>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	605a      	str	r2, [r3, #4]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	4a0b      	ldr	r2, [pc, #44]	; (800644c <vTaskSwitchContext+0xc0>)
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	4a08      	ldr	r2, [pc, #32]	; (8006444 <vTaskSwitchContext+0xb8>)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006426:	4b09      	ldr	r3, [pc, #36]	; (800644c <vTaskSwitchContext+0xc0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3354      	adds	r3, #84	; 0x54
 800642c:	4a08      	ldr	r2, [pc, #32]	; (8006450 <vTaskSwitchContext+0xc4>)
 800642e:	6013      	str	r3, [r2, #0]
}
 8006430:	bf00      	nop
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20000fe0 	.word	0x20000fe0
 8006440:	20000fcc 	.word	0x20000fcc
 8006444:	20000fc0 	.word	0x20000fc0
 8006448:	20000ae8 	.word	0x20000ae8
 800644c:	20000ae4 	.word	0x20000ae4
 8006450:	2000002c 	.word	0x2000002c

08006454 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60fb      	str	r3, [r7, #12]
}
 8006476:	bf00      	nop
 8006478:	e7fe      	b.n	8006478 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800647a:	4b07      	ldr	r3, [pc, #28]	; (8006498 <vTaskPlaceOnEventList+0x44>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3318      	adds	r3, #24
 8006480:	4619      	mov	r1, r3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fe fe70 	bl	8005168 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006488:	2101      	movs	r1, #1
 800648a:	6838      	ldr	r0, [r7, #0]
 800648c:	f000 fa84 	bl	8006998 <prvAddCurrentTaskToDelayedList>
}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20000ae4 	.word	0x20000ae4

0800649c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10a      	bne.n	80064c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	617b      	str	r3, [r7, #20]
}
 80064c0:	bf00      	nop
 80064c2:	e7fe      	b.n	80064c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064c4:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3318      	adds	r3, #24
 80064ca:	4619      	mov	r1, r3
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7fe fe28 	bl	8005122 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80064d8:	f04f 33ff 	mov.w	r3, #4294967295
 80064dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	68b8      	ldr	r0, [r7, #8]
 80064e2:	f000 fa59 	bl	8006998 <prvAddCurrentTaskToDelayedList>
	}
 80064e6:	bf00      	nop
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000ae4 	.word	0x20000ae4

080064f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	60fb      	str	r3, [r7, #12]
}
 800651c:	bf00      	nop
 800651e:	e7fe      	b.n	800651e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	3318      	adds	r3, #24
 8006524:	4618      	mov	r0, r3
 8006526:	f7fe fe57 	bl	80051d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800652a:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <xTaskRemoveFromEventList+0xb0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d11d      	bne.n	800656e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	3304      	adds	r3, #4
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fe4e 	bl	80051d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006540:	4b19      	ldr	r3, [pc, #100]	; (80065a8 <xTaskRemoveFromEventList+0xb4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d903      	bls.n	8006550 <xTaskRemoveFromEventList+0x5c>
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	4a16      	ldr	r2, [pc, #88]	; (80065a8 <xTaskRemoveFromEventList+0xb4>)
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4a13      	ldr	r2, [pc, #76]	; (80065ac <xTaskRemoveFromEventList+0xb8>)
 800655e:	441a      	add	r2, r3
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	3304      	adds	r3, #4
 8006564:	4619      	mov	r1, r3
 8006566:	4610      	mov	r0, r2
 8006568:	f7fe fddb 	bl	8005122 <vListInsertEnd>
 800656c:	e005      	b.n	800657a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	3318      	adds	r3, #24
 8006572:	4619      	mov	r1, r3
 8006574:	480e      	ldr	r0, [pc, #56]	; (80065b0 <xTaskRemoveFromEventList+0xbc>)
 8006576:	f7fe fdd4 	bl	8005122 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <xTaskRemoveFromEventList+0xc0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	429a      	cmp	r2, r3
 8006586:	d905      	bls.n	8006594 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006588:	2301      	movs	r3, #1
 800658a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800658c:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <xTaskRemoveFromEventList+0xc4>)
 800658e:	2201      	movs	r2, #1
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	e001      	b.n	8006598 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006598:	697b      	ldr	r3, [r7, #20]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000fe0 	.word	0x20000fe0
 80065a8:	20000fc0 	.word	0x20000fc0
 80065ac:	20000ae8 	.word	0x20000ae8
 80065b0:	20000f78 	.word	0x20000f78
 80065b4:	20000ae4 	.word	0x20000ae4
 80065b8:	20000fcc 	.word	0x20000fcc

080065bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065c4:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <vTaskInternalSetTimeOutState+0x24>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065cc:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <vTaskInternalSetTimeOutState+0x28>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	605a      	str	r2, [r3, #4]
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	bc80      	pop	{r7}
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	20000fd0 	.word	0x20000fd0
 80065e4:	20000fbc 	.word	0x20000fbc

080065e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	613b      	str	r3, [r7, #16]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10a      	bne.n	800662a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	60fb      	str	r3, [r7, #12]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800662a:	f000 fe0f 	bl	800724c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800662e:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <xTaskCheckForTimeOut+0xbc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006646:	d102      	bne.n	800664e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006648:	2300      	movs	r3, #0
 800664a:	61fb      	str	r3, [r7, #28]
 800664c:	e023      	b.n	8006696 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <xTaskCheckForTimeOut+0xc0>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d007      	beq.n	800666a <xTaskCheckForTimeOut+0x82>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	429a      	cmp	r2, r3
 8006662:	d302      	bcc.n	800666a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006664:	2301      	movs	r3, #1
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	e015      	b.n	8006696 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	429a      	cmp	r2, r3
 8006672:	d20b      	bcs.n	800668c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	1ad2      	subs	r2, r2, r3
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff ff9b 	bl	80065bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006686:	2300      	movs	r3, #0
 8006688:	61fb      	str	r3, [r7, #28]
 800668a:	e004      	b.n	8006696 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2200      	movs	r2, #0
 8006690:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006692:	2301      	movs	r3, #1
 8006694:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006696:	f000 fe09 	bl	80072ac <vPortExitCritical>

	return xReturn;
 800669a:	69fb      	ldr	r3, [r7, #28]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3720      	adds	r7, #32
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20000fbc 	.word	0x20000fbc
 80066a8:	20000fd0 	.word	0x20000fd0

080066ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066b0:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <vTaskMissedYield+0x14>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
}
 80066b6:	bf00      	nop
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000fcc 	.word	0x20000fcc

080066c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066cc:	f000 f852 	bl	8006774 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066d0:	4b06      	ldr	r3, [pc, #24]	; (80066ec <prvIdleTask+0x28>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d9f9      	bls.n	80066cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80066d8:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <prvIdleTask+0x2c>)
 80066da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066e8:	e7f0      	b.n	80066cc <prvIdleTask+0x8>
 80066ea:	bf00      	nop
 80066ec:	20000ae8 	.word	0x20000ae8
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066fa:	2300      	movs	r3, #0
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	e00c      	b.n	800671a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4a12      	ldr	r2, [pc, #72]	; (8006754 <prvInitialiseTaskLists+0x60>)
 800670c:	4413      	add	r3, r2
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe fcdc 	bl	80050cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3301      	adds	r3, #1
 8006718:	607b      	str	r3, [r7, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b37      	cmp	r3, #55	; 0x37
 800671e:	d9ef      	bls.n	8006700 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006720:	480d      	ldr	r0, [pc, #52]	; (8006758 <prvInitialiseTaskLists+0x64>)
 8006722:	f7fe fcd3 	bl	80050cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006726:	480d      	ldr	r0, [pc, #52]	; (800675c <prvInitialiseTaskLists+0x68>)
 8006728:	f7fe fcd0 	bl	80050cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800672c:	480c      	ldr	r0, [pc, #48]	; (8006760 <prvInitialiseTaskLists+0x6c>)
 800672e:	f7fe fccd 	bl	80050cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006732:	480c      	ldr	r0, [pc, #48]	; (8006764 <prvInitialiseTaskLists+0x70>)
 8006734:	f7fe fcca 	bl	80050cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006738:	480b      	ldr	r0, [pc, #44]	; (8006768 <prvInitialiseTaskLists+0x74>)
 800673a:	f7fe fcc7 	bl	80050cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800673e:	4b0b      	ldr	r3, [pc, #44]	; (800676c <prvInitialiseTaskLists+0x78>)
 8006740:	4a05      	ldr	r2, [pc, #20]	; (8006758 <prvInitialiseTaskLists+0x64>)
 8006742:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006744:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <prvInitialiseTaskLists+0x7c>)
 8006746:	4a05      	ldr	r2, [pc, #20]	; (800675c <prvInitialiseTaskLists+0x68>)
 8006748:	601a      	str	r2, [r3, #0]
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20000ae8 	.word	0x20000ae8
 8006758:	20000f48 	.word	0x20000f48
 800675c:	20000f5c 	.word	0x20000f5c
 8006760:	20000f78 	.word	0x20000f78
 8006764:	20000f8c 	.word	0x20000f8c
 8006768:	20000fa4 	.word	0x20000fa4
 800676c:	20000f70 	.word	0x20000f70
 8006770:	20000f74 	.word	0x20000f74

08006774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800677a:	e019      	b.n	80067b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800677c:	f000 fd66 	bl	800724c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006780:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <prvCheckTasksWaitingTermination+0x50>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3304      	adds	r3, #4
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fd23 	bl	80051d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006792:	4b0d      	ldr	r3, [pc, #52]	; (80067c8 <prvCheckTasksWaitingTermination+0x54>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3b01      	subs	r3, #1
 8006798:	4a0b      	ldr	r2, [pc, #44]	; (80067c8 <prvCheckTasksWaitingTermination+0x54>)
 800679a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800679c:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <prvCheckTasksWaitingTermination+0x58>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <prvCheckTasksWaitingTermination+0x58>)
 80067a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067a6:	f000 fd81 	bl	80072ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f810 	bl	80067d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <prvCheckTasksWaitingTermination+0x58>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e1      	bne.n	800677c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000f8c 	.word	0x20000f8c
 80067c8:	20000fb8 	.word	0x20000fb8
 80067cc:	20000fa0 	.word	0x20000fa0

080067d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3354      	adds	r3, #84	; 0x54
 80067dc:	4618      	mov	r0, r3
 80067de:	f002 f93d 	bl	8008a5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d108      	bne.n	80067fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 feef 	bl	80075d4 <vPortFree>
				vPortFree( pxTCB );
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 feec 	bl	80075d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067fc:	e018      	b.n	8006830 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006804:	2b01      	cmp	r3, #1
 8006806:	d103      	bne.n	8006810 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fee3 	bl	80075d4 <vPortFree>
	}
 800680e:	e00f      	b.n	8006830 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006816:	2b02      	cmp	r3, #2
 8006818:	d00a      	beq.n	8006830 <prvDeleteTCB+0x60>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60fb      	str	r3, [r7, #12]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <prvDeleteTCB+0x5e>
	}
 8006830:	bf00      	nop
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800683e:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <prvResetNextTaskUnblockTime+0x40>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <prvResetNextTaskUnblockTime+0x14>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <prvResetNextTaskUnblockTime+0x16>
 800684c:	2300      	movs	r3, #0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006852:	4b0a      	ldr	r3, [pc, #40]	; (800687c <prvResetNextTaskUnblockTime+0x44>)
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800685a:	e008      	b.n	800686e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800685c:	4b06      	ldr	r3, [pc, #24]	; (8006878 <prvResetNextTaskUnblockTime+0x40>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	4a04      	ldr	r2, [pc, #16]	; (800687c <prvResetNextTaskUnblockTime+0x44>)
 800686c:	6013      	str	r3, [r2, #0]
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr
 8006878:	20000f70 	.word	0x20000f70
 800687c:	20000fd8 	.word	0x20000fd8

08006880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <xTaskGetSchedulerState+0x34>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800688e:	2301      	movs	r3, #1
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	e008      	b.n	80068a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006894:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <xTaskGetSchedulerState+0x38>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800689c:	2302      	movs	r3, #2
 800689e:	607b      	str	r3, [r7, #4]
 80068a0:	e001      	b.n	80068a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068a2:	2300      	movs	r3, #0
 80068a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068a6:	687b      	ldr	r3, [r7, #4]
	}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20000fc4 	.word	0x20000fc4
 80068b8:	20000fe0 	.word	0x20000fe0

080068bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d056      	beq.n	8006980 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068d2:	4b2e      	ldr	r3, [pc, #184]	; (800698c <xTaskPriorityDisinherit+0xd0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d00a      	beq.n	80068f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	60fb      	str	r3, [r7, #12]
}
 80068ee:	bf00      	nop
 80068f0:	e7fe      	b.n	80068f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	60bb      	str	r3, [r7, #8]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006914:	1e5a      	subs	r2, r3, #1
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006922:	429a      	cmp	r2, r3
 8006924:	d02c      	beq.n	8006980 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692a:	2b00      	cmp	r3, #0
 800692c:	d128      	bne.n	8006980 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	3304      	adds	r3, #4
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fc50 	bl	80051d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006950:	4b0f      	ldr	r3, [pc, #60]	; (8006990 <xTaskPriorityDisinherit+0xd4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d903      	bls.n	8006960 <xTaskPriorityDisinherit+0xa4>
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <xTaskPriorityDisinherit+0xd4>)
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4a09      	ldr	r2, [pc, #36]	; (8006994 <xTaskPriorityDisinherit+0xd8>)
 800696e:	441a      	add	r2, r3
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	3304      	adds	r3, #4
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f7fe fbd3 	bl	8005122 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006980:	697b      	ldr	r3, [r7, #20]
	}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20000ae4 	.word	0x20000ae4
 8006990:	20000fc0 	.word	0x20000fc0
 8006994:	20000ae8 	.word	0x20000ae8

08006998 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069a2:	4b21      	ldr	r3, [pc, #132]	; (8006a28 <prvAddCurrentTaskToDelayedList+0x90>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069a8:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3304      	adds	r3, #4
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe fc12 	bl	80051d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ba:	d10a      	bne.n	80069d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c2:	4b1a      	ldr	r3, [pc, #104]	; (8006a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4619      	mov	r1, r3
 80069ca:	4819      	ldr	r0, [pc, #100]	; (8006a30 <prvAddCurrentTaskToDelayedList+0x98>)
 80069cc:	f7fe fba9 	bl	8005122 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069d0:	e026      	b.n	8006a20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4413      	add	r3, r2
 80069d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069da:	4b14      	ldr	r3, [pc, #80]	; (8006a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d209      	bcs.n	80069fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069ea:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <prvAddCurrentTaskToDelayedList+0x9c>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3304      	adds	r3, #4
 80069f4:	4619      	mov	r1, r3
 80069f6:	4610      	mov	r0, r2
 80069f8:	f7fe fbb6 	bl	8005168 <vListInsert>
}
 80069fc:	e010      	b.n	8006a20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069fe:	4b0e      	ldr	r3, [pc, #56]	; (8006a38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f7fe fbac 	bl	8005168 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d202      	bcs.n	8006a20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a1a:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6013      	str	r3, [r2, #0]
}
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000fbc 	.word	0x20000fbc
 8006a2c:	20000ae4 	.word	0x20000ae4
 8006a30:	20000fa4 	.word	0x20000fa4
 8006a34:	20000f74 	.word	0x20000f74
 8006a38:	20000f70 	.word	0x20000f70
 8006a3c:	20000fd8 	.word	0x20000fd8

08006a40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	; 0x28
 8006a44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a4a:	f000 facb 	bl	8006fe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a4e:	4b1c      	ldr	r3, [pc, #112]	; (8006ac0 <xTimerCreateTimerTask+0x80>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d021      	beq.n	8006a9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a5e:	1d3a      	adds	r2, r7, #4
 8006a60:	f107 0108 	add.w	r1, r7, #8
 8006a64:	f107 030c 	add.w	r3, r7, #12
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe fb17 	bl	800509c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	9202      	str	r2, [sp, #8]
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	2302      	movs	r3, #2
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	460a      	mov	r2, r1
 8006a80:	4910      	ldr	r1, [pc, #64]	; (8006ac4 <xTimerCreateTimerTask+0x84>)
 8006a82:	4811      	ldr	r0, [pc, #68]	; (8006ac8 <xTimerCreateTimerTask+0x88>)
 8006a84:	f7ff f8b6 	bl	8005bf4 <xTaskCreateStatic>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	4a10      	ldr	r2, [pc, #64]	; (8006acc <xTimerCreateTimerTask+0x8c>)
 8006a8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a8e:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <xTimerCreateTimerTask+0x8c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a96:	2301      	movs	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	613b      	str	r3, [r7, #16]
}
 8006ab2:	bf00      	nop
 8006ab4:	e7fe      	b.n	8006ab4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ab6:	697b      	ldr	r3, [r7, #20]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	20001014 	.word	0x20001014
 8006ac4:	0800c6f0 	.word	0x0800c6f0
 8006ac8:	08006bed 	.word	0x08006bed
 8006acc:	20001018 	.word	0x20001018

08006ad0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08a      	sub	sp, #40	; 0x28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <xTimerGenericCommand+0x2e>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	623b      	str	r3, [r7, #32]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006afe:	4b1a      	ldr	r3, [pc, #104]	; (8006b68 <xTimerGenericCommand+0x98>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d02a      	beq.n	8006b5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b05      	cmp	r3, #5
 8006b16:	dc18      	bgt.n	8006b4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b18:	f7ff feb2 	bl	8006880 <xTaskGetSchedulerState>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d109      	bne.n	8006b36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b22:	4b11      	ldr	r3, [pc, #68]	; (8006b68 <xTimerGenericCommand+0x98>)
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	f107 0110 	add.w	r1, r7, #16
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2e:	f7fe fc7f 	bl	8005430 <xQueueGenericSend>
 8006b32:	6278      	str	r0, [r7, #36]	; 0x24
 8006b34:	e012      	b.n	8006b5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b36:	4b0c      	ldr	r3, [pc, #48]	; (8006b68 <xTimerGenericCommand+0x98>)
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	f107 0110 	add.w	r1, r7, #16
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2200      	movs	r2, #0
 8006b42:	f7fe fc75 	bl	8005430 <xQueueGenericSend>
 8006b46:	6278      	str	r0, [r7, #36]	; 0x24
 8006b48:	e008      	b.n	8006b5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b4a:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <xTimerGenericCommand+0x98>)
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	f107 0110 	add.w	r1, r7, #16
 8006b52:	2300      	movs	r3, #0
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	f7fe fd69 	bl	800562c <xQueueGenericSendFromISR>
 8006b5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3728      	adds	r7, #40	; 0x28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20001014 	.word	0x20001014

08006b6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b76:	4b1c      	ldr	r3, [pc, #112]	; (8006be8 <prvProcessExpiredTimer+0x7c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	3304      	adds	r3, #4
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fe fb27 	bl	80051d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d122      	bne.n	8006bd8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	18d1      	adds	r1, r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	6978      	ldr	r0, [r7, #20]
 8006ba0:	f000 f8c8 	bl	8006d34 <prvInsertTimerInActiveList>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d016      	beq.n	8006bd8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006baa:	2300      	movs	r3, #0
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	6978      	ldr	r0, [r7, #20]
 8006bb6:	f7ff ff8b 	bl	8006ad0 <xTimerGenericCommand>
 8006bba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	60fb      	str	r3, [r7, #12]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	6978      	ldr	r0, [r7, #20]
 8006bde:	4798      	blx	r3
}
 8006be0:	bf00      	nop
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	2000100c 	.word	0x2000100c

08006bec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bf4:	f107 0308 	add.w	r3, r7, #8
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 f857 	bl	8006cac <prvGetNextExpireTime>
 8006bfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	4619      	mov	r1, r3
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f803 	bl	8006c10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c0a:	f000 f8d5 	bl	8006db8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c0e:	e7f1      	b.n	8006bf4 <prvTimerTask+0x8>

08006c10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c1a:	f7ff fa3f 	bl	800609c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c1e:	f107 0308 	add.w	r3, r7, #8
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f866 	bl	8006cf4 <prvSampleTimeNow>
 8006c28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d130      	bne.n	8006c92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10a      	bne.n	8006c4c <prvProcessTimerOrBlockTask+0x3c>
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d806      	bhi.n	8006c4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c3e:	f7ff fa3b 	bl	80060b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c42:	68f9      	ldr	r1, [r7, #12]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff ff91 	bl	8006b6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c4a:	e024      	b.n	8006c96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d008      	beq.n	8006c64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c52:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <prvProcessTimerOrBlockTask+0x90>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	bf0c      	ite	eq
 8006c5c:	2301      	moveq	r3, #1
 8006c5e:	2300      	movne	r3, #0
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c64:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <prvProcessTimerOrBlockTask+0x94>)
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	4619      	mov	r1, r3
 8006c72:	f7fe ff8b 	bl	8005b8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c76:	f7ff fa1f 	bl	80060b8 <xTaskResumeAll>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10a      	bne.n	8006c96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c80:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <prvProcessTimerOrBlockTask+0x98>)
 8006c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	f3bf 8f6f 	isb	sy
}
 8006c90:	e001      	b.n	8006c96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c92:	f7ff fa11 	bl	80060b8 <xTaskResumeAll>
}
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20001010 	.word	0x20001010
 8006ca4:	20001014 	.word	0x20001014
 8006ca8:	e000ed04 	.word	0xe000ed04

08006cac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cb4:	4b0e      	ldr	r3, [pc, #56]	; (8006cf0 <prvGetNextExpireTime+0x44>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	bf0c      	ite	eq
 8006cbe:	2301      	moveq	r3, #1
 8006cc0:	2300      	movne	r3, #0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d105      	bne.n	8006cde <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cd2:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <prvGetNextExpireTime+0x44>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	e001      	b.n	8006ce2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	2000100c 	.word	0x2000100c

08006cf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006cfc:	f7ff fa7a 	bl	80061f4 <xTaskGetTickCount>
 8006d00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d02:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <prvSampleTimeNow+0x3c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d205      	bcs.n	8006d18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d0c:	f000 f908 	bl	8006f20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	e002      	b.n	8006d1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d1e:	4a04      	ldr	r2, [pc, #16]	; (8006d30 <prvSampleTimeNow+0x3c>)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d24:	68fb      	ldr	r3, [r7, #12]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	2000101c 	.word	0x2000101c

08006d34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d812      	bhi.n	8006d80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d302      	bcc.n	8006d6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	e01b      	b.n	8006da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d6e:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <prvInsertTimerInActiveList+0x7c>)
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3304      	adds	r3, #4
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f7fe f9f5 	bl	8005168 <vListInsert>
 8006d7e:	e012      	b.n	8006da6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d206      	bcs.n	8006d96 <prvInsertTimerInActiveList+0x62>
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d302      	bcc.n	8006d96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	e007      	b.n	8006da6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d96:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <prvInsertTimerInActiveList+0x80>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4610      	mov	r0, r2
 8006da2:	f7fe f9e1 	bl	8005168 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006da6:	697b      	ldr	r3, [r7, #20]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20001010 	.word	0x20001010
 8006db4:	2000100c 	.word	0x2000100c

08006db8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08e      	sub	sp, #56	; 0x38
 8006dbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dbe:	e09d      	b.n	8006efc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	da18      	bge.n	8006df8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006dc6:	1d3b      	adds	r3, r7, #4
 8006dc8:	3304      	adds	r3, #4
 8006dca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	61fb      	str	r3, [r7, #28]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dee:	6850      	ldr	r0, [r2, #4]
 8006df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006df2:	6892      	ldr	r2, [r2, #8]
 8006df4:	4611      	mov	r1, r2
 8006df6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	db7d      	blt.n	8006efa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d004      	beq.n	8006e14 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe f9e2 	bl	80051d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e14:	463b      	mov	r3, r7
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff ff6c 	bl	8006cf4 <prvSampleTimeNow>
 8006e1c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b09      	cmp	r3, #9
 8006e22:	d86b      	bhi.n	8006efc <prvProcessReceivedCommands+0x144>
 8006e24:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <prvProcessReceivedCommands+0x74>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e55 	.word	0x08006e55
 8006e34:	08006e55 	.word	0x08006e55
 8006e38:	08006efd 	.word	0x08006efd
 8006e3c:	08006eb1 	.word	0x08006eb1
 8006e40:	08006ee9 	.word	0x08006ee9
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e55 	.word	0x08006e55
 8006e4c:	08006efd 	.word	0x08006efd
 8006e50:	08006eb1 	.word	0x08006eb1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	18d1      	adds	r1, r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e62:	f7ff ff67 	bl	8006d34 <prvInsertTimerInActiveList>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d047      	beq.n	8006efc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e72:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d13f      	bne.n	8006efc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	441a      	add	r2, r3
 8006e84:	2300      	movs	r3, #0
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e8e:	f7ff fe1f 	bl	8006ad0 <xTimerGenericCommand>
 8006e92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d130      	bne.n	8006efc <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	61bb      	str	r3, [r7, #24]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	617b      	str	r3, [r7, #20]
}
 8006ed0:	bf00      	nop
 8006ed2:	e7fe      	b.n	8006ed2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	18d1      	adds	r1, r2, r3
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ee2:	f7ff ff27 	bl	8006d34 <prvInsertTimerInActiveList>
					break;
 8006ee6:	e009      	b.n	8006efc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ef4:	f000 fb6e 	bl	80075d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ef8:	e000      	b.n	8006efc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006efa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006efc:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <prvProcessReceivedCommands+0x164>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	1d39      	adds	r1, r7, #4
 8006f02:	2200      	movs	r2, #0
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe fc29 	bl	800575c <xQueueReceive>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f47f af57 	bne.w	8006dc0 <prvProcessReceivedCommands+0x8>
	}
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	3730      	adds	r7, #48	; 0x30
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20001014 	.word	0x20001014

08006f20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f26:	e045      	b.n	8006fb4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f28:	4b2c      	ldr	r3, [pc, #176]	; (8006fdc <prvSwitchTimerLists+0xbc>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f32:	4b2a      	ldr	r3, [pc, #168]	; (8006fdc <prvSwitchTimerLists+0xbc>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3304      	adds	r3, #4
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe f949 	bl	80051d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d12e      	bne.n	8006fb4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d90e      	bls.n	8006f86 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f74:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <prvSwitchTimerLists+0xbc>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	f7fe f8f2 	bl	8005168 <vListInsert>
 8006f84:	e016      	b.n	8006fb4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f86:	2300      	movs	r3, #0
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	2100      	movs	r1, #0
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff fd9d 	bl	8006ad0 <xTimerGenericCommand>
 8006f96:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10a      	bne.n	8006fb4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	603b      	str	r3, [r7, #0]
}
 8006fb0:	bf00      	nop
 8006fb2:	e7fe      	b.n	8006fb2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fb4:	4b09      	ldr	r3, [pc, #36]	; (8006fdc <prvSwitchTimerLists+0xbc>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1b4      	bne.n	8006f28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006fbe:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <prvSwitchTimerLists+0xbc>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006fc4:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <prvSwitchTimerLists+0xc0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a04      	ldr	r2, [pc, #16]	; (8006fdc <prvSwitchTimerLists+0xbc>)
 8006fca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006fcc:	4a04      	ldr	r2, [pc, #16]	; (8006fe0 <prvSwitchTimerLists+0xc0>)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	6013      	str	r3, [r2, #0]
}
 8006fd2:	bf00      	nop
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	2000100c 	.word	0x2000100c
 8006fe0:	20001010 	.word	0x20001010

08006fe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006fea:	f000 f92f 	bl	800724c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <prvCheckForValidListAndQueue+0x60>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d120      	bne.n	8007038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ff6:	4814      	ldr	r0, [pc, #80]	; (8007048 <prvCheckForValidListAndQueue+0x64>)
 8006ff8:	f7fe f868 	bl	80050cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ffc:	4813      	ldr	r0, [pc, #76]	; (800704c <prvCheckForValidListAndQueue+0x68>)
 8006ffe:	f7fe f865 	bl	80050cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007002:	4b13      	ldr	r3, [pc, #76]	; (8007050 <prvCheckForValidListAndQueue+0x6c>)
 8007004:	4a10      	ldr	r2, [pc, #64]	; (8007048 <prvCheckForValidListAndQueue+0x64>)
 8007006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007008:	4b12      	ldr	r3, [pc, #72]	; (8007054 <prvCheckForValidListAndQueue+0x70>)
 800700a:	4a10      	ldr	r2, [pc, #64]	; (800704c <prvCheckForValidListAndQueue+0x68>)
 800700c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800700e:	2300      	movs	r3, #0
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	4b11      	ldr	r3, [pc, #68]	; (8007058 <prvCheckForValidListAndQueue+0x74>)
 8007014:	4a11      	ldr	r2, [pc, #68]	; (800705c <prvCheckForValidListAndQueue+0x78>)
 8007016:	2110      	movs	r1, #16
 8007018:	200a      	movs	r0, #10
 800701a:	f7fe f96f 	bl	80052fc <xQueueGenericCreateStatic>
 800701e:	4603      	mov	r3, r0
 8007020:	4a08      	ldr	r2, [pc, #32]	; (8007044 <prvCheckForValidListAndQueue+0x60>)
 8007022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007024:	4b07      	ldr	r3, [pc, #28]	; (8007044 <prvCheckForValidListAndQueue+0x60>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <prvCheckForValidListAndQueue+0x60>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	490b      	ldr	r1, [pc, #44]	; (8007060 <prvCheckForValidListAndQueue+0x7c>)
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe fd82 	bl	8005b3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007038:	f000 f938 	bl	80072ac <vPortExitCritical>
}
 800703c:	bf00      	nop
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20001014 	.word	0x20001014
 8007048:	20000fe4 	.word	0x20000fe4
 800704c:	20000ff8 	.word	0x20000ff8
 8007050:	2000100c 	.word	0x2000100c
 8007054:	20001010 	.word	0x20001010
 8007058:	200010c0 	.word	0x200010c0
 800705c:	20001020 	.word	0x20001020
 8007060:	0800c6f8 	.word	0x0800c6f8

08007064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3b04      	subs	r3, #4
 8007074:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800707c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3b04      	subs	r3, #4
 8007082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f023 0201 	bic.w	r2, r3, #1
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3b04      	subs	r3, #4
 8007092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007094:	4a08      	ldr	r2, [pc, #32]	; (80070b8 <pxPortInitialiseStack+0x54>)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3b14      	subs	r3, #20
 800709e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3b20      	subs	r3, #32
 80070aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80070ac:	68fb      	ldr	r3, [r7, #12]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr
 80070b8:	080070bd 	.word	0x080070bd

080070bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070c6:	4b12      	ldr	r3, [pc, #72]	; (8007110 <prvTaskExitError+0x54>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d00a      	beq.n	80070e6 <prvTaskExitError+0x2a>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <prvTaskExitError+0x28>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	60bb      	str	r3, [r7, #8]
}
 80070f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070fa:	bf00      	nop
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0fc      	beq.n	80070fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	bc80      	pop	{r7}
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	20000028 	.word	0x20000028
	...

08007120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007120:	4b07      	ldr	r3, [pc, #28]	; (8007140 <pxCurrentTCBConst2>)
 8007122:	6819      	ldr	r1, [r3, #0]
 8007124:	6808      	ldr	r0, [r1, #0]
 8007126:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800712a:	f380 8809 	msr	PSP, r0
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f04f 0000 	mov.w	r0, #0
 8007136:	f380 8811 	msr	BASEPRI, r0
 800713a:	f04e 0e0d 	orr.w	lr, lr, #13
 800713e:	4770      	bx	lr

08007140 <pxCurrentTCBConst2>:
 8007140:	20000ae4 	.word	0x20000ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop

08007148 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007148:	4806      	ldr	r0, [pc, #24]	; (8007164 <prvPortStartFirstTask+0x1c>)
 800714a:	6800      	ldr	r0, [r0, #0]
 800714c:	6800      	ldr	r0, [r0, #0]
 800714e:	f380 8808 	msr	MSP, r0
 8007152:	b662      	cpsie	i
 8007154:	b661      	cpsie	f
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	df00      	svc	0
 8007160:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007162:	bf00      	nop
 8007164:	e000ed08 	.word	0xe000ed08

08007168 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800716e:	4b32      	ldr	r3, [pc, #200]	; (8007238 <xPortStartScheduler+0xd0>)
 8007170:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	22ff      	movs	r2, #255	; 0xff
 800717e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007190:	b2da      	uxtb	r2, r3
 8007192:	4b2a      	ldr	r3, [pc, #168]	; (800723c <xPortStartScheduler+0xd4>)
 8007194:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007196:	4b2a      	ldr	r3, [pc, #168]	; (8007240 <xPortStartScheduler+0xd8>)
 8007198:	2207      	movs	r2, #7
 800719a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800719c:	e009      	b.n	80071b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800719e:	4b28      	ldr	r3, [pc, #160]	; (8007240 <xPortStartScheduler+0xd8>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	4a26      	ldr	r2, [pc, #152]	; (8007240 <xPortStartScheduler+0xd8>)
 80071a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071b2:	78fb      	ldrb	r3, [r7, #3]
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ba:	2b80      	cmp	r3, #128	; 0x80
 80071bc:	d0ef      	beq.n	800719e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071be:	4b20      	ldr	r3, [pc, #128]	; (8007240 <xPortStartScheduler+0xd8>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f1c3 0307 	rsb	r3, r3, #7
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d00a      	beq.n	80071e0 <xPortStartScheduler+0x78>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	60bb      	str	r3, [r7, #8]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071e0:	4b17      	ldr	r3, [pc, #92]	; (8007240 <xPortStartScheduler+0xd8>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	4a16      	ldr	r2, [pc, #88]	; (8007240 <xPortStartScheduler+0xd8>)
 80071e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071ea:	4b15      	ldr	r3, [pc, #84]	; (8007240 <xPortStartScheduler+0xd8>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071f2:	4a13      	ldr	r2, [pc, #76]	; (8007240 <xPortStartScheduler+0xd8>)
 80071f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071fe:	4b11      	ldr	r3, [pc, #68]	; (8007244 <xPortStartScheduler+0xdc>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a10      	ldr	r2, [pc, #64]	; (8007244 <xPortStartScheduler+0xdc>)
 8007204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007208:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800720a:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <xPortStartScheduler+0xdc>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a0d      	ldr	r2, [pc, #52]	; (8007244 <xPortStartScheduler+0xdc>)
 8007210:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007214:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007216:	f000 f8b9 	bl	800738c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800721a:	4b0b      	ldr	r3, [pc, #44]	; (8007248 <xPortStartScheduler+0xe0>)
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007220:	f7ff ff92 	bl	8007148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007224:	f7ff f8b2 	bl	800638c <vTaskSwitchContext>
	prvTaskExitError();
 8007228:	f7ff ff48 	bl	80070bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	e000e400 	.word	0xe000e400
 800723c:	20001110 	.word	0x20001110
 8007240:	20001114 	.word	0x20001114
 8007244:	e000ed20 	.word	0xe000ed20
 8007248:	20000028 	.word	0x20000028

0800724c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	607b      	str	r3, [r7, #4]
}
 8007264:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007266:	4b0f      	ldr	r3, [pc, #60]	; (80072a4 <vPortEnterCritical+0x58>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3301      	adds	r3, #1
 800726c:	4a0d      	ldr	r2, [pc, #52]	; (80072a4 <vPortEnterCritical+0x58>)
 800726e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007270:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <vPortEnterCritical+0x58>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d10f      	bne.n	8007298 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <vPortEnterCritical+0x5c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <vPortEnterCritical+0x4c>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	603b      	str	r3, [r7, #0]
}
 8007294:	bf00      	nop
 8007296:	e7fe      	b.n	8007296 <vPortEnterCritical+0x4a>
	}
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20000028 	.word	0x20000028
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072b2:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <vPortExitCritical+0x4c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10a      	bne.n	80072d0 <vPortExitCritical+0x24>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	607b      	str	r3, [r7, #4]
}
 80072cc:	bf00      	nop
 80072ce:	e7fe      	b.n	80072ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072d0:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <vPortExitCritical+0x4c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	4a08      	ldr	r2, [pc, #32]	; (80072f8 <vPortExitCritical+0x4c>)
 80072d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <vPortExitCritical+0x4c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d105      	bne.n	80072ee <vPortExitCritical+0x42>
 80072e2:	2300      	movs	r3, #0
 80072e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	f383 8811 	msr	BASEPRI, r3
}
 80072ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr
 80072f8:	20000028 	.word	0x20000028
 80072fc:	00000000 	.word	0x00000000

08007300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007300:	f3ef 8009 	mrs	r0, PSP
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	4b0d      	ldr	r3, [pc, #52]	; (8007340 <pxCurrentTCBConst>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007310:	6010      	str	r0, [r2, #0]
 8007312:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007316:	f04f 0050 	mov.w	r0, #80	; 0x50
 800731a:	f380 8811 	msr	BASEPRI, r0
 800731e:	f7ff f835 	bl	800638c <vTaskSwitchContext>
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f380 8811 	msr	BASEPRI, r0
 800732a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800732e:	6819      	ldr	r1, [r3, #0]
 8007330:	6808      	ldr	r0, [r1, #0]
 8007332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007336:	f380 8809 	msr	PSP, r0
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	4770      	bx	lr

08007340 <pxCurrentTCBConst>:
 8007340:	20000ae4 	.word	0x20000ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop

08007348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	607b      	str	r3, [r7, #4]
}
 8007360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007362:	f7fe ff55 	bl	8006210 <xTaskIncrementTick>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800736c:	4b06      	ldr	r3, [pc, #24]	; (8007388 <xPortSysTickHandler+0x40>)
 800736e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	2300      	movs	r3, #0
 8007376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f383 8811 	msr	BASEPRI, r3
}
 800737e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007390:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <vPortSetupTimerInterrupt+0x30>)
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007396:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <vPortSetupTimerInterrupt+0x34>)
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800739c:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <vPortSetupTimerInterrupt+0x38>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a09      	ldr	r2, [pc, #36]	; (80073c8 <vPortSetupTimerInterrupt+0x3c>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	099b      	lsrs	r3, r3, #6
 80073a8:	4a08      	ldr	r2, [pc, #32]	; (80073cc <vPortSetupTimerInterrupt+0x40>)
 80073aa:	3b01      	subs	r3, #1
 80073ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073ae:	4b03      	ldr	r3, [pc, #12]	; (80073bc <vPortSetupTimerInterrupt+0x30>)
 80073b0:	2207      	movs	r2, #7
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr
 80073bc:	e000e010 	.word	0xe000e010
 80073c0:	e000e018 	.word	0xe000e018
 80073c4:	20000000 	.word	0x20000000
 80073c8:	10624dd3 	.word	0x10624dd3
 80073cc:	e000e014 	.word	0xe000e014

080073d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073d6:	f3ef 8305 	mrs	r3, IPSR
 80073da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b0f      	cmp	r3, #15
 80073e0:	d914      	bls.n	800740c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073e2:	4a16      	ldr	r2, [pc, #88]	; (800743c <vPortValidateInterruptPriority+0x6c>)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073ec:	4b14      	ldr	r3, [pc, #80]	; (8007440 <vPortValidateInterruptPriority+0x70>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	7afa      	ldrb	r2, [r7, #11]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d20a      	bcs.n	800740c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	607b      	str	r3, [r7, #4]
}
 8007408:	bf00      	nop
 800740a:	e7fe      	b.n	800740a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800740c:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <vPortValidateInterruptPriority+0x74>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007414:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <vPortValidateInterruptPriority+0x78>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d90a      	bls.n	8007432 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	603b      	str	r3, [r7, #0]
}
 800742e:	bf00      	nop
 8007430:	e7fe      	b.n	8007430 <vPortValidateInterruptPriority+0x60>
	}
 8007432:	bf00      	nop
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr
 800743c:	e000e3f0 	.word	0xe000e3f0
 8007440:	20001110 	.word	0x20001110
 8007444:	e000ed0c 	.word	0xe000ed0c
 8007448:	20001114 	.word	0x20001114

0800744c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08a      	sub	sp, #40	; 0x28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007458:	f7fe fe20 	bl	800609c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800745c:	4b58      	ldr	r3, [pc, #352]	; (80075c0 <pvPortMalloc+0x174>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007464:	f000 f910 	bl	8007688 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007468:	4b56      	ldr	r3, [pc, #344]	; (80075c4 <pvPortMalloc+0x178>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4013      	ands	r3, r2
 8007470:	2b00      	cmp	r3, #0
 8007472:	f040 808e 	bne.w	8007592 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01d      	beq.n	80074b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800747c:	2208      	movs	r2, #8
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4413      	add	r3, r2
 8007482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	2b00      	cmp	r3, #0
 800748c:	d014      	beq.n	80074b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f023 0307 	bic.w	r3, r3, #7
 8007494:	3308      	adds	r3, #8
 8007496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <pvPortMalloc+0x6c>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	617b      	str	r3, [r7, #20]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d069      	beq.n	8007592 <pvPortMalloc+0x146>
 80074be:	4b42      	ldr	r3, [pc, #264]	; (80075c8 <pvPortMalloc+0x17c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d864      	bhi.n	8007592 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074c8:	4b40      	ldr	r3, [pc, #256]	; (80075cc <pvPortMalloc+0x180>)
 80074ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074cc:	4b3f      	ldr	r3, [pc, #252]	; (80075cc <pvPortMalloc+0x180>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074d2:	e004      	b.n	80074de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d903      	bls.n	80074f0 <pvPortMalloc+0xa4>
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f1      	bne.n	80074d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074f0:	4b33      	ldr	r3, [pc, #204]	; (80075c0 <pvPortMalloc+0x174>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d04b      	beq.n	8007592 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2208      	movs	r2, #8
 8007500:	4413      	add	r3, r2
 8007502:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	1ad2      	subs	r2, r2, r3
 8007514:	2308      	movs	r3, #8
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	429a      	cmp	r2, r3
 800751a:	d91f      	bls.n	800755c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800751c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4413      	add	r3, r2
 8007522:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <pvPortMalloc+0xf8>
	__asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	613b      	str	r3, [r7, #16]
}
 8007540:	bf00      	nop
 8007542:	e7fe      	b.n	8007542 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	1ad2      	subs	r2, r2, r3
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007556:	69b8      	ldr	r0, [r7, #24]
 8007558:	f000 f8f8 	bl	800774c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800755c:	4b1a      	ldr	r3, [pc, #104]	; (80075c8 <pvPortMalloc+0x17c>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	4a18      	ldr	r2, [pc, #96]	; (80075c8 <pvPortMalloc+0x17c>)
 8007568:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800756a:	4b17      	ldr	r3, [pc, #92]	; (80075c8 <pvPortMalloc+0x17c>)
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	4b18      	ldr	r3, [pc, #96]	; (80075d0 <pvPortMalloc+0x184>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d203      	bcs.n	800757e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007576:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <pvPortMalloc+0x17c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a15      	ldr	r2, [pc, #84]	; (80075d0 <pvPortMalloc+0x184>)
 800757c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <pvPortMalloc+0x178>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	431a      	orrs	r2, r3
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	2200      	movs	r2, #0
 8007590:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007592:	f7fe fd91 	bl	80060b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00a      	beq.n	80075b6 <pvPortMalloc+0x16a>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	60fb      	str	r3, [r7, #12]
}
 80075b2:	bf00      	nop
 80075b4:	e7fe      	b.n	80075b4 <pvPortMalloc+0x168>
	return pvReturn;
 80075b6:	69fb      	ldr	r3, [r7, #28]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3728      	adds	r7, #40	; 0x28
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20001d20 	.word	0x20001d20
 80075c4:	20001d2c 	.word	0x20001d2c
 80075c8:	20001d24 	.word	0x20001d24
 80075cc:	20001d18 	.word	0x20001d18
 80075d0:	20001d28 	.word	0x20001d28

080075d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d048      	beq.n	8007678 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075e6:	2308      	movs	r3, #8
 80075e8:	425b      	negs	r3, r3
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4413      	add	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	4b21      	ldr	r3, [pc, #132]	; (8007680 <vPortFree+0xac>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4013      	ands	r3, r2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <vPortFree+0x44>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60fb      	str	r3, [r7, #12]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <vPortFree+0x62>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	60bb      	str	r3, [r7, #8]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	4b11      	ldr	r3, [pc, #68]	; (8007680 <vPortFree+0xac>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4013      	ands	r3, r2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d019      	beq.n	8007678 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d115      	bne.n	8007678 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <vPortFree+0xac>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	43db      	mvns	r3, r3
 8007656:	401a      	ands	r2, r3
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800765c:	f7fe fd1e 	bl	800609c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	4b07      	ldr	r3, [pc, #28]	; (8007684 <vPortFree+0xb0>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4413      	add	r3, r2
 800766a:	4a06      	ldr	r2, [pc, #24]	; (8007684 <vPortFree+0xb0>)
 800766c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800766e:	6938      	ldr	r0, [r7, #16]
 8007670:	f000 f86c 	bl	800774c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007674:	f7fe fd20 	bl	80060b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007678:	bf00      	nop
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20001d2c 	.word	0x20001d2c
 8007684:	20001d24 	.word	0x20001d24

08007688 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800768e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007692:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007694:	4b27      	ldr	r3, [pc, #156]	; (8007734 <prvHeapInit+0xac>)
 8007696:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00c      	beq.n	80076bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3307      	adds	r3, #7
 80076a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0307 	bic.w	r3, r3, #7
 80076ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	4a1f      	ldr	r2, [pc, #124]	; (8007734 <prvHeapInit+0xac>)
 80076b8:	4413      	add	r3, r2
 80076ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076c0:	4a1d      	ldr	r2, [pc, #116]	; (8007738 <prvHeapInit+0xb0>)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076c6:	4b1c      	ldr	r3, [pc, #112]	; (8007738 <prvHeapInit+0xb0>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	4413      	add	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076d4:	2208      	movs	r2, #8
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	1a9b      	subs	r3, r3, r2
 80076da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0307 	bic.w	r3, r3, #7
 80076e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4a15      	ldr	r2, [pc, #84]	; (800773c <prvHeapInit+0xb4>)
 80076e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076ea:	4b14      	ldr	r3, [pc, #80]	; (800773c <prvHeapInit+0xb4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2200      	movs	r2, #0
 80076f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <prvHeapInit+0xb4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2200      	movs	r2, #0
 80076f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	1ad2      	subs	r2, r2, r3
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007708:	4b0c      	ldr	r3, [pc, #48]	; (800773c <prvHeapInit+0xb4>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4a0a      	ldr	r2, [pc, #40]	; (8007740 <prvHeapInit+0xb8>)
 8007716:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	4a09      	ldr	r2, [pc, #36]	; (8007744 <prvHeapInit+0xbc>)
 800771e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007720:	4b09      	ldr	r3, [pc, #36]	; (8007748 <prvHeapInit+0xc0>)
 8007722:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007726:	601a      	str	r2, [r3, #0]
}
 8007728:	bf00      	nop
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	bc80      	pop	{r7}
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	20001118 	.word	0x20001118
 8007738:	20001d18 	.word	0x20001d18
 800773c:	20001d20 	.word	0x20001d20
 8007740:	20001d28 	.word	0x20001d28
 8007744:	20001d24 	.word	0x20001d24
 8007748:	20001d2c 	.word	0x20001d2c

0800774c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007754:	4b27      	ldr	r3, [pc, #156]	; (80077f4 <prvInsertBlockIntoFreeList+0xa8>)
 8007756:	60fb      	str	r3, [r7, #12]
 8007758:	e002      	b.n	8007760 <prvInsertBlockIntoFreeList+0x14>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	429a      	cmp	r2, r3
 8007768:	d8f7      	bhi.n	800775a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	4413      	add	r3, r2
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	429a      	cmp	r2, r3
 800777a:	d108      	bne.n	800778e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	441a      	add	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	441a      	add	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d118      	bne.n	80077d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <prvInsertBlockIntoFreeList+0xac>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d00d      	beq.n	80077ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	441a      	add	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	e008      	b.n	80077dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077ca:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <prvInsertBlockIntoFreeList+0xac>)
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	e003      	b.n	80077dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d002      	beq.n	80077ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ea:	bf00      	nop
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr
 80077f4:	20001d18 	.word	0x20001d18
 80077f8:	20001d20 	.word	0x20001d20

080077fc <__errno>:
 80077fc:	4b01      	ldr	r3, [pc, #4]	; (8007804 <__errno+0x8>)
 80077fe:	6818      	ldr	r0, [r3, #0]
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	2000002c 	.word	0x2000002c

08007808 <std>:
 8007808:	2300      	movs	r3, #0
 800780a:	b510      	push	{r4, lr}
 800780c:	4604      	mov	r4, r0
 800780e:	e9c0 3300 	strd	r3, r3, [r0]
 8007812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007816:	6083      	str	r3, [r0, #8]
 8007818:	8181      	strh	r1, [r0, #12]
 800781a:	6643      	str	r3, [r0, #100]	; 0x64
 800781c:	81c2      	strh	r2, [r0, #14]
 800781e:	6183      	str	r3, [r0, #24]
 8007820:	4619      	mov	r1, r3
 8007822:	2208      	movs	r2, #8
 8007824:	305c      	adds	r0, #92	; 0x5c
 8007826:	f000 f92b 	bl	8007a80 <memset>
 800782a:	4b05      	ldr	r3, [pc, #20]	; (8007840 <std+0x38>)
 800782c:	6224      	str	r4, [r4, #32]
 800782e:	6263      	str	r3, [r4, #36]	; 0x24
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <std+0x3c>)
 8007832:	62a3      	str	r3, [r4, #40]	; 0x28
 8007834:	4b04      	ldr	r3, [pc, #16]	; (8007848 <std+0x40>)
 8007836:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007838:	4b04      	ldr	r3, [pc, #16]	; (800784c <std+0x44>)
 800783a:	6323      	str	r3, [r4, #48]	; 0x30
 800783c:	bd10      	pop	{r4, pc}
 800783e:	bf00      	nop
 8007840:	08008b7d 	.word	0x08008b7d
 8007844:	08008b9f 	.word	0x08008b9f
 8007848:	08008bd7 	.word	0x08008bd7
 800784c:	08008bfb 	.word	0x08008bfb

08007850 <_cleanup_r>:
 8007850:	4901      	ldr	r1, [pc, #4]	; (8007858 <_cleanup_r+0x8>)
 8007852:	f000 b8af 	b.w	80079b4 <_fwalk_reent>
 8007856:	bf00      	nop
 8007858:	0800a8e1 	.word	0x0800a8e1

0800785c <__sfmoreglue>:
 800785c:	2268      	movs	r2, #104	; 0x68
 800785e:	b570      	push	{r4, r5, r6, lr}
 8007860:	1e4d      	subs	r5, r1, #1
 8007862:	4355      	muls	r5, r2
 8007864:	460e      	mov	r6, r1
 8007866:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800786a:	f000 f979 	bl	8007b60 <_malloc_r>
 800786e:	4604      	mov	r4, r0
 8007870:	b140      	cbz	r0, 8007884 <__sfmoreglue+0x28>
 8007872:	2100      	movs	r1, #0
 8007874:	e9c0 1600 	strd	r1, r6, [r0]
 8007878:	300c      	adds	r0, #12
 800787a:	60a0      	str	r0, [r4, #8]
 800787c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007880:	f000 f8fe 	bl	8007a80 <memset>
 8007884:	4620      	mov	r0, r4
 8007886:	bd70      	pop	{r4, r5, r6, pc}

08007888 <__sfp_lock_acquire>:
 8007888:	4801      	ldr	r0, [pc, #4]	; (8007890 <__sfp_lock_acquire+0x8>)
 800788a:	f000 b8d8 	b.w	8007a3e <__retarget_lock_acquire_recursive>
 800788e:	bf00      	nop
 8007890:	20001d31 	.word	0x20001d31

08007894 <__sfp_lock_release>:
 8007894:	4801      	ldr	r0, [pc, #4]	; (800789c <__sfp_lock_release+0x8>)
 8007896:	f000 b8d3 	b.w	8007a40 <__retarget_lock_release_recursive>
 800789a:	bf00      	nop
 800789c:	20001d31 	.word	0x20001d31

080078a0 <__sinit_lock_acquire>:
 80078a0:	4801      	ldr	r0, [pc, #4]	; (80078a8 <__sinit_lock_acquire+0x8>)
 80078a2:	f000 b8cc 	b.w	8007a3e <__retarget_lock_acquire_recursive>
 80078a6:	bf00      	nop
 80078a8:	20001d32 	.word	0x20001d32

080078ac <__sinit_lock_release>:
 80078ac:	4801      	ldr	r0, [pc, #4]	; (80078b4 <__sinit_lock_release+0x8>)
 80078ae:	f000 b8c7 	b.w	8007a40 <__retarget_lock_release_recursive>
 80078b2:	bf00      	nop
 80078b4:	20001d32 	.word	0x20001d32

080078b8 <__sinit>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	4604      	mov	r4, r0
 80078bc:	f7ff fff0 	bl	80078a0 <__sinit_lock_acquire>
 80078c0:	69a3      	ldr	r3, [r4, #24]
 80078c2:	b11b      	cbz	r3, 80078cc <__sinit+0x14>
 80078c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c8:	f7ff bff0 	b.w	80078ac <__sinit_lock_release>
 80078cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078d0:	6523      	str	r3, [r4, #80]	; 0x50
 80078d2:	4b13      	ldr	r3, [pc, #76]	; (8007920 <__sinit+0x68>)
 80078d4:	4a13      	ldr	r2, [pc, #76]	; (8007924 <__sinit+0x6c>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80078da:	42a3      	cmp	r3, r4
 80078dc:	bf08      	it	eq
 80078de:	2301      	moveq	r3, #1
 80078e0:	4620      	mov	r0, r4
 80078e2:	bf08      	it	eq
 80078e4:	61a3      	streq	r3, [r4, #24]
 80078e6:	f000 f81f 	bl	8007928 <__sfp>
 80078ea:	6060      	str	r0, [r4, #4]
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 f81b 	bl	8007928 <__sfp>
 80078f2:	60a0      	str	r0, [r4, #8]
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 f817 	bl	8007928 <__sfp>
 80078fa:	2200      	movs	r2, #0
 80078fc:	2104      	movs	r1, #4
 80078fe:	60e0      	str	r0, [r4, #12]
 8007900:	6860      	ldr	r0, [r4, #4]
 8007902:	f7ff ff81 	bl	8007808 <std>
 8007906:	2201      	movs	r2, #1
 8007908:	2109      	movs	r1, #9
 800790a:	68a0      	ldr	r0, [r4, #8]
 800790c:	f7ff ff7c 	bl	8007808 <std>
 8007910:	2202      	movs	r2, #2
 8007912:	2112      	movs	r1, #18
 8007914:	68e0      	ldr	r0, [r4, #12]
 8007916:	f7ff ff77 	bl	8007808 <std>
 800791a:	2301      	movs	r3, #1
 800791c:	61a3      	str	r3, [r4, #24]
 800791e:	e7d1      	b.n	80078c4 <__sinit+0xc>
 8007920:	080114b4 	.word	0x080114b4
 8007924:	08007851 	.word	0x08007851

08007928 <__sfp>:
 8007928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792a:	4607      	mov	r7, r0
 800792c:	f7ff ffac 	bl	8007888 <__sfp_lock_acquire>
 8007930:	4b1e      	ldr	r3, [pc, #120]	; (80079ac <__sfp+0x84>)
 8007932:	681e      	ldr	r6, [r3, #0]
 8007934:	69b3      	ldr	r3, [r6, #24]
 8007936:	b913      	cbnz	r3, 800793e <__sfp+0x16>
 8007938:	4630      	mov	r0, r6
 800793a:	f7ff ffbd 	bl	80078b8 <__sinit>
 800793e:	3648      	adds	r6, #72	; 0x48
 8007940:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007944:	3b01      	subs	r3, #1
 8007946:	d503      	bpl.n	8007950 <__sfp+0x28>
 8007948:	6833      	ldr	r3, [r6, #0]
 800794a:	b30b      	cbz	r3, 8007990 <__sfp+0x68>
 800794c:	6836      	ldr	r6, [r6, #0]
 800794e:	e7f7      	b.n	8007940 <__sfp+0x18>
 8007950:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007954:	b9d5      	cbnz	r5, 800798c <__sfp+0x64>
 8007956:	4b16      	ldr	r3, [pc, #88]	; (80079b0 <__sfp+0x88>)
 8007958:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800795c:	60e3      	str	r3, [r4, #12]
 800795e:	6665      	str	r5, [r4, #100]	; 0x64
 8007960:	f000 f86c 	bl	8007a3c <__retarget_lock_init_recursive>
 8007964:	f7ff ff96 	bl	8007894 <__sfp_lock_release>
 8007968:	2208      	movs	r2, #8
 800796a:	4629      	mov	r1, r5
 800796c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007970:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007974:	6025      	str	r5, [r4, #0]
 8007976:	61a5      	str	r5, [r4, #24]
 8007978:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800797c:	f000 f880 	bl	8007a80 <memset>
 8007980:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007984:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007988:	4620      	mov	r0, r4
 800798a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800798c:	3468      	adds	r4, #104	; 0x68
 800798e:	e7d9      	b.n	8007944 <__sfp+0x1c>
 8007990:	2104      	movs	r1, #4
 8007992:	4638      	mov	r0, r7
 8007994:	f7ff ff62 	bl	800785c <__sfmoreglue>
 8007998:	4604      	mov	r4, r0
 800799a:	6030      	str	r0, [r6, #0]
 800799c:	2800      	cmp	r0, #0
 800799e:	d1d5      	bne.n	800794c <__sfp+0x24>
 80079a0:	f7ff ff78 	bl	8007894 <__sfp_lock_release>
 80079a4:	230c      	movs	r3, #12
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	e7ee      	b.n	8007988 <__sfp+0x60>
 80079aa:	bf00      	nop
 80079ac:	080114b4 	.word	0x080114b4
 80079b0:	ffff0001 	.word	0xffff0001

080079b4 <_fwalk_reent>:
 80079b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b8:	4606      	mov	r6, r0
 80079ba:	4688      	mov	r8, r1
 80079bc:	2700      	movs	r7, #0
 80079be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079c6:	f1b9 0901 	subs.w	r9, r9, #1
 80079ca:	d505      	bpl.n	80079d8 <_fwalk_reent+0x24>
 80079cc:	6824      	ldr	r4, [r4, #0]
 80079ce:	2c00      	cmp	r4, #0
 80079d0:	d1f7      	bne.n	80079c2 <_fwalk_reent+0xe>
 80079d2:	4638      	mov	r0, r7
 80079d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d8:	89ab      	ldrh	r3, [r5, #12]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d907      	bls.n	80079ee <_fwalk_reent+0x3a>
 80079de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079e2:	3301      	adds	r3, #1
 80079e4:	d003      	beq.n	80079ee <_fwalk_reent+0x3a>
 80079e6:	4629      	mov	r1, r5
 80079e8:	4630      	mov	r0, r6
 80079ea:	47c0      	blx	r8
 80079ec:	4307      	orrs	r7, r0
 80079ee:	3568      	adds	r5, #104	; 0x68
 80079f0:	e7e9      	b.n	80079c6 <_fwalk_reent+0x12>
	...

080079f4 <__libc_init_array>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	2600      	movs	r6, #0
 80079f8:	4d0c      	ldr	r5, [pc, #48]	; (8007a2c <__libc_init_array+0x38>)
 80079fa:	4c0d      	ldr	r4, [pc, #52]	; (8007a30 <__libc_init_array+0x3c>)
 80079fc:	1b64      	subs	r4, r4, r5
 80079fe:	10a4      	asrs	r4, r4, #2
 8007a00:	42a6      	cmp	r6, r4
 8007a02:	d109      	bne.n	8007a18 <__libc_init_array+0x24>
 8007a04:	f004 fc5e 	bl	800c2c4 <_init>
 8007a08:	2600      	movs	r6, #0
 8007a0a:	4d0a      	ldr	r5, [pc, #40]	; (8007a34 <__libc_init_array+0x40>)
 8007a0c:	4c0a      	ldr	r4, [pc, #40]	; (8007a38 <__libc_init_array+0x44>)
 8007a0e:	1b64      	subs	r4, r4, r5
 8007a10:	10a4      	asrs	r4, r4, #2
 8007a12:	42a6      	cmp	r6, r4
 8007a14:	d105      	bne.n	8007a22 <__libc_init_array+0x2e>
 8007a16:	bd70      	pop	{r4, r5, r6, pc}
 8007a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1c:	4798      	blx	r3
 8007a1e:	3601      	adds	r6, #1
 8007a20:	e7ee      	b.n	8007a00 <__libc_init_array+0xc>
 8007a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a26:	4798      	blx	r3
 8007a28:	3601      	adds	r6, #1
 8007a2a:	e7f2      	b.n	8007a12 <__libc_init_array+0x1e>
 8007a2c:	080118fc 	.word	0x080118fc
 8007a30:	080118fc 	.word	0x080118fc
 8007a34:	080118fc 	.word	0x080118fc
 8007a38:	08011900 	.word	0x08011900

08007a3c <__retarget_lock_init_recursive>:
 8007a3c:	4770      	bx	lr

08007a3e <__retarget_lock_acquire_recursive>:
 8007a3e:	4770      	bx	lr

08007a40 <__retarget_lock_release_recursive>:
 8007a40:	4770      	bx	lr
	...

08007a44 <malloc>:
 8007a44:	4b02      	ldr	r3, [pc, #8]	; (8007a50 <malloc+0xc>)
 8007a46:	4601      	mov	r1, r0
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	f000 b889 	b.w	8007b60 <_malloc_r>
 8007a4e:	bf00      	nop
 8007a50:	2000002c 	.word	0x2000002c

08007a54 <free>:
 8007a54:	4b02      	ldr	r3, [pc, #8]	; (8007a60 <free+0xc>)
 8007a56:	4601      	mov	r1, r0
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	f000 b819 	b.w	8007a90 <_free_r>
 8007a5e:	bf00      	nop
 8007a60:	2000002c 	.word	0x2000002c

08007a64 <memcpy>:
 8007a64:	440a      	add	r2, r1
 8007a66:	4291      	cmp	r1, r2
 8007a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a6c:	d100      	bne.n	8007a70 <memcpy+0xc>
 8007a6e:	4770      	bx	lr
 8007a70:	b510      	push	{r4, lr}
 8007a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a76:	4291      	cmp	r1, r2
 8007a78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a7c:	d1f9      	bne.n	8007a72 <memcpy+0xe>
 8007a7e:	bd10      	pop	{r4, pc}

08007a80 <memset>:
 8007a80:	4603      	mov	r3, r0
 8007a82:	4402      	add	r2, r0
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d100      	bne.n	8007a8a <memset+0xa>
 8007a88:	4770      	bx	lr
 8007a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a8e:	e7f9      	b.n	8007a84 <memset+0x4>

08007a90 <_free_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4605      	mov	r5, r0
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d040      	beq.n	8007b1a <_free_r+0x8a>
 8007a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a9c:	1f0c      	subs	r4, r1, #4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bfb8      	it	lt
 8007aa2:	18e4      	addlt	r4, r4, r3
 8007aa4:	f003 fb5a 	bl	800b15c <__malloc_lock>
 8007aa8:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <_free_r+0x8c>)
 8007aaa:	6813      	ldr	r3, [r2, #0]
 8007aac:	b933      	cbnz	r3, 8007abc <_free_r+0x2c>
 8007aae:	6063      	str	r3, [r4, #4]
 8007ab0:	6014      	str	r4, [r2, #0]
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ab8:	f003 bb56 	b.w	800b168 <__malloc_unlock>
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	d908      	bls.n	8007ad2 <_free_r+0x42>
 8007ac0:	6820      	ldr	r0, [r4, #0]
 8007ac2:	1821      	adds	r1, r4, r0
 8007ac4:	428b      	cmp	r3, r1
 8007ac6:	bf01      	itttt	eq
 8007ac8:	6819      	ldreq	r1, [r3, #0]
 8007aca:	685b      	ldreq	r3, [r3, #4]
 8007acc:	1809      	addeq	r1, r1, r0
 8007ace:	6021      	streq	r1, [r4, #0]
 8007ad0:	e7ed      	b.n	8007aae <_free_r+0x1e>
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	b10b      	cbz	r3, 8007adc <_free_r+0x4c>
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	d9fa      	bls.n	8007ad2 <_free_r+0x42>
 8007adc:	6811      	ldr	r1, [r2, #0]
 8007ade:	1850      	adds	r0, r2, r1
 8007ae0:	42a0      	cmp	r0, r4
 8007ae2:	d10b      	bne.n	8007afc <_free_r+0x6c>
 8007ae4:	6820      	ldr	r0, [r4, #0]
 8007ae6:	4401      	add	r1, r0
 8007ae8:	1850      	adds	r0, r2, r1
 8007aea:	4283      	cmp	r3, r0
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	d1e0      	bne.n	8007ab2 <_free_r+0x22>
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	4401      	add	r1, r0
 8007af6:	6011      	str	r1, [r2, #0]
 8007af8:	6053      	str	r3, [r2, #4]
 8007afa:	e7da      	b.n	8007ab2 <_free_r+0x22>
 8007afc:	d902      	bls.n	8007b04 <_free_r+0x74>
 8007afe:	230c      	movs	r3, #12
 8007b00:	602b      	str	r3, [r5, #0]
 8007b02:	e7d6      	b.n	8007ab2 <_free_r+0x22>
 8007b04:	6820      	ldr	r0, [r4, #0]
 8007b06:	1821      	adds	r1, r4, r0
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	bf01      	itttt	eq
 8007b0c:	6819      	ldreq	r1, [r3, #0]
 8007b0e:	685b      	ldreq	r3, [r3, #4]
 8007b10:	1809      	addeq	r1, r1, r0
 8007b12:	6021      	streq	r1, [r4, #0]
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	6054      	str	r4, [r2, #4]
 8007b18:	e7cb      	b.n	8007ab2 <_free_r+0x22>
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20001d34 	.word	0x20001d34

08007b20 <sbrk_aligned>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	4e0e      	ldr	r6, [pc, #56]	; (8007b5c <sbrk_aligned+0x3c>)
 8007b24:	460c      	mov	r4, r1
 8007b26:	6831      	ldr	r1, [r6, #0]
 8007b28:	4605      	mov	r5, r0
 8007b2a:	b911      	cbnz	r1, 8007b32 <sbrk_aligned+0x12>
 8007b2c:	f000 fff2 	bl	8008b14 <_sbrk_r>
 8007b30:	6030      	str	r0, [r6, #0]
 8007b32:	4621      	mov	r1, r4
 8007b34:	4628      	mov	r0, r5
 8007b36:	f000 ffed 	bl	8008b14 <_sbrk_r>
 8007b3a:	1c43      	adds	r3, r0, #1
 8007b3c:	d00a      	beq.n	8007b54 <sbrk_aligned+0x34>
 8007b3e:	1cc4      	adds	r4, r0, #3
 8007b40:	f024 0403 	bic.w	r4, r4, #3
 8007b44:	42a0      	cmp	r0, r4
 8007b46:	d007      	beq.n	8007b58 <sbrk_aligned+0x38>
 8007b48:	1a21      	subs	r1, r4, r0
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f000 ffe2 	bl	8008b14 <_sbrk_r>
 8007b50:	3001      	adds	r0, #1
 8007b52:	d101      	bne.n	8007b58 <sbrk_aligned+0x38>
 8007b54:	f04f 34ff 	mov.w	r4, #4294967295
 8007b58:	4620      	mov	r0, r4
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
 8007b5c:	20001d38 	.word	0x20001d38

08007b60 <_malloc_r>:
 8007b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b64:	1ccd      	adds	r5, r1, #3
 8007b66:	f025 0503 	bic.w	r5, r5, #3
 8007b6a:	3508      	adds	r5, #8
 8007b6c:	2d0c      	cmp	r5, #12
 8007b6e:	bf38      	it	cc
 8007b70:	250c      	movcc	r5, #12
 8007b72:	2d00      	cmp	r5, #0
 8007b74:	4607      	mov	r7, r0
 8007b76:	db01      	blt.n	8007b7c <_malloc_r+0x1c>
 8007b78:	42a9      	cmp	r1, r5
 8007b7a:	d905      	bls.n	8007b88 <_malloc_r+0x28>
 8007b7c:	230c      	movs	r3, #12
 8007b7e:	2600      	movs	r6, #0
 8007b80:	603b      	str	r3, [r7, #0]
 8007b82:	4630      	mov	r0, r6
 8007b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b88:	4e2e      	ldr	r6, [pc, #184]	; (8007c44 <_malloc_r+0xe4>)
 8007b8a:	f003 fae7 	bl	800b15c <__malloc_lock>
 8007b8e:	6833      	ldr	r3, [r6, #0]
 8007b90:	461c      	mov	r4, r3
 8007b92:	bb34      	cbnz	r4, 8007be2 <_malloc_r+0x82>
 8007b94:	4629      	mov	r1, r5
 8007b96:	4638      	mov	r0, r7
 8007b98:	f7ff ffc2 	bl	8007b20 <sbrk_aligned>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	d14d      	bne.n	8007c3e <_malloc_r+0xde>
 8007ba2:	6834      	ldr	r4, [r6, #0]
 8007ba4:	4626      	mov	r6, r4
 8007ba6:	2e00      	cmp	r6, #0
 8007ba8:	d140      	bne.n	8007c2c <_malloc_r+0xcc>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	4631      	mov	r1, r6
 8007bae:	4638      	mov	r0, r7
 8007bb0:	eb04 0803 	add.w	r8, r4, r3
 8007bb4:	f000 ffae 	bl	8008b14 <_sbrk_r>
 8007bb8:	4580      	cmp	r8, r0
 8007bba:	d13a      	bne.n	8007c32 <_malloc_r+0xd2>
 8007bbc:	6821      	ldr	r1, [r4, #0]
 8007bbe:	3503      	adds	r5, #3
 8007bc0:	1a6d      	subs	r5, r5, r1
 8007bc2:	f025 0503 	bic.w	r5, r5, #3
 8007bc6:	3508      	adds	r5, #8
 8007bc8:	2d0c      	cmp	r5, #12
 8007bca:	bf38      	it	cc
 8007bcc:	250c      	movcc	r5, #12
 8007bce:	4638      	mov	r0, r7
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	f7ff ffa5 	bl	8007b20 <sbrk_aligned>
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	d02b      	beq.n	8007c32 <_malloc_r+0xd2>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	442b      	add	r3, r5
 8007bde:	6023      	str	r3, [r4, #0]
 8007be0:	e00e      	b.n	8007c00 <_malloc_r+0xa0>
 8007be2:	6822      	ldr	r2, [r4, #0]
 8007be4:	1b52      	subs	r2, r2, r5
 8007be6:	d41e      	bmi.n	8007c26 <_malloc_r+0xc6>
 8007be8:	2a0b      	cmp	r2, #11
 8007bea:	d916      	bls.n	8007c1a <_malloc_r+0xba>
 8007bec:	1961      	adds	r1, r4, r5
 8007bee:	42a3      	cmp	r3, r4
 8007bf0:	6025      	str	r5, [r4, #0]
 8007bf2:	bf18      	it	ne
 8007bf4:	6059      	strne	r1, [r3, #4]
 8007bf6:	6863      	ldr	r3, [r4, #4]
 8007bf8:	bf08      	it	eq
 8007bfa:	6031      	streq	r1, [r6, #0]
 8007bfc:	5162      	str	r2, [r4, r5]
 8007bfe:	604b      	str	r3, [r1, #4]
 8007c00:	4638      	mov	r0, r7
 8007c02:	f104 060b 	add.w	r6, r4, #11
 8007c06:	f003 faaf 	bl	800b168 <__malloc_unlock>
 8007c0a:	f026 0607 	bic.w	r6, r6, #7
 8007c0e:	1d23      	adds	r3, r4, #4
 8007c10:	1af2      	subs	r2, r6, r3
 8007c12:	d0b6      	beq.n	8007b82 <_malloc_r+0x22>
 8007c14:	1b9b      	subs	r3, r3, r6
 8007c16:	50a3      	str	r3, [r4, r2]
 8007c18:	e7b3      	b.n	8007b82 <_malloc_r+0x22>
 8007c1a:	6862      	ldr	r2, [r4, #4]
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	bf0c      	ite	eq
 8007c20:	6032      	streq	r2, [r6, #0]
 8007c22:	605a      	strne	r2, [r3, #4]
 8007c24:	e7ec      	b.n	8007c00 <_malloc_r+0xa0>
 8007c26:	4623      	mov	r3, r4
 8007c28:	6864      	ldr	r4, [r4, #4]
 8007c2a:	e7b2      	b.n	8007b92 <_malloc_r+0x32>
 8007c2c:	4634      	mov	r4, r6
 8007c2e:	6876      	ldr	r6, [r6, #4]
 8007c30:	e7b9      	b.n	8007ba6 <_malloc_r+0x46>
 8007c32:	230c      	movs	r3, #12
 8007c34:	4638      	mov	r0, r7
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	f003 fa96 	bl	800b168 <__malloc_unlock>
 8007c3c:	e7a1      	b.n	8007b82 <_malloc_r+0x22>
 8007c3e:	6025      	str	r5, [r4, #0]
 8007c40:	e7de      	b.n	8007c00 <_malloc_r+0xa0>
 8007c42:	bf00      	nop
 8007c44:	20001d34 	.word	0x20001d34

08007c48 <__cvt>:
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4e:	461f      	mov	r7, r3
 8007c50:	bfbb      	ittet	lt
 8007c52:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007c56:	461f      	movlt	r7, r3
 8007c58:	2300      	movge	r3, #0
 8007c5a:	232d      	movlt	r3, #45	; 0x2d
 8007c5c:	b088      	sub	sp, #32
 8007c5e:	4614      	mov	r4, r2
 8007c60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c62:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007c64:	7013      	strb	r3, [r2, #0]
 8007c66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c68:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007c6c:	f023 0820 	bic.w	r8, r3, #32
 8007c70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c74:	d005      	beq.n	8007c82 <__cvt+0x3a>
 8007c76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c7a:	d100      	bne.n	8007c7e <__cvt+0x36>
 8007c7c:	3501      	adds	r5, #1
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e000      	b.n	8007c84 <__cvt+0x3c>
 8007c82:	2303      	movs	r3, #3
 8007c84:	aa07      	add	r2, sp, #28
 8007c86:	9204      	str	r2, [sp, #16]
 8007c88:	aa06      	add	r2, sp, #24
 8007c8a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007c8e:	e9cd 3500 	strd	r3, r5, [sp]
 8007c92:	4622      	mov	r2, r4
 8007c94:	463b      	mov	r3, r7
 8007c96:	f001 ffb3 	bl	8009c00 <_dtoa_r>
 8007c9a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	d102      	bne.n	8007ca8 <__cvt+0x60>
 8007ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ca4:	07db      	lsls	r3, r3, #31
 8007ca6:	d522      	bpl.n	8007cee <__cvt+0xa6>
 8007ca8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cac:	eb06 0905 	add.w	r9, r6, r5
 8007cb0:	d110      	bne.n	8007cd4 <__cvt+0x8c>
 8007cb2:	7833      	ldrb	r3, [r6, #0]
 8007cb4:	2b30      	cmp	r3, #48	; 0x30
 8007cb6:	d10a      	bne.n	8007cce <__cvt+0x86>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2300      	movs	r3, #0
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	f7f8 fe72 	bl	80009a8 <__aeabi_dcmpeq>
 8007cc4:	b918      	cbnz	r0, 8007cce <__cvt+0x86>
 8007cc6:	f1c5 0501 	rsb	r5, r5, #1
 8007cca:	f8ca 5000 	str.w	r5, [sl]
 8007cce:	f8da 3000 	ldr.w	r3, [sl]
 8007cd2:	4499      	add	r9, r3
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	4620      	mov	r0, r4
 8007cda:	4639      	mov	r1, r7
 8007cdc:	f7f8 fe64 	bl	80009a8 <__aeabi_dcmpeq>
 8007ce0:	b108      	cbz	r0, 8007ce6 <__cvt+0x9e>
 8007ce2:	f8cd 901c 	str.w	r9, [sp, #28]
 8007ce6:	2230      	movs	r2, #48	; 0x30
 8007ce8:	9b07      	ldr	r3, [sp, #28]
 8007cea:	454b      	cmp	r3, r9
 8007cec:	d307      	bcc.n	8007cfe <__cvt+0xb6>
 8007cee:	4630      	mov	r0, r6
 8007cf0:	9b07      	ldr	r3, [sp, #28]
 8007cf2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007cf4:	1b9b      	subs	r3, r3, r6
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	b008      	add	sp, #32
 8007cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cfe:	1c59      	adds	r1, r3, #1
 8007d00:	9107      	str	r1, [sp, #28]
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	e7f0      	b.n	8007ce8 <__cvt+0xa0>

08007d06 <__exponent>:
 8007d06:	4603      	mov	r3, r0
 8007d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d0a:	2900      	cmp	r1, #0
 8007d0c:	f803 2b02 	strb.w	r2, [r3], #2
 8007d10:	bfb6      	itet	lt
 8007d12:	222d      	movlt	r2, #45	; 0x2d
 8007d14:	222b      	movge	r2, #43	; 0x2b
 8007d16:	4249      	neglt	r1, r1
 8007d18:	2909      	cmp	r1, #9
 8007d1a:	7042      	strb	r2, [r0, #1]
 8007d1c:	dd2b      	ble.n	8007d76 <__exponent+0x70>
 8007d1e:	f10d 0407 	add.w	r4, sp, #7
 8007d22:	46a4      	mov	ip, r4
 8007d24:	270a      	movs	r7, #10
 8007d26:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d2a:	460a      	mov	r2, r1
 8007d2c:	46a6      	mov	lr, r4
 8007d2e:	fb07 1516 	mls	r5, r7, r6, r1
 8007d32:	2a63      	cmp	r2, #99	; 0x63
 8007d34:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007d38:	4631      	mov	r1, r6
 8007d3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d42:	dcf0      	bgt.n	8007d26 <__exponent+0x20>
 8007d44:	3130      	adds	r1, #48	; 0x30
 8007d46:	f1ae 0502 	sub.w	r5, lr, #2
 8007d4a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d4e:	4629      	mov	r1, r5
 8007d50:	1c44      	adds	r4, r0, #1
 8007d52:	4561      	cmp	r1, ip
 8007d54:	d30a      	bcc.n	8007d6c <__exponent+0x66>
 8007d56:	f10d 0209 	add.w	r2, sp, #9
 8007d5a:	eba2 020e 	sub.w	r2, r2, lr
 8007d5e:	4565      	cmp	r5, ip
 8007d60:	bf88      	it	hi
 8007d62:	2200      	movhi	r2, #0
 8007d64:	4413      	add	r3, r2
 8007d66:	1a18      	subs	r0, r3, r0
 8007d68:	b003      	add	sp, #12
 8007d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d70:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d74:	e7ed      	b.n	8007d52 <__exponent+0x4c>
 8007d76:	2330      	movs	r3, #48	; 0x30
 8007d78:	3130      	adds	r1, #48	; 0x30
 8007d7a:	7083      	strb	r3, [r0, #2]
 8007d7c:	70c1      	strb	r1, [r0, #3]
 8007d7e:	1d03      	adds	r3, r0, #4
 8007d80:	e7f1      	b.n	8007d66 <__exponent+0x60>
	...

08007d84 <_printf_float>:
 8007d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	b091      	sub	sp, #68	; 0x44
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007d90:	4616      	mov	r6, r2
 8007d92:	461f      	mov	r7, r3
 8007d94:	4605      	mov	r5, r0
 8007d96:	f003 f945 	bl	800b024 <_localeconv_r>
 8007d9a:	6803      	ldr	r3, [r0, #0]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007da0:	f7f8 f9d6 	bl	8000150 <strlen>
 8007da4:	2300      	movs	r3, #0
 8007da6:	930e      	str	r3, [sp, #56]	; 0x38
 8007da8:	f8d8 3000 	ldr.w	r3, [r8]
 8007dac:	900a      	str	r0, [sp, #40]	; 0x28
 8007dae:	3307      	adds	r3, #7
 8007db0:	f023 0307 	bic.w	r3, r3, #7
 8007db4:	f103 0208 	add.w	r2, r3, #8
 8007db8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007dbc:	f8d4 b000 	ldr.w	fp, [r4]
 8007dc0:	f8c8 2000 	str.w	r2, [r8]
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007dcc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007dd0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007dd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dda:	4640      	mov	r0, r8
 8007ddc:	4b9c      	ldr	r3, [pc, #624]	; (8008050 <_printf_float+0x2cc>)
 8007dde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007de0:	f7f8 fe14 	bl	8000a0c <__aeabi_dcmpun>
 8007de4:	bb70      	cbnz	r0, 8007e44 <_printf_float+0xc0>
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	4640      	mov	r0, r8
 8007dec:	4b98      	ldr	r3, [pc, #608]	; (8008050 <_printf_float+0x2cc>)
 8007dee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007df0:	f7f8 fdee 	bl	80009d0 <__aeabi_dcmple>
 8007df4:	bb30      	cbnz	r0, 8007e44 <_printf_float+0xc0>
 8007df6:	2200      	movs	r2, #0
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	4651      	mov	r1, sl
 8007dfe:	f7f8 fddd 	bl	80009bc <__aeabi_dcmplt>
 8007e02:	b110      	cbz	r0, 8007e0a <_printf_float+0x86>
 8007e04:	232d      	movs	r3, #45	; 0x2d
 8007e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e0a:	4b92      	ldr	r3, [pc, #584]	; (8008054 <_printf_float+0x2d0>)
 8007e0c:	4892      	ldr	r0, [pc, #584]	; (8008058 <_printf_float+0x2d4>)
 8007e0e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007e12:	bf94      	ite	ls
 8007e14:	4698      	movls	r8, r3
 8007e16:	4680      	movhi	r8, r0
 8007e18:	2303      	movs	r3, #3
 8007e1a:	f04f 0a00 	mov.w	sl, #0
 8007e1e:	6123      	str	r3, [r4, #16]
 8007e20:	f02b 0304 	bic.w	r3, fp, #4
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	4633      	mov	r3, r6
 8007e28:	4621      	mov	r1, r4
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	9700      	str	r7, [sp, #0]
 8007e2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007e30:	f000 f9d4 	bl	80081dc <_printf_common>
 8007e34:	3001      	adds	r0, #1
 8007e36:	f040 8090 	bne.w	8007f5a <_printf_float+0x1d6>
 8007e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3e:	b011      	add	sp, #68	; 0x44
 8007e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e44:	4642      	mov	r2, r8
 8007e46:	4653      	mov	r3, sl
 8007e48:	4640      	mov	r0, r8
 8007e4a:	4651      	mov	r1, sl
 8007e4c:	f7f8 fdde 	bl	8000a0c <__aeabi_dcmpun>
 8007e50:	b148      	cbz	r0, 8007e66 <_printf_float+0xe2>
 8007e52:	f1ba 0f00 	cmp.w	sl, #0
 8007e56:	bfb8      	it	lt
 8007e58:	232d      	movlt	r3, #45	; 0x2d
 8007e5a:	4880      	ldr	r0, [pc, #512]	; (800805c <_printf_float+0x2d8>)
 8007e5c:	bfb8      	it	lt
 8007e5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e62:	4b7f      	ldr	r3, [pc, #508]	; (8008060 <_printf_float+0x2dc>)
 8007e64:	e7d3      	b.n	8007e0e <_printf_float+0x8a>
 8007e66:	6863      	ldr	r3, [r4, #4]
 8007e68:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	d142      	bne.n	8007ef6 <_printf_float+0x172>
 8007e70:	2306      	movs	r3, #6
 8007e72:	6063      	str	r3, [r4, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	9206      	str	r2, [sp, #24]
 8007e78:	aa0e      	add	r2, sp, #56	; 0x38
 8007e7a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007e7e:	aa0d      	add	r2, sp, #52	; 0x34
 8007e80:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007e84:	9203      	str	r2, [sp, #12]
 8007e86:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007e8a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007e8e:	6023      	str	r3, [r4, #0]
 8007e90:	6863      	ldr	r3, [r4, #4]
 8007e92:	4642      	mov	r2, r8
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	4628      	mov	r0, r5
 8007e98:	4653      	mov	r3, sl
 8007e9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e9c:	f7ff fed4 	bl	8007c48 <__cvt>
 8007ea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ea2:	4680      	mov	r8, r0
 8007ea4:	2947      	cmp	r1, #71	; 0x47
 8007ea6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007ea8:	d108      	bne.n	8007ebc <_printf_float+0x138>
 8007eaa:	1cc8      	adds	r0, r1, #3
 8007eac:	db02      	blt.n	8007eb4 <_printf_float+0x130>
 8007eae:	6863      	ldr	r3, [r4, #4]
 8007eb0:	4299      	cmp	r1, r3
 8007eb2:	dd40      	ble.n	8007f36 <_printf_float+0x1b2>
 8007eb4:	f1a9 0902 	sub.w	r9, r9, #2
 8007eb8:	fa5f f989 	uxtb.w	r9, r9
 8007ebc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007ec0:	d81f      	bhi.n	8007f02 <_printf_float+0x17e>
 8007ec2:	464a      	mov	r2, r9
 8007ec4:	3901      	subs	r1, #1
 8007ec6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007eca:	910d      	str	r1, [sp, #52]	; 0x34
 8007ecc:	f7ff ff1b 	bl	8007d06 <__exponent>
 8007ed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ed2:	4682      	mov	sl, r0
 8007ed4:	1813      	adds	r3, r2, r0
 8007ed6:	2a01      	cmp	r2, #1
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	dc02      	bgt.n	8007ee2 <_printf_float+0x15e>
 8007edc:	6822      	ldr	r2, [r4, #0]
 8007ede:	07d2      	lsls	r2, r2, #31
 8007ee0:	d501      	bpl.n	8007ee6 <_printf_float+0x162>
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	6123      	str	r3, [r4, #16]
 8007ee6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d09b      	beq.n	8007e26 <_printf_float+0xa2>
 8007eee:	232d      	movs	r3, #45	; 0x2d
 8007ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef4:	e797      	b.n	8007e26 <_printf_float+0xa2>
 8007ef6:	2947      	cmp	r1, #71	; 0x47
 8007ef8:	d1bc      	bne.n	8007e74 <_printf_float+0xf0>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1ba      	bne.n	8007e74 <_printf_float+0xf0>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e7b7      	b.n	8007e72 <_printf_float+0xee>
 8007f02:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007f06:	d118      	bne.n	8007f3a <_printf_float+0x1b6>
 8007f08:	2900      	cmp	r1, #0
 8007f0a:	6863      	ldr	r3, [r4, #4]
 8007f0c:	dd0b      	ble.n	8007f26 <_printf_float+0x1a2>
 8007f0e:	6121      	str	r1, [r4, #16]
 8007f10:	b913      	cbnz	r3, 8007f18 <_printf_float+0x194>
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	07d0      	lsls	r0, r2, #31
 8007f16:	d502      	bpl.n	8007f1e <_printf_float+0x19a>
 8007f18:	3301      	adds	r3, #1
 8007f1a:	440b      	add	r3, r1
 8007f1c:	6123      	str	r3, [r4, #16]
 8007f1e:	f04f 0a00 	mov.w	sl, #0
 8007f22:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f24:	e7df      	b.n	8007ee6 <_printf_float+0x162>
 8007f26:	b913      	cbnz	r3, 8007f2e <_printf_float+0x1aa>
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	07d2      	lsls	r2, r2, #31
 8007f2c:	d501      	bpl.n	8007f32 <_printf_float+0x1ae>
 8007f2e:	3302      	adds	r3, #2
 8007f30:	e7f4      	b.n	8007f1c <_printf_float+0x198>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e7f2      	b.n	8007f1c <_printf_float+0x198>
 8007f36:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f3c:	4299      	cmp	r1, r3
 8007f3e:	db05      	blt.n	8007f4c <_printf_float+0x1c8>
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	6121      	str	r1, [r4, #16]
 8007f44:	07d8      	lsls	r0, r3, #31
 8007f46:	d5ea      	bpl.n	8007f1e <_printf_float+0x19a>
 8007f48:	1c4b      	adds	r3, r1, #1
 8007f4a:	e7e7      	b.n	8007f1c <_printf_float+0x198>
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	bfcc      	ite	gt
 8007f50:	2201      	movgt	r2, #1
 8007f52:	f1c1 0202 	rsble	r2, r1, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	e7e0      	b.n	8007f1c <_printf_float+0x198>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	055a      	lsls	r2, r3, #21
 8007f5e:	d407      	bmi.n	8007f70 <_printf_float+0x1ec>
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	4642      	mov	r2, r8
 8007f64:	4631      	mov	r1, r6
 8007f66:	4628      	mov	r0, r5
 8007f68:	47b8      	blx	r7
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d12b      	bne.n	8007fc6 <_printf_float+0x242>
 8007f6e:	e764      	b.n	8007e3a <_printf_float+0xb6>
 8007f70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f74:	f240 80dd 	bls.w	8008132 <_printf_float+0x3ae>
 8007f78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f7f8 fd12 	bl	80009a8 <__aeabi_dcmpeq>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d033      	beq.n	8007ff0 <_printf_float+0x26c>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	4a35      	ldr	r2, [pc, #212]	; (8008064 <_printf_float+0x2e0>)
 8007f90:	47b8      	blx	r7
 8007f92:	3001      	adds	r0, #1
 8007f94:	f43f af51 	beq.w	8007e3a <_printf_float+0xb6>
 8007f98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	db02      	blt.n	8007fa6 <_printf_float+0x222>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	07d8      	lsls	r0, r3, #31
 8007fa4:	d50f      	bpl.n	8007fc6 <_printf_float+0x242>
 8007fa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007faa:	4631      	mov	r1, r6
 8007fac:	4628      	mov	r0, r5
 8007fae:	47b8      	blx	r7
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	f43f af42 	beq.w	8007e3a <_printf_float+0xb6>
 8007fb6:	f04f 0800 	mov.w	r8, #0
 8007fba:	f104 091a 	add.w	r9, r4, #26
 8007fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	4543      	cmp	r3, r8
 8007fc4:	dc09      	bgt.n	8007fda <_printf_float+0x256>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	079b      	lsls	r3, r3, #30
 8007fca:	f100 8102 	bmi.w	80081d2 <_printf_float+0x44e>
 8007fce:	68e0      	ldr	r0, [r4, #12]
 8007fd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fd2:	4298      	cmp	r0, r3
 8007fd4:	bfb8      	it	lt
 8007fd6:	4618      	movlt	r0, r3
 8007fd8:	e731      	b.n	8007e3e <_printf_float+0xba>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	464a      	mov	r2, r9
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b8      	blx	r7
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	f43f af28 	beq.w	8007e3a <_printf_float+0xb6>
 8007fea:	f108 0801 	add.w	r8, r8, #1
 8007fee:	e7e6      	b.n	8007fbe <_printf_float+0x23a>
 8007ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	dc38      	bgt.n	8008068 <_printf_float+0x2e4>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	4a19      	ldr	r2, [pc, #100]	; (8008064 <_printf_float+0x2e0>)
 8007ffe:	47b8      	blx	r7
 8008000:	3001      	adds	r0, #1
 8008002:	f43f af1a 	beq.w	8007e3a <_printf_float+0xb6>
 8008006:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800800a:	4313      	orrs	r3, r2
 800800c:	d102      	bne.n	8008014 <_printf_float+0x290>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	07d9      	lsls	r1, r3, #31
 8008012:	d5d8      	bpl.n	8007fc6 <_printf_float+0x242>
 8008014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008018:	4631      	mov	r1, r6
 800801a:	4628      	mov	r0, r5
 800801c:	47b8      	blx	r7
 800801e:	3001      	adds	r0, #1
 8008020:	f43f af0b 	beq.w	8007e3a <_printf_float+0xb6>
 8008024:	f04f 0900 	mov.w	r9, #0
 8008028:	f104 0a1a 	add.w	sl, r4, #26
 800802c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800802e:	425b      	negs	r3, r3
 8008030:	454b      	cmp	r3, r9
 8008032:	dc01      	bgt.n	8008038 <_printf_float+0x2b4>
 8008034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008036:	e794      	b.n	8007f62 <_printf_float+0x1de>
 8008038:	2301      	movs	r3, #1
 800803a:	4652      	mov	r2, sl
 800803c:	4631      	mov	r1, r6
 800803e:	4628      	mov	r0, r5
 8008040:	47b8      	blx	r7
 8008042:	3001      	adds	r0, #1
 8008044:	f43f aef9 	beq.w	8007e3a <_printf_float+0xb6>
 8008048:	f109 0901 	add.w	r9, r9, #1
 800804c:	e7ee      	b.n	800802c <_printf_float+0x2a8>
 800804e:	bf00      	nop
 8008050:	7fefffff 	.word	0x7fefffff
 8008054:	080114b8 	.word	0x080114b8
 8008058:	080114bc 	.word	0x080114bc
 800805c:	080114c4 	.word	0x080114c4
 8008060:	080114c0 	.word	0x080114c0
 8008064:	080114c8 	.word	0x080114c8
 8008068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800806a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800806c:	429a      	cmp	r2, r3
 800806e:	bfa8      	it	ge
 8008070:	461a      	movge	r2, r3
 8008072:	2a00      	cmp	r2, #0
 8008074:	4691      	mov	r9, r2
 8008076:	dc37      	bgt.n	80080e8 <_printf_float+0x364>
 8008078:	f04f 0b00 	mov.w	fp, #0
 800807c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008080:	f104 021a 	add.w	r2, r4, #26
 8008084:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008088:	ebaa 0309 	sub.w	r3, sl, r9
 800808c:	455b      	cmp	r3, fp
 800808e:	dc33      	bgt.n	80080f8 <_printf_float+0x374>
 8008090:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008094:	429a      	cmp	r2, r3
 8008096:	db3b      	blt.n	8008110 <_printf_float+0x38c>
 8008098:	6823      	ldr	r3, [r4, #0]
 800809a:	07da      	lsls	r2, r3, #31
 800809c:	d438      	bmi.n	8008110 <_printf_float+0x38c>
 800809e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080a2:	eba3 020a 	sub.w	r2, r3, sl
 80080a6:	eba3 0901 	sub.w	r9, r3, r1
 80080aa:	4591      	cmp	r9, r2
 80080ac:	bfa8      	it	ge
 80080ae:	4691      	movge	r9, r2
 80080b0:	f1b9 0f00 	cmp.w	r9, #0
 80080b4:	dc34      	bgt.n	8008120 <_printf_float+0x39c>
 80080b6:	f04f 0800 	mov.w	r8, #0
 80080ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080be:	f104 0a1a 	add.w	sl, r4, #26
 80080c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80080c6:	1a9b      	subs	r3, r3, r2
 80080c8:	eba3 0309 	sub.w	r3, r3, r9
 80080cc:	4543      	cmp	r3, r8
 80080ce:	f77f af7a 	ble.w	8007fc6 <_printf_float+0x242>
 80080d2:	2301      	movs	r3, #1
 80080d4:	4652      	mov	r2, sl
 80080d6:	4631      	mov	r1, r6
 80080d8:	4628      	mov	r0, r5
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	f43f aeac 	beq.w	8007e3a <_printf_float+0xb6>
 80080e2:	f108 0801 	add.w	r8, r8, #1
 80080e6:	e7ec      	b.n	80080c2 <_printf_float+0x33e>
 80080e8:	4613      	mov	r3, r2
 80080ea:	4631      	mov	r1, r6
 80080ec:	4642      	mov	r2, r8
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b8      	blx	r7
 80080f2:	3001      	adds	r0, #1
 80080f4:	d1c0      	bne.n	8008078 <_printf_float+0x2f4>
 80080f6:	e6a0      	b.n	8007e3a <_printf_float+0xb6>
 80080f8:	2301      	movs	r3, #1
 80080fa:	4631      	mov	r1, r6
 80080fc:	4628      	mov	r0, r5
 80080fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8008100:	47b8      	blx	r7
 8008102:	3001      	adds	r0, #1
 8008104:	f43f ae99 	beq.w	8007e3a <_printf_float+0xb6>
 8008108:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800810a:	f10b 0b01 	add.w	fp, fp, #1
 800810e:	e7b9      	b.n	8008084 <_printf_float+0x300>
 8008110:	4631      	mov	r1, r6
 8008112:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	d1bf      	bne.n	800809e <_printf_float+0x31a>
 800811e:	e68c      	b.n	8007e3a <_printf_float+0xb6>
 8008120:	464b      	mov	r3, r9
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	eb08 020a 	add.w	r2, r8, sl
 800812a:	47b8      	blx	r7
 800812c:	3001      	adds	r0, #1
 800812e:	d1c2      	bne.n	80080b6 <_printf_float+0x332>
 8008130:	e683      	b.n	8007e3a <_printf_float+0xb6>
 8008132:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008134:	2a01      	cmp	r2, #1
 8008136:	dc01      	bgt.n	800813c <_printf_float+0x3b8>
 8008138:	07db      	lsls	r3, r3, #31
 800813a:	d537      	bpl.n	80081ac <_printf_float+0x428>
 800813c:	2301      	movs	r3, #1
 800813e:	4642      	mov	r2, r8
 8008140:	4631      	mov	r1, r6
 8008142:	4628      	mov	r0, r5
 8008144:	47b8      	blx	r7
 8008146:	3001      	adds	r0, #1
 8008148:	f43f ae77 	beq.w	8007e3a <_printf_float+0xb6>
 800814c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	f43f ae6f 	beq.w	8007e3a <_printf_float+0xb6>
 800815c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008160:	2200      	movs	r2, #0
 8008162:	2300      	movs	r3, #0
 8008164:	f7f8 fc20 	bl	80009a8 <__aeabi_dcmpeq>
 8008168:	b9d8      	cbnz	r0, 80081a2 <_printf_float+0x41e>
 800816a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800816c:	f108 0201 	add.w	r2, r8, #1
 8008170:	3b01      	subs	r3, #1
 8008172:	4631      	mov	r1, r6
 8008174:	4628      	mov	r0, r5
 8008176:	47b8      	blx	r7
 8008178:	3001      	adds	r0, #1
 800817a:	d10e      	bne.n	800819a <_printf_float+0x416>
 800817c:	e65d      	b.n	8007e3a <_printf_float+0xb6>
 800817e:	2301      	movs	r3, #1
 8008180:	464a      	mov	r2, r9
 8008182:	4631      	mov	r1, r6
 8008184:	4628      	mov	r0, r5
 8008186:	47b8      	blx	r7
 8008188:	3001      	adds	r0, #1
 800818a:	f43f ae56 	beq.w	8007e3a <_printf_float+0xb6>
 800818e:	f108 0801 	add.w	r8, r8, #1
 8008192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008194:	3b01      	subs	r3, #1
 8008196:	4543      	cmp	r3, r8
 8008198:	dcf1      	bgt.n	800817e <_printf_float+0x3fa>
 800819a:	4653      	mov	r3, sl
 800819c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081a0:	e6e0      	b.n	8007f64 <_printf_float+0x1e0>
 80081a2:	f04f 0800 	mov.w	r8, #0
 80081a6:	f104 091a 	add.w	r9, r4, #26
 80081aa:	e7f2      	b.n	8008192 <_printf_float+0x40e>
 80081ac:	2301      	movs	r3, #1
 80081ae:	4642      	mov	r2, r8
 80081b0:	e7df      	b.n	8008172 <_printf_float+0x3ee>
 80081b2:	2301      	movs	r3, #1
 80081b4:	464a      	mov	r2, r9
 80081b6:	4631      	mov	r1, r6
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b8      	blx	r7
 80081bc:	3001      	adds	r0, #1
 80081be:	f43f ae3c 	beq.w	8007e3a <_printf_float+0xb6>
 80081c2:	f108 0801 	add.w	r8, r8, #1
 80081c6:	68e3      	ldr	r3, [r4, #12]
 80081c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80081ca:	1a5b      	subs	r3, r3, r1
 80081cc:	4543      	cmp	r3, r8
 80081ce:	dcf0      	bgt.n	80081b2 <_printf_float+0x42e>
 80081d0:	e6fd      	b.n	8007fce <_printf_float+0x24a>
 80081d2:	f04f 0800 	mov.w	r8, #0
 80081d6:	f104 0919 	add.w	r9, r4, #25
 80081da:	e7f4      	b.n	80081c6 <_printf_float+0x442>

080081dc <_printf_common>:
 80081dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	4616      	mov	r6, r2
 80081e2:	4699      	mov	r9, r3
 80081e4:	688a      	ldr	r2, [r1, #8]
 80081e6:	690b      	ldr	r3, [r1, #16]
 80081e8:	4607      	mov	r7, r0
 80081ea:	4293      	cmp	r3, r2
 80081ec:	bfb8      	it	lt
 80081ee:	4613      	movlt	r3, r2
 80081f0:	6033      	str	r3, [r6, #0]
 80081f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081f6:	460c      	mov	r4, r1
 80081f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081fc:	b10a      	cbz	r2, 8008202 <_printf_common+0x26>
 80081fe:	3301      	adds	r3, #1
 8008200:	6033      	str	r3, [r6, #0]
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	0699      	lsls	r1, r3, #26
 8008206:	bf42      	ittt	mi
 8008208:	6833      	ldrmi	r3, [r6, #0]
 800820a:	3302      	addmi	r3, #2
 800820c:	6033      	strmi	r3, [r6, #0]
 800820e:	6825      	ldr	r5, [r4, #0]
 8008210:	f015 0506 	ands.w	r5, r5, #6
 8008214:	d106      	bne.n	8008224 <_printf_common+0x48>
 8008216:	f104 0a19 	add.w	sl, r4, #25
 800821a:	68e3      	ldr	r3, [r4, #12]
 800821c:	6832      	ldr	r2, [r6, #0]
 800821e:	1a9b      	subs	r3, r3, r2
 8008220:	42ab      	cmp	r3, r5
 8008222:	dc28      	bgt.n	8008276 <_printf_common+0x9a>
 8008224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008228:	1e13      	subs	r3, r2, #0
 800822a:	6822      	ldr	r2, [r4, #0]
 800822c:	bf18      	it	ne
 800822e:	2301      	movne	r3, #1
 8008230:	0692      	lsls	r2, r2, #26
 8008232:	d42d      	bmi.n	8008290 <_printf_common+0xb4>
 8008234:	4649      	mov	r1, r9
 8008236:	4638      	mov	r0, r7
 8008238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800823c:	47c0      	blx	r8
 800823e:	3001      	adds	r0, #1
 8008240:	d020      	beq.n	8008284 <_printf_common+0xa8>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	68e5      	ldr	r5, [r4, #12]
 8008246:	f003 0306 	and.w	r3, r3, #6
 800824a:	2b04      	cmp	r3, #4
 800824c:	bf18      	it	ne
 800824e:	2500      	movne	r5, #0
 8008250:	6832      	ldr	r2, [r6, #0]
 8008252:	f04f 0600 	mov.w	r6, #0
 8008256:	68a3      	ldr	r3, [r4, #8]
 8008258:	bf08      	it	eq
 800825a:	1aad      	subeq	r5, r5, r2
 800825c:	6922      	ldr	r2, [r4, #16]
 800825e:	bf08      	it	eq
 8008260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008264:	4293      	cmp	r3, r2
 8008266:	bfc4      	itt	gt
 8008268:	1a9b      	subgt	r3, r3, r2
 800826a:	18ed      	addgt	r5, r5, r3
 800826c:	341a      	adds	r4, #26
 800826e:	42b5      	cmp	r5, r6
 8008270:	d11a      	bne.n	80082a8 <_printf_common+0xcc>
 8008272:	2000      	movs	r0, #0
 8008274:	e008      	b.n	8008288 <_printf_common+0xac>
 8008276:	2301      	movs	r3, #1
 8008278:	4652      	mov	r2, sl
 800827a:	4649      	mov	r1, r9
 800827c:	4638      	mov	r0, r7
 800827e:	47c0      	blx	r8
 8008280:	3001      	adds	r0, #1
 8008282:	d103      	bne.n	800828c <_printf_common+0xb0>
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800828c:	3501      	adds	r5, #1
 800828e:	e7c4      	b.n	800821a <_printf_common+0x3e>
 8008290:	2030      	movs	r0, #48	; 0x30
 8008292:	18e1      	adds	r1, r4, r3
 8008294:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800829e:	4422      	add	r2, r4
 80082a0:	3302      	adds	r3, #2
 80082a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082a6:	e7c5      	b.n	8008234 <_printf_common+0x58>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4622      	mov	r2, r4
 80082ac:	4649      	mov	r1, r9
 80082ae:	4638      	mov	r0, r7
 80082b0:	47c0      	blx	r8
 80082b2:	3001      	adds	r0, #1
 80082b4:	d0e6      	beq.n	8008284 <_printf_common+0xa8>
 80082b6:	3601      	adds	r6, #1
 80082b8:	e7d9      	b.n	800826e <_printf_common+0x92>
	...

080082bc <_printf_i>:
 80082bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	7e0f      	ldrb	r7, [r1, #24]
 80082c2:	4691      	mov	r9, r2
 80082c4:	2f78      	cmp	r7, #120	; 0x78
 80082c6:	4680      	mov	r8, r0
 80082c8:	460c      	mov	r4, r1
 80082ca:	469a      	mov	sl, r3
 80082cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082d2:	d807      	bhi.n	80082e4 <_printf_i+0x28>
 80082d4:	2f62      	cmp	r7, #98	; 0x62
 80082d6:	d80a      	bhi.n	80082ee <_printf_i+0x32>
 80082d8:	2f00      	cmp	r7, #0
 80082da:	f000 80d9 	beq.w	8008490 <_printf_i+0x1d4>
 80082de:	2f58      	cmp	r7, #88	; 0x58
 80082e0:	f000 80a4 	beq.w	800842c <_printf_i+0x170>
 80082e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082ec:	e03a      	b.n	8008364 <_printf_i+0xa8>
 80082ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082f2:	2b15      	cmp	r3, #21
 80082f4:	d8f6      	bhi.n	80082e4 <_printf_i+0x28>
 80082f6:	a101      	add	r1, pc, #4	; (adr r1, 80082fc <_printf_i+0x40>)
 80082f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082fc:	08008355 	.word	0x08008355
 8008300:	08008369 	.word	0x08008369
 8008304:	080082e5 	.word	0x080082e5
 8008308:	080082e5 	.word	0x080082e5
 800830c:	080082e5 	.word	0x080082e5
 8008310:	080082e5 	.word	0x080082e5
 8008314:	08008369 	.word	0x08008369
 8008318:	080082e5 	.word	0x080082e5
 800831c:	080082e5 	.word	0x080082e5
 8008320:	080082e5 	.word	0x080082e5
 8008324:	080082e5 	.word	0x080082e5
 8008328:	08008477 	.word	0x08008477
 800832c:	08008399 	.word	0x08008399
 8008330:	08008459 	.word	0x08008459
 8008334:	080082e5 	.word	0x080082e5
 8008338:	080082e5 	.word	0x080082e5
 800833c:	08008499 	.word	0x08008499
 8008340:	080082e5 	.word	0x080082e5
 8008344:	08008399 	.word	0x08008399
 8008348:	080082e5 	.word	0x080082e5
 800834c:	080082e5 	.word	0x080082e5
 8008350:	08008461 	.word	0x08008461
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	1d1a      	adds	r2, r3, #4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	602a      	str	r2, [r5, #0]
 800835c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008364:	2301      	movs	r3, #1
 8008366:	e0a4      	b.n	80084b2 <_printf_i+0x1f6>
 8008368:	6820      	ldr	r0, [r4, #0]
 800836a:	6829      	ldr	r1, [r5, #0]
 800836c:	0606      	lsls	r6, r0, #24
 800836e:	f101 0304 	add.w	r3, r1, #4
 8008372:	d50a      	bpl.n	800838a <_printf_i+0xce>
 8008374:	680e      	ldr	r6, [r1, #0]
 8008376:	602b      	str	r3, [r5, #0]
 8008378:	2e00      	cmp	r6, #0
 800837a:	da03      	bge.n	8008384 <_printf_i+0xc8>
 800837c:	232d      	movs	r3, #45	; 0x2d
 800837e:	4276      	negs	r6, r6
 8008380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008384:	230a      	movs	r3, #10
 8008386:	485e      	ldr	r0, [pc, #376]	; (8008500 <_printf_i+0x244>)
 8008388:	e019      	b.n	80083be <_printf_i+0x102>
 800838a:	680e      	ldr	r6, [r1, #0]
 800838c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	bf18      	it	ne
 8008394:	b236      	sxthne	r6, r6
 8008396:	e7ef      	b.n	8008378 <_printf_i+0xbc>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	6820      	ldr	r0, [r4, #0]
 800839c:	1d19      	adds	r1, r3, #4
 800839e:	6029      	str	r1, [r5, #0]
 80083a0:	0601      	lsls	r1, r0, #24
 80083a2:	d501      	bpl.n	80083a8 <_printf_i+0xec>
 80083a4:	681e      	ldr	r6, [r3, #0]
 80083a6:	e002      	b.n	80083ae <_printf_i+0xf2>
 80083a8:	0646      	lsls	r6, r0, #25
 80083aa:	d5fb      	bpl.n	80083a4 <_printf_i+0xe8>
 80083ac:	881e      	ldrh	r6, [r3, #0]
 80083ae:	2f6f      	cmp	r7, #111	; 0x6f
 80083b0:	bf0c      	ite	eq
 80083b2:	2308      	moveq	r3, #8
 80083b4:	230a      	movne	r3, #10
 80083b6:	4852      	ldr	r0, [pc, #328]	; (8008500 <_printf_i+0x244>)
 80083b8:	2100      	movs	r1, #0
 80083ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083be:	6865      	ldr	r5, [r4, #4]
 80083c0:	2d00      	cmp	r5, #0
 80083c2:	bfa8      	it	ge
 80083c4:	6821      	ldrge	r1, [r4, #0]
 80083c6:	60a5      	str	r5, [r4, #8]
 80083c8:	bfa4      	itt	ge
 80083ca:	f021 0104 	bicge.w	r1, r1, #4
 80083ce:	6021      	strge	r1, [r4, #0]
 80083d0:	b90e      	cbnz	r6, 80083d6 <_printf_i+0x11a>
 80083d2:	2d00      	cmp	r5, #0
 80083d4:	d04d      	beq.n	8008472 <_printf_i+0x1b6>
 80083d6:	4615      	mov	r5, r2
 80083d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80083dc:	fb03 6711 	mls	r7, r3, r1, r6
 80083e0:	5dc7      	ldrb	r7, [r0, r7]
 80083e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083e6:	4637      	mov	r7, r6
 80083e8:	42bb      	cmp	r3, r7
 80083ea:	460e      	mov	r6, r1
 80083ec:	d9f4      	bls.n	80083d8 <_printf_i+0x11c>
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	d10b      	bne.n	800840a <_printf_i+0x14e>
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	07de      	lsls	r6, r3, #31
 80083f6:	d508      	bpl.n	800840a <_printf_i+0x14e>
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	6861      	ldr	r1, [r4, #4]
 80083fc:	4299      	cmp	r1, r3
 80083fe:	bfde      	ittt	le
 8008400:	2330      	movle	r3, #48	; 0x30
 8008402:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008406:	f105 35ff 	addle.w	r5, r5, #4294967295
 800840a:	1b52      	subs	r2, r2, r5
 800840c:	6122      	str	r2, [r4, #16]
 800840e:	464b      	mov	r3, r9
 8008410:	4621      	mov	r1, r4
 8008412:	4640      	mov	r0, r8
 8008414:	f8cd a000 	str.w	sl, [sp]
 8008418:	aa03      	add	r2, sp, #12
 800841a:	f7ff fedf 	bl	80081dc <_printf_common>
 800841e:	3001      	adds	r0, #1
 8008420:	d14c      	bne.n	80084bc <_printf_i+0x200>
 8008422:	f04f 30ff 	mov.w	r0, #4294967295
 8008426:	b004      	add	sp, #16
 8008428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842c:	4834      	ldr	r0, [pc, #208]	; (8008500 <_printf_i+0x244>)
 800842e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008432:	6829      	ldr	r1, [r5, #0]
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	f851 6b04 	ldr.w	r6, [r1], #4
 800843a:	6029      	str	r1, [r5, #0]
 800843c:	061d      	lsls	r5, r3, #24
 800843e:	d514      	bpl.n	800846a <_printf_i+0x1ae>
 8008440:	07df      	lsls	r7, r3, #31
 8008442:	bf44      	itt	mi
 8008444:	f043 0320 	orrmi.w	r3, r3, #32
 8008448:	6023      	strmi	r3, [r4, #0]
 800844a:	b91e      	cbnz	r6, 8008454 <_printf_i+0x198>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	f023 0320 	bic.w	r3, r3, #32
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	2310      	movs	r3, #16
 8008456:	e7af      	b.n	80083b8 <_printf_i+0xfc>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	f043 0320 	orr.w	r3, r3, #32
 800845e:	6023      	str	r3, [r4, #0]
 8008460:	2378      	movs	r3, #120	; 0x78
 8008462:	4828      	ldr	r0, [pc, #160]	; (8008504 <_printf_i+0x248>)
 8008464:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008468:	e7e3      	b.n	8008432 <_printf_i+0x176>
 800846a:	0659      	lsls	r1, r3, #25
 800846c:	bf48      	it	mi
 800846e:	b2b6      	uxthmi	r6, r6
 8008470:	e7e6      	b.n	8008440 <_printf_i+0x184>
 8008472:	4615      	mov	r5, r2
 8008474:	e7bb      	b.n	80083ee <_printf_i+0x132>
 8008476:	682b      	ldr	r3, [r5, #0]
 8008478:	6826      	ldr	r6, [r4, #0]
 800847a:	1d18      	adds	r0, r3, #4
 800847c:	6961      	ldr	r1, [r4, #20]
 800847e:	6028      	str	r0, [r5, #0]
 8008480:	0635      	lsls	r5, r6, #24
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	d501      	bpl.n	800848a <_printf_i+0x1ce>
 8008486:	6019      	str	r1, [r3, #0]
 8008488:	e002      	b.n	8008490 <_printf_i+0x1d4>
 800848a:	0670      	lsls	r0, r6, #25
 800848c:	d5fb      	bpl.n	8008486 <_printf_i+0x1ca>
 800848e:	8019      	strh	r1, [r3, #0]
 8008490:	2300      	movs	r3, #0
 8008492:	4615      	mov	r5, r2
 8008494:	6123      	str	r3, [r4, #16]
 8008496:	e7ba      	b.n	800840e <_printf_i+0x152>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	2100      	movs	r1, #0
 800849c:	1d1a      	adds	r2, r3, #4
 800849e:	602a      	str	r2, [r5, #0]
 80084a0:	681d      	ldr	r5, [r3, #0]
 80084a2:	6862      	ldr	r2, [r4, #4]
 80084a4:	4628      	mov	r0, r5
 80084a6:	f002 fe4b 	bl	800b140 <memchr>
 80084aa:	b108      	cbz	r0, 80084b0 <_printf_i+0x1f4>
 80084ac:	1b40      	subs	r0, r0, r5
 80084ae:	6060      	str	r0, [r4, #4]
 80084b0:	6863      	ldr	r3, [r4, #4]
 80084b2:	6123      	str	r3, [r4, #16]
 80084b4:	2300      	movs	r3, #0
 80084b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ba:	e7a8      	b.n	800840e <_printf_i+0x152>
 80084bc:	462a      	mov	r2, r5
 80084be:	4649      	mov	r1, r9
 80084c0:	4640      	mov	r0, r8
 80084c2:	6923      	ldr	r3, [r4, #16]
 80084c4:	47d0      	blx	sl
 80084c6:	3001      	adds	r0, #1
 80084c8:	d0ab      	beq.n	8008422 <_printf_i+0x166>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	079b      	lsls	r3, r3, #30
 80084ce:	d413      	bmi.n	80084f8 <_printf_i+0x23c>
 80084d0:	68e0      	ldr	r0, [r4, #12]
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	4298      	cmp	r0, r3
 80084d6:	bfb8      	it	lt
 80084d8:	4618      	movlt	r0, r3
 80084da:	e7a4      	b.n	8008426 <_printf_i+0x16a>
 80084dc:	2301      	movs	r3, #1
 80084de:	4632      	mov	r2, r6
 80084e0:	4649      	mov	r1, r9
 80084e2:	4640      	mov	r0, r8
 80084e4:	47d0      	blx	sl
 80084e6:	3001      	adds	r0, #1
 80084e8:	d09b      	beq.n	8008422 <_printf_i+0x166>
 80084ea:	3501      	adds	r5, #1
 80084ec:	68e3      	ldr	r3, [r4, #12]
 80084ee:	9903      	ldr	r1, [sp, #12]
 80084f0:	1a5b      	subs	r3, r3, r1
 80084f2:	42ab      	cmp	r3, r5
 80084f4:	dcf2      	bgt.n	80084dc <_printf_i+0x220>
 80084f6:	e7eb      	b.n	80084d0 <_printf_i+0x214>
 80084f8:	2500      	movs	r5, #0
 80084fa:	f104 0619 	add.w	r6, r4, #25
 80084fe:	e7f5      	b.n	80084ec <_printf_i+0x230>
 8008500:	080114ca 	.word	0x080114ca
 8008504:	080114db 	.word	0x080114db

08008508 <_scanf_float>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	b087      	sub	sp, #28
 800850e:	9303      	str	r3, [sp, #12]
 8008510:	688b      	ldr	r3, [r1, #8]
 8008512:	4617      	mov	r7, r2
 8008514:	1e5a      	subs	r2, r3, #1
 8008516:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800851a:	bf85      	ittet	hi
 800851c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008520:	195b      	addhi	r3, r3, r5
 8008522:	2300      	movls	r3, #0
 8008524:	9302      	strhi	r3, [sp, #8]
 8008526:	bf88      	it	hi
 8008528:	f240 135d 	movwhi	r3, #349	; 0x15d
 800852c:	468b      	mov	fp, r1
 800852e:	f04f 0500 	mov.w	r5, #0
 8008532:	bf8c      	ite	hi
 8008534:	608b      	strhi	r3, [r1, #8]
 8008536:	9302      	strls	r3, [sp, #8]
 8008538:	680b      	ldr	r3, [r1, #0]
 800853a:	4680      	mov	r8, r0
 800853c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008540:	f84b 3b1c 	str.w	r3, [fp], #28
 8008544:	460c      	mov	r4, r1
 8008546:	465e      	mov	r6, fp
 8008548:	46aa      	mov	sl, r5
 800854a:	46a9      	mov	r9, r5
 800854c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008550:	9501      	str	r5, [sp, #4]
 8008552:	68a2      	ldr	r2, [r4, #8]
 8008554:	b152      	cbz	r2, 800856c <_scanf_float+0x64>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	2b4e      	cmp	r3, #78	; 0x4e
 800855c:	d864      	bhi.n	8008628 <_scanf_float+0x120>
 800855e:	2b40      	cmp	r3, #64	; 0x40
 8008560:	d83c      	bhi.n	80085dc <_scanf_float+0xd4>
 8008562:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008566:	b2c8      	uxtb	r0, r1
 8008568:	280e      	cmp	r0, #14
 800856a:	d93a      	bls.n	80085e2 <_scanf_float+0xda>
 800856c:	f1b9 0f00 	cmp.w	r9, #0
 8008570:	d003      	beq.n	800857a <_scanf_float+0x72>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800857e:	f1ba 0f01 	cmp.w	sl, #1
 8008582:	f200 8113 	bhi.w	80087ac <_scanf_float+0x2a4>
 8008586:	455e      	cmp	r6, fp
 8008588:	f200 8105 	bhi.w	8008796 <_scanf_float+0x28e>
 800858c:	2501      	movs	r5, #1
 800858e:	4628      	mov	r0, r5
 8008590:	b007      	add	sp, #28
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800859a:	2a0d      	cmp	r2, #13
 800859c:	d8e6      	bhi.n	800856c <_scanf_float+0x64>
 800859e:	a101      	add	r1, pc, #4	; (adr r1, 80085a4 <_scanf_float+0x9c>)
 80085a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085a4:	080086e3 	.word	0x080086e3
 80085a8:	0800856d 	.word	0x0800856d
 80085ac:	0800856d 	.word	0x0800856d
 80085b0:	0800856d 	.word	0x0800856d
 80085b4:	08008743 	.word	0x08008743
 80085b8:	0800871b 	.word	0x0800871b
 80085bc:	0800856d 	.word	0x0800856d
 80085c0:	0800856d 	.word	0x0800856d
 80085c4:	080086f1 	.word	0x080086f1
 80085c8:	0800856d 	.word	0x0800856d
 80085cc:	0800856d 	.word	0x0800856d
 80085d0:	0800856d 	.word	0x0800856d
 80085d4:	0800856d 	.word	0x0800856d
 80085d8:	080086a9 	.word	0x080086a9
 80085dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80085e0:	e7db      	b.n	800859a <_scanf_float+0x92>
 80085e2:	290e      	cmp	r1, #14
 80085e4:	d8c2      	bhi.n	800856c <_scanf_float+0x64>
 80085e6:	a001      	add	r0, pc, #4	; (adr r0, 80085ec <_scanf_float+0xe4>)
 80085e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085ec:	0800869b 	.word	0x0800869b
 80085f0:	0800856d 	.word	0x0800856d
 80085f4:	0800869b 	.word	0x0800869b
 80085f8:	0800872f 	.word	0x0800872f
 80085fc:	0800856d 	.word	0x0800856d
 8008600:	08008649 	.word	0x08008649
 8008604:	08008685 	.word	0x08008685
 8008608:	08008685 	.word	0x08008685
 800860c:	08008685 	.word	0x08008685
 8008610:	08008685 	.word	0x08008685
 8008614:	08008685 	.word	0x08008685
 8008618:	08008685 	.word	0x08008685
 800861c:	08008685 	.word	0x08008685
 8008620:	08008685 	.word	0x08008685
 8008624:	08008685 	.word	0x08008685
 8008628:	2b6e      	cmp	r3, #110	; 0x6e
 800862a:	d809      	bhi.n	8008640 <_scanf_float+0x138>
 800862c:	2b60      	cmp	r3, #96	; 0x60
 800862e:	d8b2      	bhi.n	8008596 <_scanf_float+0x8e>
 8008630:	2b54      	cmp	r3, #84	; 0x54
 8008632:	d077      	beq.n	8008724 <_scanf_float+0x21c>
 8008634:	2b59      	cmp	r3, #89	; 0x59
 8008636:	d199      	bne.n	800856c <_scanf_float+0x64>
 8008638:	2d07      	cmp	r5, #7
 800863a:	d197      	bne.n	800856c <_scanf_float+0x64>
 800863c:	2508      	movs	r5, #8
 800863e:	e029      	b.n	8008694 <_scanf_float+0x18c>
 8008640:	2b74      	cmp	r3, #116	; 0x74
 8008642:	d06f      	beq.n	8008724 <_scanf_float+0x21c>
 8008644:	2b79      	cmp	r3, #121	; 0x79
 8008646:	e7f6      	b.n	8008636 <_scanf_float+0x12e>
 8008648:	6821      	ldr	r1, [r4, #0]
 800864a:	05c8      	lsls	r0, r1, #23
 800864c:	d51a      	bpl.n	8008684 <_scanf_float+0x17c>
 800864e:	9b02      	ldr	r3, [sp, #8]
 8008650:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008654:	6021      	str	r1, [r4, #0]
 8008656:	f109 0901 	add.w	r9, r9, #1
 800865a:	b11b      	cbz	r3, 8008664 <_scanf_float+0x15c>
 800865c:	3b01      	subs	r3, #1
 800865e:	3201      	adds	r2, #1
 8008660:	9302      	str	r3, [sp, #8]
 8008662:	60a2      	str	r2, [r4, #8]
 8008664:	68a3      	ldr	r3, [r4, #8]
 8008666:	3b01      	subs	r3, #1
 8008668:	60a3      	str	r3, [r4, #8]
 800866a:	6923      	ldr	r3, [r4, #16]
 800866c:	3301      	adds	r3, #1
 800866e:	6123      	str	r3, [r4, #16]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3b01      	subs	r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	607b      	str	r3, [r7, #4]
 8008678:	f340 8084 	ble.w	8008784 <_scanf_float+0x27c>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	3301      	adds	r3, #1
 8008680:	603b      	str	r3, [r7, #0]
 8008682:	e766      	b.n	8008552 <_scanf_float+0x4a>
 8008684:	eb1a 0f05 	cmn.w	sl, r5
 8008688:	f47f af70 	bne.w	800856c <_scanf_float+0x64>
 800868c:	6822      	ldr	r2, [r4, #0]
 800868e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008692:	6022      	str	r2, [r4, #0]
 8008694:	f806 3b01 	strb.w	r3, [r6], #1
 8008698:	e7e4      	b.n	8008664 <_scanf_float+0x15c>
 800869a:	6822      	ldr	r2, [r4, #0]
 800869c:	0610      	lsls	r0, r2, #24
 800869e:	f57f af65 	bpl.w	800856c <_scanf_float+0x64>
 80086a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086a6:	e7f4      	b.n	8008692 <_scanf_float+0x18a>
 80086a8:	f1ba 0f00 	cmp.w	sl, #0
 80086ac:	d10e      	bne.n	80086cc <_scanf_float+0x1c4>
 80086ae:	f1b9 0f00 	cmp.w	r9, #0
 80086b2:	d10e      	bne.n	80086d2 <_scanf_float+0x1ca>
 80086b4:	6822      	ldr	r2, [r4, #0]
 80086b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086be:	d108      	bne.n	80086d2 <_scanf_float+0x1ca>
 80086c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086c4:	f04f 0a01 	mov.w	sl, #1
 80086c8:	6022      	str	r2, [r4, #0]
 80086ca:	e7e3      	b.n	8008694 <_scanf_float+0x18c>
 80086cc:	f1ba 0f02 	cmp.w	sl, #2
 80086d0:	d055      	beq.n	800877e <_scanf_float+0x276>
 80086d2:	2d01      	cmp	r5, #1
 80086d4:	d002      	beq.n	80086dc <_scanf_float+0x1d4>
 80086d6:	2d04      	cmp	r5, #4
 80086d8:	f47f af48 	bne.w	800856c <_scanf_float+0x64>
 80086dc:	3501      	adds	r5, #1
 80086de:	b2ed      	uxtb	r5, r5
 80086e0:	e7d8      	b.n	8008694 <_scanf_float+0x18c>
 80086e2:	f1ba 0f01 	cmp.w	sl, #1
 80086e6:	f47f af41 	bne.w	800856c <_scanf_float+0x64>
 80086ea:	f04f 0a02 	mov.w	sl, #2
 80086ee:	e7d1      	b.n	8008694 <_scanf_float+0x18c>
 80086f0:	b97d      	cbnz	r5, 8008712 <_scanf_float+0x20a>
 80086f2:	f1b9 0f00 	cmp.w	r9, #0
 80086f6:	f47f af3c 	bne.w	8008572 <_scanf_float+0x6a>
 80086fa:	6822      	ldr	r2, [r4, #0]
 80086fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008700:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008704:	f47f af39 	bne.w	800857a <_scanf_float+0x72>
 8008708:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800870c:	2501      	movs	r5, #1
 800870e:	6022      	str	r2, [r4, #0]
 8008710:	e7c0      	b.n	8008694 <_scanf_float+0x18c>
 8008712:	2d03      	cmp	r5, #3
 8008714:	d0e2      	beq.n	80086dc <_scanf_float+0x1d4>
 8008716:	2d05      	cmp	r5, #5
 8008718:	e7de      	b.n	80086d8 <_scanf_float+0x1d0>
 800871a:	2d02      	cmp	r5, #2
 800871c:	f47f af26 	bne.w	800856c <_scanf_float+0x64>
 8008720:	2503      	movs	r5, #3
 8008722:	e7b7      	b.n	8008694 <_scanf_float+0x18c>
 8008724:	2d06      	cmp	r5, #6
 8008726:	f47f af21 	bne.w	800856c <_scanf_float+0x64>
 800872a:	2507      	movs	r5, #7
 800872c:	e7b2      	b.n	8008694 <_scanf_float+0x18c>
 800872e:	6822      	ldr	r2, [r4, #0]
 8008730:	0591      	lsls	r1, r2, #22
 8008732:	f57f af1b 	bpl.w	800856c <_scanf_float+0x64>
 8008736:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800873a:	6022      	str	r2, [r4, #0]
 800873c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008740:	e7a8      	b.n	8008694 <_scanf_float+0x18c>
 8008742:	6822      	ldr	r2, [r4, #0]
 8008744:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008748:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800874c:	d006      	beq.n	800875c <_scanf_float+0x254>
 800874e:	0550      	lsls	r0, r2, #21
 8008750:	f57f af0c 	bpl.w	800856c <_scanf_float+0x64>
 8008754:	f1b9 0f00 	cmp.w	r9, #0
 8008758:	f43f af0f 	beq.w	800857a <_scanf_float+0x72>
 800875c:	0591      	lsls	r1, r2, #22
 800875e:	bf58      	it	pl
 8008760:	9901      	ldrpl	r1, [sp, #4]
 8008762:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008766:	bf58      	it	pl
 8008768:	eba9 0101 	subpl.w	r1, r9, r1
 800876c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008770:	f04f 0900 	mov.w	r9, #0
 8008774:	bf58      	it	pl
 8008776:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800877a:	6022      	str	r2, [r4, #0]
 800877c:	e78a      	b.n	8008694 <_scanf_float+0x18c>
 800877e:	f04f 0a03 	mov.w	sl, #3
 8008782:	e787      	b.n	8008694 <_scanf_float+0x18c>
 8008784:	4639      	mov	r1, r7
 8008786:	4640      	mov	r0, r8
 8008788:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800878c:	4798      	blx	r3
 800878e:	2800      	cmp	r0, #0
 8008790:	f43f aedf 	beq.w	8008552 <_scanf_float+0x4a>
 8008794:	e6ea      	b.n	800856c <_scanf_float+0x64>
 8008796:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800879a:	463a      	mov	r2, r7
 800879c:	4640      	mov	r0, r8
 800879e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087a2:	4798      	blx	r3
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	6123      	str	r3, [r4, #16]
 80087aa:	e6ec      	b.n	8008586 <_scanf_float+0x7e>
 80087ac:	1e6b      	subs	r3, r5, #1
 80087ae:	2b06      	cmp	r3, #6
 80087b0:	d825      	bhi.n	80087fe <_scanf_float+0x2f6>
 80087b2:	2d02      	cmp	r5, #2
 80087b4:	d836      	bhi.n	8008824 <_scanf_float+0x31c>
 80087b6:	455e      	cmp	r6, fp
 80087b8:	f67f aee8 	bls.w	800858c <_scanf_float+0x84>
 80087bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087c0:	463a      	mov	r2, r7
 80087c2:	4640      	mov	r0, r8
 80087c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087c8:	4798      	blx	r3
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	6123      	str	r3, [r4, #16]
 80087d0:	e7f1      	b.n	80087b6 <_scanf_float+0x2ae>
 80087d2:	9802      	ldr	r0, [sp, #8]
 80087d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80087dc:	463a      	mov	r2, r7
 80087de:	9002      	str	r0, [sp, #8]
 80087e0:	4640      	mov	r0, r8
 80087e2:	4798      	blx	r3
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	6123      	str	r3, [r4, #16]
 80087ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087ee:	fa5f fa8a 	uxtb.w	sl, sl
 80087f2:	f1ba 0f02 	cmp.w	sl, #2
 80087f6:	d1ec      	bne.n	80087d2 <_scanf_float+0x2ca>
 80087f8:	3d03      	subs	r5, #3
 80087fa:	b2ed      	uxtb	r5, r5
 80087fc:	1b76      	subs	r6, r6, r5
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	05da      	lsls	r2, r3, #23
 8008802:	d52f      	bpl.n	8008864 <_scanf_float+0x35c>
 8008804:	055b      	lsls	r3, r3, #21
 8008806:	d510      	bpl.n	800882a <_scanf_float+0x322>
 8008808:	455e      	cmp	r6, fp
 800880a:	f67f aebf 	bls.w	800858c <_scanf_float+0x84>
 800880e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008812:	463a      	mov	r2, r7
 8008814:	4640      	mov	r0, r8
 8008816:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800881a:	4798      	blx	r3
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	3b01      	subs	r3, #1
 8008820:	6123      	str	r3, [r4, #16]
 8008822:	e7f1      	b.n	8008808 <_scanf_float+0x300>
 8008824:	46aa      	mov	sl, r5
 8008826:	9602      	str	r6, [sp, #8]
 8008828:	e7df      	b.n	80087ea <_scanf_float+0x2e2>
 800882a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800882e:	6923      	ldr	r3, [r4, #16]
 8008830:	2965      	cmp	r1, #101	; 0x65
 8008832:	f103 33ff 	add.w	r3, r3, #4294967295
 8008836:	f106 35ff 	add.w	r5, r6, #4294967295
 800883a:	6123      	str	r3, [r4, #16]
 800883c:	d00c      	beq.n	8008858 <_scanf_float+0x350>
 800883e:	2945      	cmp	r1, #69	; 0x45
 8008840:	d00a      	beq.n	8008858 <_scanf_float+0x350>
 8008842:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008846:	463a      	mov	r2, r7
 8008848:	4640      	mov	r0, r8
 800884a:	4798      	blx	r3
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008852:	3b01      	subs	r3, #1
 8008854:	1eb5      	subs	r5, r6, #2
 8008856:	6123      	str	r3, [r4, #16]
 8008858:	463a      	mov	r2, r7
 800885a:	4640      	mov	r0, r8
 800885c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008860:	4798      	blx	r3
 8008862:	462e      	mov	r6, r5
 8008864:	6825      	ldr	r5, [r4, #0]
 8008866:	f015 0510 	ands.w	r5, r5, #16
 800886a:	d155      	bne.n	8008918 <_scanf_float+0x410>
 800886c:	7035      	strb	r5, [r6, #0]
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008878:	d11b      	bne.n	80088b2 <_scanf_float+0x3aa>
 800887a:	9b01      	ldr	r3, [sp, #4]
 800887c:	454b      	cmp	r3, r9
 800887e:	eba3 0209 	sub.w	r2, r3, r9
 8008882:	d123      	bne.n	80088cc <_scanf_float+0x3c4>
 8008884:	2200      	movs	r2, #0
 8008886:	4659      	mov	r1, fp
 8008888:	4640      	mov	r0, r8
 800888a:	f000 ffc5 	bl	8009818 <_strtod_r>
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	9b03      	ldr	r3, [sp, #12]
 8008892:	f012 0f02 	tst.w	r2, #2
 8008896:	4606      	mov	r6, r0
 8008898:	460f      	mov	r7, r1
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	d021      	beq.n	80088e2 <_scanf_float+0x3da>
 800889e:	1d1a      	adds	r2, r3, #4
 80088a0:	9903      	ldr	r1, [sp, #12]
 80088a2:	600a      	str	r2, [r1, #0]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	e9c3 6700 	strd	r6, r7, [r3]
 80088aa:	68e3      	ldr	r3, [r4, #12]
 80088ac:	3301      	adds	r3, #1
 80088ae:	60e3      	str	r3, [r4, #12]
 80088b0:	e66d      	b.n	800858e <_scanf_float+0x86>
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0e5      	beq.n	8008884 <_scanf_float+0x37c>
 80088b8:	9905      	ldr	r1, [sp, #20]
 80088ba:	230a      	movs	r3, #10
 80088bc:	462a      	mov	r2, r5
 80088be:	4640      	mov	r0, r8
 80088c0:	3101      	adds	r1, #1
 80088c2:	f001 f82b 	bl	800991c <_strtol_r>
 80088c6:	9b04      	ldr	r3, [sp, #16]
 80088c8:	9e05      	ldr	r6, [sp, #20]
 80088ca:	1ac2      	subs	r2, r0, r3
 80088cc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80088d0:	429e      	cmp	r6, r3
 80088d2:	bf28      	it	cs
 80088d4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80088d8:	4630      	mov	r0, r6
 80088da:	4910      	ldr	r1, [pc, #64]	; (800891c <_scanf_float+0x414>)
 80088dc:	f000 f92e 	bl	8008b3c <siprintf>
 80088e0:	e7d0      	b.n	8008884 <_scanf_float+0x37c>
 80088e2:	f012 0f04 	tst.w	r2, #4
 80088e6:	f103 0204 	add.w	r2, r3, #4
 80088ea:	d1d9      	bne.n	80088a0 <_scanf_float+0x398>
 80088ec:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80088f0:	f8cc 2000 	str.w	r2, [ip]
 80088f4:	f8d3 8000 	ldr.w	r8, [r3]
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	f7f8 f886 	bl	8000a0c <__aeabi_dcmpun>
 8008900:	b128      	cbz	r0, 800890e <_scanf_float+0x406>
 8008902:	4807      	ldr	r0, [pc, #28]	; (8008920 <_scanf_float+0x418>)
 8008904:	f000 f916 	bl	8008b34 <nanf>
 8008908:	f8c8 0000 	str.w	r0, [r8]
 800890c:	e7cd      	b.n	80088aa <_scanf_float+0x3a2>
 800890e:	4630      	mov	r0, r6
 8008910:	4639      	mov	r1, r7
 8008912:	f7f8 f8d9 	bl	8000ac8 <__aeabi_d2f>
 8008916:	e7f7      	b.n	8008908 <_scanf_float+0x400>
 8008918:	2500      	movs	r5, #0
 800891a:	e638      	b.n	800858e <_scanf_float+0x86>
 800891c:	080114ec 	.word	0x080114ec
 8008920:	080118f8 	.word	0x080118f8

08008924 <iprintf>:
 8008924:	b40f      	push	{r0, r1, r2, r3}
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <iprintf+0x2c>)
 8008928:	b513      	push	{r0, r1, r4, lr}
 800892a:	681c      	ldr	r4, [r3, #0]
 800892c:	b124      	cbz	r4, 8008938 <iprintf+0x14>
 800892e:	69a3      	ldr	r3, [r4, #24]
 8008930:	b913      	cbnz	r3, 8008938 <iprintf+0x14>
 8008932:	4620      	mov	r0, r4
 8008934:	f7fe ffc0 	bl	80078b8 <__sinit>
 8008938:	ab05      	add	r3, sp, #20
 800893a:	4620      	mov	r0, r4
 800893c:	9a04      	ldr	r2, [sp, #16]
 800893e:	68a1      	ldr	r1, [r4, #8]
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	f003 fa67 	bl	800be14 <_vfiprintf_r>
 8008946:	b002      	add	sp, #8
 8008948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800894c:	b004      	add	sp, #16
 800894e:	4770      	bx	lr
 8008950:	2000002c 	.word	0x2000002c

08008954 <_puts_r>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	460e      	mov	r6, r1
 8008958:	4605      	mov	r5, r0
 800895a:	b118      	cbz	r0, 8008964 <_puts_r+0x10>
 800895c:	6983      	ldr	r3, [r0, #24]
 800895e:	b90b      	cbnz	r3, 8008964 <_puts_r+0x10>
 8008960:	f7fe ffaa 	bl	80078b8 <__sinit>
 8008964:	69ab      	ldr	r3, [r5, #24]
 8008966:	68ac      	ldr	r4, [r5, #8]
 8008968:	b913      	cbnz	r3, 8008970 <_puts_r+0x1c>
 800896a:	4628      	mov	r0, r5
 800896c:	f7fe ffa4 	bl	80078b8 <__sinit>
 8008970:	4b2c      	ldr	r3, [pc, #176]	; (8008a24 <_puts_r+0xd0>)
 8008972:	429c      	cmp	r4, r3
 8008974:	d120      	bne.n	80089b8 <_puts_r+0x64>
 8008976:	686c      	ldr	r4, [r5, #4]
 8008978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800897a:	07db      	lsls	r3, r3, #31
 800897c:	d405      	bmi.n	800898a <_puts_r+0x36>
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	0598      	lsls	r0, r3, #22
 8008982:	d402      	bmi.n	800898a <_puts_r+0x36>
 8008984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008986:	f7ff f85a 	bl	8007a3e <__retarget_lock_acquire_recursive>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	0719      	lsls	r1, r3, #28
 800898e:	d51d      	bpl.n	80089cc <_puts_r+0x78>
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	b1db      	cbz	r3, 80089cc <_puts_r+0x78>
 8008994:	3e01      	subs	r6, #1
 8008996:	68a3      	ldr	r3, [r4, #8]
 8008998:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800899c:	3b01      	subs	r3, #1
 800899e:	60a3      	str	r3, [r4, #8]
 80089a0:	bb39      	cbnz	r1, 80089f2 <_puts_r+0x9e>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	da38      	bge.n	8008a18 <_puts_r+0xc4>
 80089a6:	4622      	mov	r2, r4
 80089a8:	210a      	movs	r1, #10
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 ffb8 	bl	8009920 <__swbuf_r>
 80089b0:	3001      	adds	r0, #1
 80089b2:	d011      	beq.n	80089d8 <_puts_r+0x84>
 80089b4:	250a      	movs	r5, #10
 80089b6:	e011      	b.n	80089dc <_puts_r+0x88>
 80089b8:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <_puts_r+0xd4>)
 80089ba:	429c      	cmp	r4, r3
 80089bc:	d101      	bne.n	80089c2 <_puts_r+0x6e>
 80089be:	68ac      	ldr	r4, [r5, #8]
 80089c0:	e7da      	b.n	8008978 <_puts_r+0x24>
 80089c2:	4b1a      	ldr	r3, [pc, #104]	; (8008a2c <_puts_r+0xd8>)
 80089c4:	429c      	cmp	r4, r3
 80089c6:	bf08      	it	eq
 80089c8:	68ec      	ldreq	r4, [r5, #12]
 80089ca:	e7d5      	b.n	8008978 <_puts_r+0x24>
 80089cc:	4621      	mov	r1, r4
 80089ce:	4628      	mov	r0, r5
 80089d0:	f001 f80a 	bl	80099e8 <__swsetup_r>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d0dd      	beq.n	8008994 <_puts_r+0x40>
 80089d8:	f04f 35ff 	mov.w	r5, #4294967295
 80089dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089de:	07da      	lsls	r2, r3, #31
 80089e0:	d405      	bmi.n	80089ee <_puts_r+0x9a>
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	059b      	lsls	r3, r3, #22
 80089e6:	d402      	bmi.n	80089ee <_puts_r+0x9a>
 80089e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ea:	f7ff f829 	bl	8007a40 <__retarget_lock_release_recursive>
 80089ee:	4628      	mov	r0, r5
 80089f0:	bd70      	pop	{r4, r5, r6, pc}
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	da04      	bge.n	8008a00 <_puts_r+0xac>
 80089f6:	69a2      	ldr	r2, [r4, #24]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	dc06      	bgt.n	8008a0a <_puts_r+0xb6>
 80089fc:	290a      	cmp	r1, #10
 80089fe:	d004      	beq.n	8008a0a <_puts_r+0xb6>
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	6022      	str	r2, [r4, #0]
 8008a06:	7019      	strb	r1, [r3, #0]
 8008a08:	e7c5      	b.n	8008996 <_puts_r+0x42>
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f000 ff87 	bl	8009920 <__swbuf_r>
 8008a12:	3001      	adds	r0, #1
 8008a14:	d1bf      	bne.n	8008996 <_puts_r+0x42>
 8008a16:	e7df      	b.n	80089d8 <_puts_r+0x84>
 8008a18:	250a      	movs	r5, #10
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	6022      	str	r2, [r4, #0]
 8008a20:	701d      	strb	r5, [r3, #0]
 8008a22:	e7db      	b.n	80089dc <_puts_r+0x88>
 8008a24:	08011474 	.word	0x08011474
 8008a28:	08011494 	.word	0x08011494
 8008a2c:	08011454 	.word	0x08011454

08008a30 <puts>:
 8008a30:	4b02      	ldr	r3, [pc, #8]	; (8008a3c <puts+0xc>)
 8008a32:	4601      	mov	r1, r0
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	f7ff bf8d 	b.w	8008954 <_puts_r>
 8008a3a:	bf00      	nop
 8008a3c:	2000002c 	.word	0x2000002c

08008a40 <cleanup_glue>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	460c      	mov	r4, r1
 8008a44:	6809      	ldr	r1, [r1, #0]
 8008a46:	4605      	mov	r5, r0
 8008a48:	b109      	cbz	r1, 8008a4e <cleanup_glue+0xe>
 8008a4a:	f7ff fff9 	bl	8008a40 <cleanup_glue>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4628      	mov	r0, r5
 8008a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a56:	f7ff b81b 	b.w	8007a90 <_free_r>
	...

08008a5c <_reclaim_reent>:
 8008a5c:	4b2c      	ldr	r3, [pc, #176]	; (8008b10 <_reclaim_reent+0xb4>)
 8008a5e:	b570      	push	{r4, r5, r6, lr}
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4604      	mov	r4, r0
 8008a64:	4283      	cmp	r3, r0
 8008a66:	d051      	beq.n	8008b0c <_reclaim_reent+0xb0>
 8008a68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008a6a:	b143      	cbz	r3, 8008a7e <_reclaim_reent+0x22>
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d14a      	bne.n	8008b08 <_reclaim_reent+0xac>
 8008a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a74:	6819      	ldr	r1, [r3, #0]
 8008a76:	b111      	cbz	r1, 8008a7e <_reclaim_reent+0x22>
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f7ff f809 	bl	8007a90 <_free_r>
 8008a7e:	6961      	ldr	r1, [r4, #20]
 8008a80:	b111      	cbz	r1, 8008a88 <_reclaim_reent+0x2c>
 8008a82:	4620      	mov	r0, r4
 8008a84:	f7ff f804 	bl	8007a90 <_free_r>
 8008a88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a8a:	b111      	cbz	r1, 8008a92 <_reclaim_reent+0x36>
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f7fe ffff 	bl	8007a90 <_free_r>
 8008a92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a94:	b111      	cbz	r1, 8008a9c <_reclaim_reent+0x40>
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7fe fffa 	bl	8007a90 <_free_r>
 8008a9c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008a9e:	b111      	cbz	r1, 8008aa6 <_reclaim_reent+0x4a>
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f7fe fff5 	bl	8007a90 <_free_r>
 8008aa6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008aa8:	b111      	cbz	r1, 8008ab0 <_reclaim_reent+0x54>
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f7fe fff0 	bl	8007a90 <_free_r>
 8008ab0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008ab2:	b111      	cbz	r1, 8008aba <_reclaim_reent+0x5e>
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7fe ffeb 	bl	8007a90 <_free_r>
 8008aba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008abc:	b111      	cbz	r1, 8008ac4 <_reclaim_reent+0x68>
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f7fe ffe6 	bl	8007a90 <_free_r>
 8008ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ac6:	b111      	cbz	r1, 8008ace <_reclaim_reent+0x72>
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f7fe ffe1 	bl	8007a90 <_free_r>
 8008ace:	69a3      	ldr	r3, [r4, #24]
 8008ad0:	b1e3      	cbz	r3, 8008b0c <_reclaim_reent+0xb0>
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ad6:	4798      	blx	r3
 8008ad8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ada:	b1b9      	cbz	r1, 8008b0c <_reclaim_reent+0xb0>
 8008adc:	4620      	mov	r0, r4
 8008ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ae2:	f7ff bfad 	b.w	8008a40 <cleanup_glue>
 8008ae6:	5949      	ldr	r1, [r1, r5]
 8008ae8:	b941      	cbnz	r1, 8008afc <_reclaim_reent+0xa0>
 8008aea:	3504      	adds	r5, #4
 8008aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aee:	2d80      	cmp	r5, #128	; 0x80
 8008af0:	68d9      	ldr	r1, [r3, #12]
 8008af2:	d1f8      	bne.n	8008ae6 <_reclaim_reent+0x8a>
 8008af4:	4620      	mov	r0, r4
 8008af6:	f7fe ffcb 	bl	8007a90 <_free_r>
 8008afa:	e7ba      	b.n	8008a72 <_reclaim_reent+0x16>
 8008afc:	680e      	ldr	r6, [r1, #0]
 8008afe:	4620      	mov	r0, r4
 8008b00:	f7fe ffc6 	bl	8007a90 <_free_r>
 8008b04:	4631      	mov	r1, r6
 8008b06:	e7ef      	b.n	8008ae8 <_reclaim_reent+0x8c>
 8008b08:	2500      	movs	r5, #0
 8008b0a:	e7ef      	b.n	8008aec <_reclaim_reent+0x90>
 8008b0c:	bd70      	pop	{r4, r5, r6, pc}
 8008b0e:	bf00      	nop
 8008b10:	2000002c 	.word	0x2000002c

08008b14 <_sbrk_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	2300      	movs	r3, #0
 8008b18:	4d05      	ldr	r5, [pc, #20]	; (8008b30 <_sbrk_r+0x1c>)
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	602b      	str	r3, [r5, #0]
 8008b20:	f7f8 fc8c 	bl	800143c <_sbrk>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_sbrk_r+0x1a>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_sbrk_r+0x1a>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	20001d3c 	.word	0x20001d3c

08008b34 <nanf>:
 8008b34:	4800      	ldr	r0, [pc, #0]	; (8008b38 <nanf+0x4>)
 8008b36:	4770      	bx	lr
 8008b38:	7fc00000 	.word	0x7fc00000

08008b3c <siprintf>:
 8008b3c:	b40e      	push	{r1, r2, r3}
 8008b3e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b42:	b500      	push	{lr}
 8008b44:	b09c      	sub	sp, #112	; 0x70
 8008b46:	ab1d      	add	r3, sp, #116	; 0x74
 8008b48:	9002      	str	r0, [sp, #8]
 8008b4a:	9006      	str	r0, [sp, #24]
 8008b4c:	9107      	str	r1, [sp, #28]
 8008b4e:	9104      	str	r1, [sp, #16]
 8008b50:	4808      	ldr	r0, [pc, #32]	; (8008b74 <siprintf+0x38>)
 8008b52:	4909      	ldr	r1, [pc, #36]	; (8008b78 <siprintf+0x3c>)
 8008b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b58:	9105      	str	r1, [sp, #20]
 8008b5a:	6800      	ldr	r0, [r0, #0]
 8008b5c:	a902      	add	r1, sp, #8
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	f003 f830 	bl	800bbc4 <_svfiprintf_r>
 8008b64:	2200      	movs	r2, #0
 8008b66:	9b02      	ldr	r3, [sp, #8]
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	b01c      	add	sp, #112	; 0x70
 8008b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b70:	b003      	add	sp, #12
 8008b72:	4770      	bx	lr
 8008b74:	2000002c 	.word	0x2000002c
 8008b78:	ffff0208 	.word	0xffff0208

08008b7c <__sread>:
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	460c      	mov	r4, r1
 8008b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b84:	f003 fa76 	bl	800c074 <_read_r>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	bfab      	itete	ge
 8008b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b90:	181b      	addge	r3, r3, r0
 8008b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b96:	bfac      	ite	ge
 8008b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b9a:	81a3      	strhlt	r3, [r4, #12]
 8008b9c:	bd10      	pop	{r4, pc}

08008b9e <__swrite>:
 8008b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba2:	461f      	mov	r7, r3
 8008ba4:	898b      	ldrh	r3, [r1, #12]
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	05db      	lsls	r3, r3, #23
 8008baa:	460c      	mov	r4, r1
 8008bac:	4616      	mov	r6, r2
 8008bae:	d505      	bpl.n	8008bbc <__swrite+0x1e>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bb8:	f002 fa38 	bl	800b02c <_lseek_r>
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	4632      	mov	r2, r6
 8008bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bc4:	81a3      	strh	r3, [r4, #12]
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	463b      	mov	r3, r7
 8008bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd2:	f000 bef7 	b.w	80099c4 <_write_r>

08008bd6 <__sseek>:
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	460c      	mov	r4, r1
 8008bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bde:	f002 fa25 	bl	800b02c <_lseek_r>
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	bf15      	itete	ne
 8008be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bf2:	81a3      	strheq	r3, [r4, #12]
 8008bf4:	bf18      	it	ne
 8008bf6:	81a3      	strhne	r3, [r4, #12]
 8008bf8:	bd10      	pop	{r4, pc}

08008bfa <__sclose>:
 8008bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bfe:	f000 bf61 	b.w	8009ac4 <_close_r>

08008c02 <sulp>:
 8008c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c06:	460f      	mov	r7, r1
 8008c08:	4690      	mov	r8, r2
 8008c0a:	f002 fe23 	bl	800b854 <__ulp>
 8008c0e:	4604      	mov	r4, r0
 8008c10:	460d      	mov	r5, r1
 8008c12:	f1b8 0f00 	cmp.w	r8, #0
 8008c16:	d011      	beq.n	8008c3c <sulp+0x3a>
 8008c18:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008c1c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	dd0b      	ble.n	8008c3c <sulp+0x3a>
 8008c24:	2400      	movs	r4, #0
 8008c26:	051b      	lsls	r3, r3, #20
 8008c28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c2c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c30:	4622      	mov	r2, r4
 8008c32:	462b      	mov	r3, r5
 8008c34:	f7f7 fc50 	bl	80004d8 <__aeabi_dmul>
 8008c38:	4604      	mov	r4, r0
 8008c3a:	460d      	mov	r5, r1
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4629      	mov	r1, r5
 8008c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c44:	0000      	movs	r0, r0
	...

08008c48 <_strtod_l>:
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	469b      	mov	fp, r3
 8008c4e:	2300      	movs	r3, #0
 8008c50:	b09f      	sub	sp, #124	; 0x7c
 8008c52:	931a      	str	r3, [sp, #104]	; 0x68
 8008c54:	4b9e      	ldr	r3, [pc, #632]	; (8008ed0 <_strtod_l+0x288>)
 8008c56:	4682      	mov	sl, r0
 8008c58:	681f      	ldr	r7, [r3, #0]
 8008c5a:	460e      	mov	r6, r1
 8008c5c:	4638      	mov	r0, r7
 8008c5e:	9215      	str	r2, [sp, #84]	; 0x54
 8008c60:	f7f7 fa76 	bl	8000150 <strlen>
 8008c64:	f04f 0800 	mov.w	r8, #0
 8008c68:	4604      	mov	r4, r0
 8008c6a:	f04f 0900 	mov.w	r9, #0
 8008c6e:	9619      	str	r6, [sp, #100]	; 0x64
 8008c70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	2a2b      	cmp	r2, #43	; 0x2b
 8008c76:	d04c      	beq.n	8008d12 <_strtod_l+0xca>
 8008c78:	d83a      	bhi.n	8008cf0 <_strtod_l+0xa8>
 8008c7a:	2a0d      	cmp	r2, #13
 8008c7c:	d833      	bhi.n	8008ce6 <_strtod_l+0x9e>
 8008c7e:	2a08      	cmp	r2, #8
 8008c80:	d833      	bhi.n	8008cea <_strtod_l+0xa2>
 8008c82:	2a00      	cmp	r2, #0
 8008c84:	d03d      	beq.n	8008d02 <_strtod_l+0xba>
 8008c86:	2300      	movs	r3, #0
 8008c88:	930a      	str	r3, [sp, #40]	; 0x28
 8008c8a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008c8c:	782b      	ldrb	r3, [r5, #0]
 8008c8e:	2b30      	cmp	r3, #48	; 0x30
 8008c90:	f040 80aa 	bne.w	8008de8 <_strtod_l+0x1a0>
 8008c94:	786b      	ldrb	r3, [r5, #1]
 8008c96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c9a:	2b58      	cmp	r3, #88	; 0x58
 8008c9c:	d166      	bne.n	8008d6c <_strtod_l+0x124>
 8008c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca0:	4650      	mov	r0, sl
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	ab1a      	add	r3, sp, #104	; 0x68
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	4a8a      	ldr	r2, [pc, #552]	; (8008ed4 <_strtod_l+0x28c>)
 8008caa:	f8cd b008 	str.w	fp, [sp, #8]
 8008cae:	ab1b      	add	r3, sp, #108	; 0x6c
 8008cb0:	a919      	add	r1, sp, #100	; 0x64
 8008cb2:	f001 feb9 	bl	800aa28 <__gethex>
 8008cb6:	f010 0607 	ands.w	r6, r0, #7
 8008cba:	4604      	mov	r4, r0
 8008cbc:	d005      	beq.n	8008cca <_strtod_l+0x82>
 8008cbe:	2e06      	cmp	r6, #6
 8008cc0:	d129      	bne.n	8008d16 <_strtod_l+0xce>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	3501      	adds	r5, #1
 8008cc6:	9519      	str	r5, [sp, #100]	; 0x64
 8008cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8008cca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f040 858a 	bne.w	80097e6 <_strtod_l+0xb9e>
 8008cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd4:	b1d3      	cbz	r3, 8008d0c <_strtod_l+0xc4>
 8008cd6:	4642      	mov	r2, r8
 8008cd8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008cdc:	4610      	mov	r0, r2
 8008cde:	4619      	mov	r1, r3
 8008ce0:	b01f      	add	sp, #124	; 0x7c
 8008ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce6:	2a20      	cmp	r2, #32
 8008ce8:	d1cd      	bne.n	8008c86 <_strtod_l+0x3e>
 8008cea:	3301      	adds	r3, #1
 8008cec:	9319      	str	r3, [sp, #100]	; 0x64
 8008cee:	e7bf      	b.n	8008c70 <_strtod_l+0x28>
 8008cf0:	2a2d      	cmp	r2, #45	; 0x2d
 8008cf2:	d1c8      	bne.n	8008c86 <_strtod_l+0x3e>
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	920a      	str	r2, [sp, #40]	; 0x28
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	9219      	str	r2, [sp, #100]	; 0x64
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1c3      	bne.n	8008c8a <_strtod_l+0x42>
 8008d02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d04:	9619      	str	r6, [sp, #100]	; 0x64
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f040 856b 	bne.w	80097e2 <_strtod_l+0xb9a>
 8008d0c:	4642      	mov	r2, r8
 8008d0e:	464b      	mov	r3, r9
 8008d10:	e7e4      	b.n	8008cdc <_strtod_l+0x94>
 8008d12:	2200      	movs	r2, #0
 8008d14:	e7ef      	b.n	8008cf6 <_strtod_l+0xae>
 8008d16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008d18:	b13a      	cbz	r2, 8008d2a <_strtod_l+0xe2>
 8008d1a:	2135      	movs	r1, #53	; 0x35
 8008d1c:	a81c      	add	r0, sp, #112	; 0x70
 8008d1e:	f002 fe9d 	bl	800ba5c <__copybits>
 8008d22:	4650      	mov	r0, sl
 8008d24:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d26:	f002 fa65 	bl	800b1f4 <_Bfree>
 8008d2a:	3e01      	subs	r6, #1
 8008d2c:	2e04      	cmp	r6, #4
 8008d2e:	d806      	bhi.n	8008d3e <_strtod_l+0xf6>
 8008d30:	e8df f006 	tbb	[pc, r6]
 8008d34:	1714030a 	.word	0x1714030a
 8008d38:	0a          	.byte	0x0a
 8008d39:	00          	.byte	0x00
 8008d3a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008d3e:	0721      	lsls	r1, r4, #28
 8008d40:	d5c3      	bpl.n	8008cca <_strtod_l+0x82>
 8008d42:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008d46:	e7c0      	b.n	8008cca <_strtod_l+0x82>
 8008d48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008d4a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008d4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d56:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008d5a:	e7f0      	b.n	8008d3e <_strtod_l+0xf6>
 8008d5c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008ed8 <_strtod_l+0x290>
 8008d60:	e7ed      	b.n	8008d3e <_strtod_l+0xf6>
 8008d62:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008d66:	f04f 38ff 	mov.w	r8, #4294967295
 8008d6a:	e7e8      	b.n	8008d3e <_strtod_l+0xf6>
 8008d6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	9219      	str	r2, [sp, #100]	; 0x64
 8008d72:	785b      	ldrb	r3, [r3, #1]
 8008d74:	2b30      	cmp	r3, #48	; 0x30
 8008d76:	d0f9      	beq.n	8008d6c <_strtod_l+0x124>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d0a6      	beq.n	8008cca <_strtod_l+0x82>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	9307      	str	r3, [sp, #28]
 8008d80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d82:	220a      	movs	r2, #10
 8008d84:	9308      	str	r3, [sp, #32]
 8008d86:	2300      	movs	r3, #0
 8008d88:	469b      	mov	fp, r3
 8008d8a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008d8e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008d90:	7805      	ldrb	r5, [r0, #0]
 8008d92:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008d96:	b2d9      	uxtb	r1, r3
 8008d98:	2909      	cmp	r1, #9
 8008d9a:	d927      	bls.n	8008dec <_strtod_l+0x1a4>
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	4639      	mov	r1, r7
 8008da0:	f003 f980 	bl	800c0a4 <strncmp>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d033      	beq.n	8008e10 <_strtod_l+0x1c8>
 8008da8:	2000      	movs	r0, #0
 8008daa:	462a      	mov	r2, r5
 8008dac:	465c      	mov	r4, fp
 8008dae:	4603      	mov	r3, r0
 8008db0:	9004      	str	r0, [sp, #16]
 8008db2:	2a65      	cmp	r2, #101	; 0x65
 8008db4:	d001      	beq.n	8008dba <_strtod_l+0x172>
 8008db6:	2a45      	cmp	r2, #69	; 0x45
 8008db8:	d114      	bne.n	8008de4 <_strtod_l+0x19c>
 8008dba:	b91c      	cbnz	r4, 8008dc4 <_strtod_l+0x17c>
 8008dbc:	9a07      	ldr	r2, [sp, #28]
 8008dbe:	4302      	orrs	r2, r0
 8008dc0:	d09f      	beq.n	8008d02 <_strtod_l+0xba>
 8008dc2:	2400      	movs	r4, #0
 8008dc4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008dc6:	1c72      	adds	r2, r6, #1
 8008dc8:	9219      	str	r2, [sp, #100]	; 0x64
 8008dca:	7872      	ldrb	r2, [r6, #1]
 8008dcc:	2a2b      	cmp	r2, #43	; 0x2b
 8008dce:	d079      	beq.n	8008ec4 <_strtod_l+0x27c>
 8008dd0:	2a2d      	cmp	r2, #45	; 0x2d
 8008dd2:	f000 8083 	beq.w	8008edc <_strtod_l+0x294>
 8008dd6:	2700      	movs	r7, #0
 8008dd8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008ddc:	2909      	cmp	r1, #9
 8008dde:	f240 8083 	bls.w	8008ee8 <_strtod_l+0x2a0>
 8008de2:	9619      	str	r6, [sp, #100]	; 0x64
 8008de4:	2500      	movs	r5, #0
 8008de6:	e09f      	b.n	8008f28 <_strtod_l+0x2e0>
 8008de8:	2300      	movs	r3, #0
 8008dea:	e7c8      	b.n	8008d7e <_strtod_l+0x136>
 8008dec:	f1bb 0f08 	cmp.w	fp, #8
 8008df0:	bfd5      	itete	le
 8008df2:	9906      	ldrle	r1, [sp, #24]
 8008df4:	9905      	ldrgt	r1, [sp, #20]
 8008df6:	fb02 3301 	mlale	r3, r2, r1, r3
 8008dfa:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008dfe:	f100 0001 	add.w	r0, r0, #1
 8008e02:	bfd4      	ite	le
 8008e04:	9306      	strle	r3, [sp, #24]
 8008e06:	9305      	strgt	r3, [sp, #20]
 8008e08:	f10b 0b01 	add.w	fp, fp, #1
 8008e0c:	9019      	str	r0, [sp, #100]	; 0x64
 8008e0e:	e7be      	b.n	8008d8e <_strtod_l+0x146>
 8008e10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e12:	191a      	adds	r2, r3, r4
 8008e14:	9219      	str	r2, [sp, #100]	; 0x64
 8008e16:	5d1a      	ldrb	r2, [r3, r4]
 8008e18:	f1bb 0f00 	cmp.w	fp, #0
 8008e1c:	d036      	beq.n	8008e8c <_strtod_l+0x244>
 8008e1e:	465c      	mov	r4, fp
 8008e20:	9004      	str	r0, [sp, #16]
 8008e22:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e26:	2b09      	cmp	r3, #9
 8008e28:	d912      	bls.n	8008e50 <_strtod_l+0x208>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e7c1      	b.n	8008db2 <_strtod_l+0x16a>
 8008e2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e30:	3001      	adds	r0, #1
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	9219      	str	r2, [sp, #100]	; 0x64
 8008e36:	785a      	ldrb	r2, [r3, #1]
 8008e38:	2a30      	cmp	r2, #48	; 0x30
 8008e3a:	d0f8      	beq.n	8008e2e <_strtod_l+0x1e6>
 8008e3c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	f200 84d5 	bhi.w	80097f0 <_strtod_l+0xba8>
 8008e46:	9004      	str	r0, [sp, #16]
 8008e48:	2000      	movs	r0, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e4e:	9308      	str	r3, [sp, #32]
 8008e50:	3a30      	subs	r2, #48	; 0x30
 8008e52:	f100 0301 	add.w	r3, r0, #1
 8008e56:	d013      	beq.n	8008e80 <_strtod_l+0x238>
 8008e58:	9904      	ldr	r1, [sp, #16]
 8008e5a:	1905      	adds	r5, r0, r4
 8008e5c:	4419      	add	r1, r3
 8008e5e:	9104      	str	r1, [sp, #16]
 8008e60:	4623      	mov	r3, r4
 8008e62:	210a      	movs	r1, #10
 8008e64:	42ab      	cmp	r3, r5
 8008e66:	d113      	bne.n	8008e90 <_strtod_l+0x248>
 8008e68:	1823      	adds	r3, r4, r0
 8008e6a:	2b08      	cmp	r3, #8
 8008e6c:	f104 0401 	add.w	r4, r4, #1
 8008e70:	4404      	add	r4, r0
 8008e72:	dc1b      	bgt.n	8008eac <_strtod_l+0x264>
 8008e74:	230a      	movs	r3, #10
 8008e76:	9906      	ldr	r1, [sp, #24]
 8008e78:	fb03 2301 	mla	r3, r3, r1, r2
 8008e7c:	9306      	str	r3, [sp, #24]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e82:	4618      	mov	r0, r3
 8008e84:	1c51      	adds	r1, r2, #1
 8008e86:	9119      	str	r1, [sp, #100]	; 0x64
 8008e88:	7852      	ldrb	r2, [r2, #1]
 8008e8a:	e7ca      	b.n	8008e22 <_strtod_l+0x1da>
 8008e8c:	4658      	mov	r0, fp
 8008e8e:	e7d3      	b.n	8008e38 <_strtod_l+0x1f0>
 8008e90:	2b08      	cmp	r3, #8
 8008e92:	dc04      	bgt.n	8008e9e <_strtod_l+0x256>
 8008e94:	9f06      	ldr	r7, [sp, #24]
 8008e96:	434f      	muls	r7, r1
 8008e98:	9706      	str	r7, [sp, #24]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	e7e2      	b.n	8008e64 <_strtod_l+0x21c>
 8008e9e:	1c5f      	adds	r7, r3, #1
 8008ea0:	2f10      	cmp	r7, #16
 8008ea2:	bfde      	ittt	le
 8008ea4:	9f05      	ldrle	r7, [sp, #20]
 8008ea6:	434f      	mulle	r7, r1
 8008ea8:	9705      	strle	r7, [sp, #20]
 8008eaa:	e7f6      	b.n	8008e9a <_strtod_l+0x252>
 8008eac:	2c10      	cmp	r4, #16
 8008eae:	bfdf      	itttt	le
 8008eb0:	230a      	movle	r3, #10
 8008eb2:	9905      	ldrle	r1, [sp, #20]
 8008eb4:	fb03 2301 	mlale	r3, r3, r1, r2
 8008eb8:	9305      	strle	r3, [sp, #20]
 8008eba:	e7e0      	b.n	8008e7e <_strtod_l+0x236>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9304      	str	r3, [sp, #16]
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e77b      	b.n	8008dbc <_strtod_l+0x174>
 8008ec4:	2700      	movs	r7, #0
 8008ec6:	1cb2      	adds	r2, r6, #2
 8008ec8:	9219      	str	r2, [sp, #100]	; 0x64
 8008eca:	78b2      	ldrb	r2, [r6, #2]
 8008ecc:	e784      	b.n	8008dd8 <_strtod_l+0x190>
 8008ece:	bf00      	nop
 8008ed0:	08011740 	.word	0x08011740
 8008ed4:	080114f4 	.word	0x080114f4
 8008ed8:	7ff00000 	.word	0x7ff00000
 8008edc:	2701      	movs	r7, #1
 8008ede:	e7f2      	b.n	8008ec6 <_strtod_l+0x27e>
 8008ee0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008ee2:	1c51      	adds	r1, r2, #1
 8008ee4:	9119      	str	r1, [sp, #100]	; 0x64
 8008ee6:	7852      	ldrb	r2, [r2, #1]
 8008ee8:	2a30      	cmp	r2, #48	; 0x30
 8008eea:	d0f9      	beq.n	8008ee0 <_strtod_l+0x298>
 8008eec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ef0:	2908      	cmp	r1, #8
 8008ef2:	f63f af77 	bhi.w	8008de4 <_strtod_l+0x19c>
 8008ef6:	f04f 0e0a 	mov.w	lr, #10
 8008efa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008efe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f00:	9209      	str	r2, [sp, #36]	; 0x24
 8008f02:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f04:	1c51      	adds	r1, r2, #1
 8008f06:	9119      	str	r1, [sp, #100]	; 0x64
 8008f08:	7852      	ldrb	r2, [r2, #1]
 8008f0a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008f0e:	2d09      	cmp	r5, #9
 8008f10:	d935      	bls.n	8008f7e <_strtod_l+0x336>
 8008f12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f14:	1b49      	subs	r1, r1, r5
 8008f16:	2908      	cmp	r1, #8
 8008f18:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008f1c:	dc02      	bgt.n	8008f24 <_strtod_l+0x2dc>
 8008f1e:	4565      	cmp	r5, ip
 8008f20:	bfa8      	it	ge
 8008f22:	4665      	movge	r5, ip
 8008f24:	b107      	cbz	r7, 8008f28 <_strtod_l+0x2e0>
 8008f26:	426d      	negs	r5, r5
 8008f28:	2c00      	cmp	r4, #0
 8008f2a:	d14c      	bne.n	8008fc6 <_strtod_l+0x37e>
 8008f2c:	9907      	ldr	r1, [sp, #28]
 8008f2e:	4301      	orrs	r1, r0
 8008f30:	f47f aecb 	bne.w	8008cca <_strtod_l+0x82>
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f47f aee4 	bne.w	8008d02 <_strtod_l+0xba>
 8008f3a:	2a69      	cmp	r2, #105	; 0x69
 8008f3c:	d026      	beq.n	8008f8c <_strtod_l+0x344>
 8008f3e:	dc23      	bgt.n	8008f88 <_strtod_l+0x340>
 8008f40:	2a49      	cmp	r2, #73	; 0x49
 8008f42:	d023      	beq.n	8008f8c <_strtod_l+0x344>
 8008f44:	2a4e      	cmp	r2, #78	; 0x4e
 8008f46:	f47f aedc 	bne.w	8008d02 <_strtod_l+0xba>
 8008f4a:	499d      	ldr	r1, [pc, #628]	; (80091c0 <_strtod_l+0x578>)
 8008f4c:	a819      	add	r0, sp, #100	; 0x64
 8008f4e:	f001 ffb9 	bl	800aec4 <__match>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	f43f aed5 	beq.w	8008d02 <_strtod_l+0xba>
 8008f58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b28      	cmp	r3, #40	; 0x28
 8008f5e:	d12c      	bne.n	8008fba <_strtod_l+0x372>
 8008f60:	4998      	ldr	r1, [pc, #608]	; (80091c4 <_strtod_l+0x57c>)
 8008f62:	aa1c      	add	r2, sp, #112	; 0x70
 8008f64:	a819      	add	r0, sp, #100	; 0x64
 8008f66:	f001 ffc1 	bl	800aeec <__hexnan>
 8008f6a:	2805      	cmp	r0, #5
 8008f6c:	d125      	bne.n	8008fba <_strtod_l+0x372>
 8008f6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f70:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008f74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008f78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008f7c:	e6a5      	b.n	8008cca <_strtod_l+0x82>
 8008f7e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008f82:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008f86:	e7bc      	b.n	8008f02 <_strtod_l+0x2ba>
 8008f88:	2a6e      	cmp	r2, #110	; 0x6e
 8008f8a:	e7dc      	b.n	8008f46 <_strtod_l+0x2fe>
 8008f8c:	498e      	ldr	r1, [pc, #568]	; (80091c8 <_strtod_l+0x580>)
 8008f8e:	a819      	add	r0, sp, #100	; 0x64
 8008f90:	f001 ff98 	bl	800aec4 <__match>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	f43f aeb4 	beq.w	8008d02 <_strtod_l+0xba>
 8008f9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f9c:	498b      	ldr	r1, [pc, #556]	; (80091cc <_strtod_l+0x584>)
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	a819      	add	r0, sp, #100	; 0x64
 8008fa2:	9319      	str	r3, [sp, #100]	; 0x64
 8008fa4:	f001 ff8e 	bl	800aec4 <__match>
 8008fa8:	b910      	cbnz	r0, 8008fb0 <_strtod_l+0x368>
 8008faa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fac:	3301      	adds	r3, #1
 8008fae:	9319      	str	r3, [sp, #100]	; 0x64
 8008fb0:	f04f 0800 	mov.w	r8, #0
 8008fb4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80091d0 <_strtod_l+0x588>
 8008fb8:	e687      	b.n	8008cca <_strtod_l+0x82>
 8008fba:	4886      	ldr	r0, [pc, #536]	; (80091d4 <_strtod_l+0x58c>)
 8008fbc:	f003 f86c 	bl	800c098 <nan>
 8008fc0:	4680      	mov	r8, r0
 8008fc2:	4689      	mov	r9, r1
 8008fc4:	e681      	b.n	8008cca <_strtod_l+0x82>
 8008fc6:	9b04      	ldr	r3, [sp, #16]
 8008fc8:	f1bb 0f00 	cmp.w	fp, #0
 8008fcc:	bf08      	it	eq
 8008fce:	46a3      	moveq	fp, r4
 8008fd0:	1aeb      	subs	r3, r5, r3
 8008fd2:	2c10      	cmp	r4, #16
 8008fd4:	9806      	ldr	r0, [sp, #24]
 8008fd6:	4626      	mov	r6, r4
 8008fd8:	9307      	str	r3, [sp, #28]
 8008fda:	bfa8      	it	ge
 8008fdc:	2610      	movge	r6, #16
 8008fde:	f7f7 fa01 	bl	80003e4 <__aeabi_ui2d>
 8008fe2:	2c09      	cmp	r4, #9
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	4689      	mov	r9, r1
 8008fe8:	dd13      	ble.n	8009012 <_strtod_l+0x3ca>
 8008fea:	4b7b      	ldr	r3, [pc, #492]	; (80091d8 <_strtod_l+0x590>)
 8008fec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ff0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008ff4:	f7f7 fa70 	bl	80004d8 <__aeabi_dmul>
 8008ff8:	4680      	mov	r8, r0
 8008ffa:	9805      	ldr	r0, [sp, #20]
 8008ffc:	4689      	mov	r9, r1
 8008ffe:	f7f7 f9f1 	bl	80003e4 <__aeabi_ui2d>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 f8af 	bl	800016c <__adddf3>
 800900e:	4680      	mov	r8, r0
 8009010:	4689      	mov	r9, r1
 8009012:	2c0f      	cmp	r4, #15
 8009014:	dc36      	bgt.n	8009084 <_strtod_l+0x43c>
 8009016:	9b07      	ldr	r3, [sp, #28]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f43f ae56 	beq.w	8008cca <_strtod_l+0x82>
 800901e:	dd22      	ble.n	8009066 <_strtod_l+0x41e>
 8009020:	2b16      	cmp	r3, #22
 8009022:	dc09      	bgt.n	8009038 <_strtod_l+0x3f0>
 8009024:	496c      	ldr	r1, [pc, #432]	; (80091d8 <_strtod_l+0x590>)
 8009026:	4642      	mov	r2, r8
 8009028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800902c:	464b      	mov	r3, r9
 800902e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009032:	f7f7 fa51 	bl	80004d8 <__aeabi_dmul>
 8009036:	e7c3      	b.n	8008fc0 <_strtod_l+0x378>
 8009038:	9a07      	ldr	r2, [sp, #28]
 800903a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800903e:	4293      	cmp	r3, r2
 8009040:	db20      	blt.n	8009084 <_strtod_l+0x43c>
 8009042:	4d65      	ldr	r5, [pc, #404]	; (80091d8 <_strtod_l+0x590>)
 8009044:	f1c4 040f 	rsb	r4, r4, #15
 8009048:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800904c:	4642      	mov	r2, r8
 800904e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009052:	464b      	mov	r3, r9
 8009054:	f7f7 fa40 	bl	80004d8 <__aeabi_dmul>
 8009058:	9b07      	ldr	r3, [sp, #28]
 800905a:	1b1c      	subs	r4, r3, r4
 800905c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009060:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009064:	e7e5      	b.n	8009032 <_strtod_l+0x3ea>
 8009066:	9b07      	ldr	r3, [sp, #28]
 8009068:	3316      	adds	r3, #22
 800906a:	db0b      	blt.n	8009084 <_strtod_l+0x43c>
 800906c:	9b04      	ldr	r3, [sp, #16]
 800906e:	4640      	mov	r0, r8
 8009070:	1b5d      	subs	r5, r3, r5
 8009072:	4b59      	ldr	r3, [pc, #356]	; (80091d8 <_strtod_l+0x590>)
 8009074:	4649      	mov	r1, r9
 8009076:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800907a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800907e:	f7f7 fb55 	bl	800072c <__aeabi_ddiv>
 8009082:	e79d      	b.n	8008fc0 <_strtod_l+0x378>
 8009084:	9b07      	ldr	r3, [sp, #28]
 8009086:	1ba6      	subs	r6, r4, r6
 8009088:	441e      	add	r6, r3
 800908a:	2e00      	cmp	r6, #0
 800908c:	dd74      	ble.n	8009178 <_strtod_l+0x530>
 800908e:	f016 030f 	ands.w	r3, r6, #15
 8009092:	d00a      	beq.n	80090aa <_strtod_l+0x462>
 8009094:	4950      	ldr	r1, [pc, #320]	; (80091d8 <_strtod_l+0x590>)
 8009096:	4642      	mov	r2, r8
 8009098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800909c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090a0:	464b      	mov	r3, r9
 80090a2:	f7f7 fa19 	bl	80004d8 <__aeabi_dmul>
 80090a6:	4680      	mov	r8, r0
 80090a8:	4689      	mov	r9, r1
 80090aa:	f036 060f 	bics.w	r6, r6, #15
 80090ae:	d052      	beq.n	8009156 <_strtod_l+0x50e>
 80090b0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80090b4:	dd27      	ble.n	8009106 <_strtod_l+0x4be>
 80090b6:	f04f 0b00 	mov.w	fp, #0
 80090ba:	f8cd b010 	str.w	fp, [sp, #16]
 80090be:	f8cd b020 	str.w	fp, [sp, #32]
 80090c2:	f8cd b018 	str.w	fp, [sp, #24]
 80090c6:	2322      	movs	r3, #34	; 0x22
 80090c8:	f04f 0800 	mov.w	r8, #0
 80090cc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80091d0 <_strtod_l+0x588>
 80090d0:	f8ca 3000 	str.w	r3, [sl]
 80090d4:	9b08      	ldr	r3, [sp, #32]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f43f adf7 	beq.w	8008cca <_strtod_l+0x82>
 80090dc:	4650      	mov	r0, sl
 80090de:	991a      	ldr	r1, [sp, #104]	; 0x68
 80090e0:	f002 f888 	bl	800b1f4 <_Bfree>
 80090e4:	4650      	mov	r0, sl
 80090e6:	9906      	ldr	r1, [sp, #24]
 80090e8:	f002 f884 	bl	800b1f4 <_Bfree>
 80090ec:	4650      	mov	r0, sl
 80090ee:	9904      	ldr	r1, [sp, #16]
 80090f0:	f002 f880 	bl	800b1f4 <_Bfree>
 80090f4:	4650      	mov	r0, sl
 80090f6:	9908      	ldr	r1, [sp, #32]
 80090f8:	f002 f87c 	bl	800b1f4 <_Bfree>
 80090fc:	4659      	mov	r1, fp
 80090fe:	4650      	mov	r0, sl
 8009100:	f002 f878 	bl	800b1f4 <_Bfree>
 8009104:	e5e1      	b.n	8008cca <_strtod_l+0x82>
 8009106:	4b35      	ldr	r3, [pc, #212]	; (80091dc <_strtod_l+0x594>)
 8009108:	4640      	mov	r0, r8
 800910a:	9305      	str	r3, [sp, #20]
 800910c:	2300      	movs	r3, #0
 800910e:	4649      	mov	r1, r9
 8009110:	461f      	mov	r7, r3
 8009112:	1136      	asrs	r6, r6, #4
 8009114:	2e01      	cmp	r6, #1
 8009116:	dc21      	bgt.n	800915c <_strtod_l+0x514>
 8009118:	b10b      	cbz	r3, 800911e <_strtod_l+0x4d6>
 800911a:	4680      	mov	r8, r0
 800911c:	4689      	mov	r9, r1
 800911e:	4b2f      	ldr	r3, [pc, #188]	; (80091dc <_strtod_l+0x594>)
 8009120:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009124:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009128:	4642      	mov	r2, r8
 800912a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800912e:	464b      	mov	r3, r9
 8009130:	f7f7 f9d2 	bl	80004d8 <__aeabi_dmul>
 8009134:	4b26      	ldr	r3, [pc, #152]	; (80091d0 <_strtod_l+0x588>)
 8009136:	460a      	mov	r2, r1
 8009138:	400b      	ands	r3, r1
 800913a:	4929      	ldr	r1, [pc, #164]	; (80091e0 <_strtod_l+0x598>)
 800913c:	4680      	mov	r8, r0
 800913e:	428b      	cmp	r3, r1
 8009140:	d8b9      	bhi.n	80090b6 <_strtod_l+0x46e>
 8009142:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009146:	428b      	cmp	r3, r1
 8009148:	bf86      	itte	hi
 800914a:	f04f 38ff 	movhi.w	r8, #4294967295
 800914e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80091e4 <_strtod_l+0x59c>
 8009152:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009156:	2300      	movs	r3, #0
 8009158:	9305      	str	r3, [sp, #20]
 800915a:	e07f      	b.n	800925c <_strtod_l+0x614>
 800915c:	07f2      	lsls	r2, r6, #31
 800915e:	d505      	bpl.n	800916c <_strtod_l+0x524>
 8009160:	9b05      	ldr	r3, [sp, #20]
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f7f7 f9b7 	bl	80004d8 <__aeabi_dmul>
 800916a:	2301      	movs	r3, #1
 800916c:	9a05      	ldr	r2, [sp, #20]
 800916e:	3701      	adds	r7, #1
 8009170:	3208      	adds	r2, #8
 8009172:	1076      	asrs	r6, r6, #1
 8009174:	9205      	str	r2, [sp, #20]
 8009176:	e7cd      	b.n	8009114 <_strtod_l+0x4cc>
 8009178:	d0ed      	beq.n	8009156 <_strtod_l+0x50e>
 800917a:	4276      	negs	r6, r6
 800917c:	f016 020f 	ands.w	r2, r6, #15
 8009180:	d00a      	beq.n	8009198 <_strtod_l+0x550>
 8009182:	4b15      	ldr	r3, [pc, #84]	; (80091d8 <_strtod_l+0x590>)
 8009184:	4640      	mov	r0, r8
 8009186:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800918a:	4649      	mov	r1, r9
 800918c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009190:	f7f7 facc 	bl	800072c <__aeabi_ddiv>
 8009194:	4680      	mov	r8, r0
 8009196:	4689      	mov	r9, r1
 8009198:	1136      	asrs	r6, r6, #4
 800919a:	d0dc      	beq.n	8009156 <_strtod_l+0x50e>
 800919c:	2e1f      	cmp	r6, #31
 800919e:	dd23      	ble.n	80091e8 <_strtod_l+0x5a0>
 80091a0:	f04f 0b00 	mov.w	fp, #0
 80091a4:	f8cd b010 	str.w	fp, [sp, #16]
 80091a8:	f8cd b020 	str.w	fp, [sp, #32]
 80091ac:	f8cd b018 	str.w	fp, [sp, #24]
 80091b0:	2322      	movs	r3, #34	; 0x22
 80091b2:	f04f 0800 	mov.w	r8, #0
 80091b6:	f04f 0900 	mov.w	r9, #0
 80091ba:	f8ca 3000 	str.w	r3, [sl]
 80091be:	e789      	b.n	80090d4 <_strtod_l+0x48c>
 80091c0:	080114c5 	.word	0x080114c5
 80091c4:	08011508 	.word	0x08011508
 80091c8:	080114bd 	.word	0x080114bd
 80091cc:	0801164c 	.word	0x0801164c
 80091d0:	7ff00000 	.word	0x7ff00000
 80091d4:	080118f8 	.word	0x080118f8
 80091d8:	080117d8 	.word	0x080117d8
 80091dc:	080117b0 	.word	0x080117b0
 80091e0:	7ca00000 	.word	0x7ca00000
 80091e4:	7fefffff 	.word	0x7fefffff
 80091e8:	f016 0310 	ands.w	r3, r6, #16
 80091ec:	bf18      	it	ne
 80091ee:	236a      	movne	r3, #106	; 0x6a
 80091f0:	4640      	mov	r0, r8
 80091f2:	9305      	str	r3, [sp, #20]
 80091f4:	4649      	mov	r1, r9
 80091f6:	2300      	movs	r3, #0
 80091f8:	4fb0      	ldr	r7, [pc, #704]	; (80094bc <_strtod_l+0x874>)
 80091fa:	07f2      	lsls	r2, r6, #31
 80091fc:	d504      	bpl.n	8009208 <_strtod_l+0x5c0>
 80091fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009202:	f7f7 f969 	bl	80004d8 <__aeabi_dmul>
 8009206:	2301      	movs	r3, #1
 8009208:	1076      	asrs	r6, r6, #1
 800920a:	f107 0708 	add.w	r7, r7, #8
 800920e:	d1f4      	bne.n	80091fa <_strtod_l+0x5b2>
 8009210:	b10b      	cbz	r3, 8009216 <_strtod_l+0x5ce>
 8009212:	4680      	mov	r8, r0
 8009214:	4689      	mov	r9, r1
 8009216:	9b05      	ldr	r3, [sp, #20]
 8009218:	b1c3      	cbz	r3, 800924c <_strtod_l+0x604>
 800921a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800921e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009222:	2b00      	cmp	r3, #0
 8009224:	4649      	mov	r1, r9
 8009226:	dd11      	ble.n	800924c <_strtod_l+0x604>
 8009228:	2b1f      	cmp	r3, #31
 800922a:	f340 8127 	ble.w	800947c <_strtod_l+0x834>
 800922e:	2b34      	cmp	r3, #52	; 0x34
 8009230:	bfd8      	it	le
 8009232:	f04f 33ff 	movle.w	r3, #4294967295
 8009236:	f04f 0800 	mov.w	r8, #0
 800923a:	bfcf      	iteee	gt
 800923c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009240:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009244:	fa03 f202 	lslle.w	r2, r3, r2
 8009248:	ea02 0901 	andle.w	r9, r2, r1
 800924c:	2200      	movs	r2, #0
 800924e:	2300      	movs	r3, #0
 8009250:	4640      	mov	r0, r8
 8009252:	4649      	mov	r1, r9
 8009254:	f7f7 fba8 	bl	80009a8 <__aeabi_dcmpeq>
 8009258:	2800      	cmp	r0, #0
 800925a:	d1a1      	bne.n	80091a0 <_strtod_l+0x558>
 800925c:	9b06      	ldr	r3, [sp, #24]
 800925e:	465a      	mov	r2, fp
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	4650      	mov	r0, sl
 8009264:	4623      	mov	r3, r4
 8009266:	9908      	ldr	r1, [sp, #32]
 8009268:	f002 f82c 	bl	800b2c4 <__s2b>
 800926c:	9008      	str	r0, [sp, #32]
 800926e:	2800      	cmp	r0, #0
 8009270:	f43f af21 	beq.w	80090b6 <_strtod_l+0x46e>
 8009274:	9b04      	ldr	r3, [sp, #16]
 8009276:	f04f 0b00 	mov.w	fp, #0
 800927a:	1b5d      	subs	r5, r3, r5
 800927c:	9b07      	ldr	r3, [sp, #28]
 800927e:	f8cd b010 	str.w	fp, [sp, #16]
 8009282:	2b00      	cmp	r3, #0
 8009284:	bfb4      	ite	lt
 8009286:	462b      	movlt	r3, r5
 8009288:	2300      	movge	r3, #0
 800928a:	930e      	str	r3, [sp, #56]	; 0x38
 800928c:	9b07      	ldr	r3, [sp, #28]
 800928e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009292:	9314      	str	r3, [sp, #80]	; 0x50
 8009294:	9b08      	ldr	r3, [sp, #32]
 8009296:	4650      	mov	r0, sl
 8009298:	6859      	ldr	r1, [r3, #4]
 800929a:	f001 ff6b 	bl	800b174 <_Balloc>
 800929e:	9006      	str	r0, [sp, #24]
 80092a0:	2800      	cmp	r0, #0
 80092a2:	f43f af10 	beq.w	80090c6 <_strtod_l+0x47e>
 80092a6:	9b08      	ldr	r3, [sp, #32]
 80092a8:	300c      	adds	r0, #12
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	f103 010c 	add.w	r1, r3, #12
 80092b0:	3202      	adds	r2, #2
 80092b2:	0092      	lsls	r2, r2, #2
 80092b4:	f7fe fbd6 	bl	8007a64 <memcpy>
 80092b8:	ab1c      	add	r3, sp, #112	; 0x70
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	ab1b      	add	r3, sp, #108	; 0x6c
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	4642      	mov	r2, r8
 80092c2:	464b      	mov	r3, r9
 80092c4:	4650      	mov	r0, sl
 80092c6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80092ca:	f002 fb3d 	bl	800b948 <__d2b>
 80092ce:	901a      	str	r0, [sp, #104]	; 0x68
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f43f aef8 	beq.w	80090c6 <_strtod_l+0x47e>
 80092d6:	2101      	movs	r1, #1
 80092d8:	4650      	mov	r0, sl
 80092da:	f002 f88b 	bl	800b3f4 <__i2b>
 80092de:	4603      	mov	r3, r0
 80092e0:	9004      	str	r0, [sp, #16]
 80092e2:	2800      	cmp	r0, #0
 80092e4:	f43f aeef 	beq.w	80090c6 <_strtod_l+0x47e>
 80092e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80092ea:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80092ec:	2d00      	cmp	r5, #0
 80092ee:	bfab      	itete	ge
 80092f0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80092f2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80092f4:	18ee      	addge	r6, r5, r3
 80092f6:	1b5c      	sublt	r4, r3, r5
 80092f8:	9b05      	ldr	r3, [sp, #20]
 80092fa:	bfa8      	it	ge
 80092fc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80092fe:	eba5 0503 	sub.w	r5, r5, r3
 8009302:	4415      	add	r5, r2
 8009304:	4b6e      	ldr	r3, [pc, #440]	; (80094c0 <_strtod_l+0x878>)
 8009306:	f105 35ff 	add.w	r5, r5, #4294967295
 800930a:	bfb8      	it	lt
 800930c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800930e:	429d      	cmp	r5, r3
 8009310:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009314:	f280 80c4 	bge.w	80094a0 <_strtod_l+0x858>
 8009318:	1b5b      	subs	r3, r3, r5
 800931a:	2b1f      	cmp	r3, #31
 800931c:	f04f 0701 	mov.w	r7, #1
 8009320:	eba2 0203 	sub.w	r2, r2, r3
 8009324:	f300 80b1 	bgt.w	800948a <_strtod_l+0x842>
 8009328:	2500      	movs	r5, #0
 800932a:	fa07 f303 	lsl.w	r3, r7, r3
 800932e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009330:	18b7      	adds	r7, r6, r2
 8009332:	9b05      	ldr	r3, [sp, #20]
 8009334:	42be      	cmp	r6, r7
 8009336:	4414      	add	r4, r2
 8009338:	441c      	add	r4, r3
 800933a:	4633      	mov	r3, r6
 800933c:	bfa8      	it	ge
 800933e:	463b      	movge	r3, r7
 8009340:	42a3      	cmp	r3, r4
 8009342:	bfa8      	it	ge
 8009344:	4623      	movge	r3, r4
 8009346:	2b00      	cmp	r3, #0
 8009348:	bfc2      	ittt	gt
 800934a:	1aff      	subgt	r7, r7, r3
 800934c:	1ae4      	subgt	r4, r4, r3
 800934e:	1af6      	subgt	r6, r6, r3
 8009350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009352:	2b00      	cmp	r3, #0
 8009354:	dd17      	ble.n	8009386 <_strtod_l+0x73e>
 8009356:	461a      	mov	r2, r3
 8009358:	4650      	mov	r0, sl
 800935a:	9904      	ldr	r1, [sp, #16]
 800935c:	f002 f908 	bl	800b570 <__pow5mult>
 8009360:	9004      	str	r0, [sp, #16]
 8009362:	2800      	cmp	r0, #0
 8009364:	f43f aeaf 	beq.w	80090c6 <_strtod_l+0x47e>
 8009368:	4601      	mov	r1, r0
 800936a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800936c:	4650      	mov	r0, sl
 800936e:	f002 f857 	bl	800b420 <__multiply>
 8009372:	9009      	str	r0, [sp, #36]	; 0x24
 8009374:	2800      	cmp	r0, #0
 8009376:	f43f aea6 	beq.w	80090c6 <_strtod_l+0x47e>
 800937a:	4650      	mov	r0, sl
 800937c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800937e:	f001 ff39 	bl	800b1f4 <_Bfree>
 8009382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009384:	931a      	str	r3, [sp, #104]	; 0x68
 8009386:	2f00      	cmp	r7, #0
 8009388:	f300 808e 	bgt.w	80094a8 <_strtod_l+0x860>
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	2b00      	cmp	r3, #0
 8009390:	dd08      	ble.n	80093a4 <_strtod_l+0x75c>
 8009392:	4650      	mov	r0, sl
 8009394:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009396:	9906      	ldr	r1, [sp, #24]
 8009398:	f002 f8ea 	bl	800b570 <__pow5mult>
 800939c:	9006      	str	r0, [sp, #24]
 800939e:	2800      	cmp	r0, #0
 80093a0:	f43f ae91 	beq.w	80090c6 <_strtod_l+0x47e>
 80093a4:	2c00      	cmp	r4, #0
 80093a6:	dd08      	ble.n	80093ba <_strtod_l+0x772>
 80093a8:	4622      	mov	r2, r4
 80093aa:	4650      	mov	r0, sl
 80093ac:	9906      	ldr	r1, [sp, #24]
 80093ae:	f002 f939 	bl	800b624 <__lshift>
 80093b2:	9006      	str	r0, [sp, #24]
 80093b4:	2800      	cmp	r0, #0
 80093b6:	f43f ae86 	beq.w	80090c6 <_strtod_l+0x47e>
 80093ba:	2e00      	cmp	r6, #0
 80093bc:	dd08      	ble.n	80093d0 <_strtod_l+0x788>
 80093be:	4632      	mov	r2, r6
 80093c0:	4650      	mov	r0, sl
 80093c2:	9904      	ldr	r1, [sp, #16]
 80093c4:	f002 f92e 	bl	800b624 <__lshift>
 80093c8:	9004      	str	r0, [sp, #16]
 80093ca:	2800      	cmp	r0, #0
 80093cc:	f43f ae7b 	beq.w	80090c6 <_strtod_l+0x47e>
 80093d0:	4650      	mov	r0, sl
 80093d2:	9a06      	ldr	r2, [sp, #24]
 80093d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093d6:	f002 f9b1 	bl	800b73c <__mdiff>
 80093da:	4683      	mov	fp, r0
 80093dc:	2800      	cmp	r0, #0
 80093de:	f43f ae72 	beq.w	80090c6 <_strtod_l+0x47e>
 80093e2:	2400      	movs	r4, #0
 80093e4:	68c3      	ldr	r3, [r0, #12]
 80093e6:	9904      	ldr	r1, [sp, #16]
 80093e8:	60c4      	str	r4, [r0, #12]
 80093ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80093ec:	f002 f98a 	bl	800b704 <__mcmp>
 80093f0:	42a0      	cmp	r0, r4
 80093f2:	da6b      	bge.n	80094cc <_strtod_l+0x884>
 80093f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093f6:	ea53 0308 	orrs.w	r3, r3, r8
 80093fa:	f040 8091 	bne.w	8009520 <_strtod_l+0x8d8>
 80093fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009402:	2b00      	cmp	r3, #0
 8009404:	f040 808c 	bne.w	8009520 <_strtod_l+0x8d8>
 8009408:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800940c:	0d1b      	lsrs	r3, r3, #20
 800940e:	051b      	lsls	r3, r3, #20
 8009410:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009414:	f240 8084 	bls.w	8009520 <_strtod_l+0x8d8>
 8009418:	f8db 3014 	ldr.w	r3, [fp, #20]
 800941c:	b91b      	cbnz	r3, 8009426 <_strtod_l+0x7de>
 800941e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009422:	2b01      	cmp	r3, #1
 8009424:	dd7c      	ble.n	8009520 <_strtod_l+0x8d8>
 8009426:	4659      	mov	r1, fp
 8009428:	2201      	movs	r2, #1
 800942a:	4650      	mov	r0, sl
 800942c:	f002 f8fa 	bl	800b624 <__lshift>
 8009430:	9904      	ldr	r1, [sp, #16]
 8009432:	4683      	mov	fp, r0
 8009434:	f002 f966 	bl	800b704 <__mcmp>
 8009438:	2800      	cmp	r0, #0
 800943a:	dd71      	ble.n	8009520 <_strtod_l+0x8d8>
 800943c:	9905      	ldr	r1, [sp, #20]
 800943e:	464b      	mov	r3, r9
 8009440:	4a20      	ldr	r2, [pc, #128]	; (80094c4 <_strtod_l+0x87c>)
 8009442:	2900      	cmp	r1, #0
 8009444:	f000 808c 	beq.w	8009560 <_strtod_l+0x918>
 8009448:	ea02 0109 	and.w	r1, r2, r9
 800944c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009450:	f300 8086 	bgt.w	8009560 <_strtod_l+0x918>
 8009454:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009458:	f77f aeaa 	ble.w	80091b0 <_strtod_l+0x568>
 800945c:	4640      	mov	r0, r8
 800945e:	4649      	mov	r1, r9
 8009460:	4b19      	ldr	r3, [pc, #100]	; (80094c8 <_strtod_l+0x880>)
 8009462:	2200      	movs	r2, #0
 8009464:	f7f7 f838 	bl	80004d8 <__aeabi_dmul>
 8009468:	460b      	mov	r3, r1
 800946a:	4303      	orrs	r3, r0
 800946c:	bf08      	it	eq
 800946e:	2322      	moveq	r3, #34	; 0x22
 8009470:	4680      	mov	r8, r0
 8009472:	4689      	mov	r9, r1
 8009474:	bf08      	it	eq
 8009476:	f8ca 3000 	streq.w	r3, [sl]
 800947a:	e62f      	b.n	80090dc <_strtod_l+0x494>
 800947c:	f04f 32ff 	mov.w	r2, #4294967295
 8009480:	fa02 f303 	lsl.w	r3, r2, r3
 8009484:	ea03 0808 	and.w	r8, r3, r8
 8009488:	e6e0      	b.n	800924c <_strtod_l+0x604>
 800948a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800948e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009492:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009496:	35e2      	adds	r5, #226	; 0xe2
 8009498:	fa07 f505 	lsl.w	r5, r7, r5
 800949c:	970f      	str	r7, [sp, #60]	; 0x3c
 800949e:	e747      	b.n	8009330 <_strtod_l+0x6e8>
 80094a0:	2301      	movs	r3, #1
 80094a2:	2500      	movs	r5, #0
 80094a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80094a6:	e743      	b.n	8009330 <_strtod_l+0x6e8>
 80094a8:	463a      	mov	r2, r7
 80094aa:	4650      	mov	r0, sl
 80094ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80094ae:	f002 f8b9 	bl	800b624 <__lshift>
 80094b2:	901a      	str	r0, [sp, #104]	; 0x68
 80094b4:	2800      	cmp	r0, #0
 80094b6:	f47f af69 	bne.w	800938c <_strtod_l+0x744>
 80094ba:	e604      	b.n	80090c6 <_strtod_l+0x47e>
 80094bc:	08011520 	.word	0x08011520
 80094c0:	fffffc02 	.word	0xfffffc02
 80094c4:	7ff00000 	.word	0x7ff00000
 80094c8:	39500000 	.word	0x39500000
 80094cc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80094d0:	d165      	bne.n	800959e <_strtod_l+0x956>
 80094d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094d8:	b35a      	cbz	r2, 8009532 <_strtod_l+0x8ea>
 80094da:	4a99      	ldr	r2, [pc, #612]	; (8009740 <_strtod_l+0xaf8>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d12b      	bne.n	8009538 <_strtod_l+0x8f0>
 80094e0:	9b05      	ldr	r3, [sp, #20]
 80094e2:	4641      	mov	r1, r8
 80094e4:	b303      	cbz	r3, 8009528 <_strtod_l+0x8e0>
 80094e6:	464a      	mov	r2, r9
 80094e8:	4b96      	ldr	r3, [pc, #600]	; (8009744 <_strtod_l+0xafc>)
 80094ea:	4013      	ands	r3, r2
 80094ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094f0:	f04f 32ff 	mov.w	r2, #4294967295
 80094f4:	d81b      	bhi.n	800952e <_strtod_l+0x8e6>
 80094f6:	0d1b      	lsrs	r3, r3, #20
 80094f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009500:	4299      	cmp	r1, r3
 8009502:	d119      	bne.n	8009538 <_strtod_l+0x8f0>
 8009504:	4b90      	ldr	r3, [pc, #576]	; (8009748 <_strtod_l+0xb00>)
 8009506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009508:	429a      	cmp	r2, r3
 800950a:	d102      	bne.n	8009512 <_strtod_l+0x8ca>
 800950c:	3101      	adds	r1, #1
 800950e:	f43f adda 	beq.w	80090c6 <_strtod_l+0x47e>
 8009512:	f04f 0800 	mov.w	r8, #0
 8009516:	4b8b      	ldr	r3, [pc, #556]	; (8009744 <_strtod_l+0xafc>)
 8009518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800951a:	401a      	ands	r2, r3
 800951c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009520:	9b05      	ldr	r3, [sp, #20]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d19a      	bne.n	800945c <_strtod_l+0x814>
 8009526:	e5d9      	b.n	80090dc <_strtod_l+0x494>
 8009528:	f04f 33ff 	mov.w	r3, #4294967295
 800952c:	e7e8      	b.n	8009500 <_strtod_l+0x8b8>
 800952e:	4613      	mov	r3, r2
 8009530:	e7e6      	b.n	8009500 <_strtod_l+0x8b8>
 8009532:	ea53 0308 	orrs.w	r3, r3, r8
 8009536:	d081      	beq.n	800943c <_strtod_l+0x7f4>
 8009538:	b1e5      	cbz	r5, 8009574 <_strtod_l+0x92c>
 800953a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800953c:	421d      	tst	r5, r3
 800953e:	d0ef      	beq.n	8009520 <_strtod_l+0x8d8>
 8009540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009542:	4640      	mov	r0, r8
 8009544:	4649      	mov	r1, r9
 8009546:	9a05      	ldr	r2, [sp, #20]
 8009548:	b1c3      	cbz	r3, 800957c <_strtod_l+0x934>
 800954a:	f7ff fb5a 	bl	8008c02 <sulp>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009556:	f7f6 fe09 	bl	800016c <__adddf3>
 800955a:	4680      	mov	r8, r0
 800955c:	4689      	mov	r9, r1
 800955e:	e7df      	b.n	8009520 <_strtod_l+0x8d8>
 8009560:	4013      	ands	r3, r2
 8009562:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009566:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800956a:	f04f 38ff 	mov.w	r8, #4294967295
 800956e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009572:	e7d5      	b.n	8009520 <_strtod_l+0x8d8>
 8009574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009576:	ea13 0f08 	tst.w	r3, r8
 800957a:	e7e0      	b.n	800953e <_strtod_l+0x8f6>
 800957c:	f7ff fb41 	bl	8008c02 <sulp>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009588:	f7f6 fdee 	bl	8000168 <__aeabi_dsub>
 800958c:	2200      	movs	r2, #0
 800958e:	2300      	movs	r3, #0
 8009590:	4680      	mov	r8, r0
 8009592:	4689      	mov	r9, r1
 8009594:	f7f7 fa08 	bl	80009a8 <__aeabi_dcmpeq>
 8009598:	2800      	cmp	r0, #0
 800959a:	d0c1      	beq.n	8009520 <_strtod_l+0x8d8>
 800959c:	e608      	b.n	80091b0 <_strtod_l+0x568>
 800959e:	4658      	mov	r0, fp
 80095a0:	9904      	ldr	r1, [sp, #16]
 80095a2:	f002 fa2d 	bl	800ba00 <__ratio>
 80095a6:	2200      	movs	r2, #0
 80095a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095ac:	4606      	mov	r6, r0
 80095ae:	460f      	mov	r7, r1
 80095b0:	f7f7 fa0e 	bl	80009d0 <__aeabi_dcmple>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d070      	beq.n	800969a <_strtod_l+0xa52>
 80095b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d042      	beq.n	8009644 <_strtod_l+0x9fc>
 80095be:	2600      	movs	r6, #0
 80095c0:	4f62      	ldr	r7, [pc, #392]	; (800974c <_strtod_l+0xb04>)
 80095c2:	4d62      	ldr	r5, [pc, #392]	; (800974c <_strtod_l+0xb04>)
 80095c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095ca:	0d1b      	lsrs	r3, r3, #20
 80095cc:	051b      	lsls	r3, r3, #20
 80095ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80095d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095d2:	4b5f      	ldr	r3, [pc, #380]	; (8009750 <_strtod_l+0xb08>)
 80095d4:	429a      	cmp	r2, r3
 80095d6:	f040 80c3 	bne.w	8009760 <_strtod_l+0xb18>
 80095da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095dc:	4640      	mov	r0, r8
 80095de:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80095e2:	4649      	mov	r1, r9
 80095e4:	f002 f936 	bl	800b854 <__ulp>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4630      	mov	r0, r6
 80095ee:	4639      	mov	r1, r7
 80095f0:	f7f6 ff72 	bl	80004d8 <__aeabi_dmul>
 80095f4:	4642      	mov	r2, r8
 80095f6:	464b      	mov	r3, r9
 80095f8:	f7f6 fdb8 	bl	800016c <__adddf3>
 80095fc:	460b      	mov	r3, r1
 80095fe:	4951      	ldr	r1, [pc, #324]	; (8009744 <_strtod_l+0xafc>)
 8009600:	4a54      	ldr	r2, [pc, #336]	; (8009754 <_strtod_l+0xb0c>)
 8009602:	4019      	ands	r1, r3
 8009604:	4291      	cmp	r1, r2
 8009606:	4680      	mov	r8, r0
 8009608:	d95d      	bls.n	80096c6 <_strtod_l+0xa7e>
 800960a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800960c:	4b4e      	ldr	r3, [pc, #312]	; (8009748 <_strtod_l+0xb00>)
 800960e:	429a      	cmp	r2, r3
 8009610:	d103      	bne.n	800961a <_strtod_l+0x9d2>
 8009612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009614:	3301      	adds	r3, #1
 8009616:	f43f ad56 	beq.w	80090c6 <_strtod_l+0x47e>
 800961a:	f04f 38ff 	mov.w	r8, #4294967295
 800961e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009748 <_strtod_l+0xb00>
 8009622:	4650      	mov	r0, sl
 8009624:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009626:	f001 fde5 	bl	800b1f4 <_Bfree>
 800962a:	4650      	mov	r0, sl
 800962c:	9906      	ldr	r1, [sp, #24]
 800962e:	f001 fde1 	bl	800b1f4 <_Bfree>
 8009632:	4650      	mov	r0, sl
 8009634:	9904      	ldr	r1, [sp, #16]
 8009636:	f001 fddd 	bl	800b1f4 <_Bfree>
 800963a:	4659      	mov	r1, fp
 800963c:	4650      	mov	r0, sl
 800963e:	f001 fdd9 	bl	800b1f4 <_Bfree>
 8009642:	e627      	b.n	8009294 <_strtod_l+0x64c>
 8009644:	f1b8 0f00 	cmp.w	r8, #0
 8009648:	d119      	bne.n	800967e <_strtod_l+0xa36>
 800964a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009650:	b9e3      	cbnz	r3, 800968c <_strtod_l+0xa44>
 8009652:	2200      	movs	r2, #0
 8009654:	4630      	mov	r0, r6
 8009656:	4639      	mov	r1, r7
 8009658:	4b3c      	ldr	r3, [pc, #240]	; (800974c <_strtod_l+0xb04>)
 800965a:	f7f7 f9af 	bl	80009bc <__aeabi_dcmplt>
 800965e:	b9c8      	cbnz	r0, 8009694 <_strtod_l+0xa4c>
 8009660:	2200      	movs	r2, #0
 8009662:	4630      	mov	r0, r6
 8009664:	4639      	mov	r1, r7
 8009666:	4b3c      	ldr	r3, [pc, #240]	; (8009758 <_strtod_l+0xb10>)
 8009668:	f7f6 ff36 	bl	80004d8 <__aeabi_dmul>
 800966c:	4604      	mov	r4, r0
 800966e:	460d      	mov	r5, r1
 8009670:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009674:	9416      	str	r4, [sp, #88]	; 0x58
 8009676:	9317      	str	r3, [sp, #92]	; 0x5c
 8009678:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800967c:	e7a2      	b.n	80095c4 <_strtod_l+0x97c>
 800967e:	f1b8 0f01 	cmp.w	r8, #1
 8009682:	d103      	bne.n	800968c <_strtod_l+0xa44>
 8009684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009686:	2b00      	cmp	r3, #0
 8009688:	f43f ad92 	beq.w	80091b0 <_strtod_l+0x568>
 800968c:	2600      	movs	r6, #0
 800968e:	2400      	movs	r4, #0
 8009690:	4f32      	ldr	r7, [pc, #200]	; (800975c <_strtod_l+0xb14>)
 8009692:	e796      	b.n	80095c2 <_strtod_l+0x97a>
 8009694:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009696:	4d30      	ldr	r5, [pc, #192]	; (8009758 <_strtod_l+0xb10>)
 8009698:	e7ea      	b.n	8009670 <_strtod_l+0xa28>
 800969a:	4b2f      	ldr	r3, [pc, #188]	; (8009758 <_strtod_l+0xb10>)
 800969c:	2200      	movs	r2, #0
 800969e:	4630      	mov	r0, r6
 80096a0:	4639      	mov	r1, r7
 80096a2:	f7f6 ff19 	bl	80004d8 <__aeabi_dmul>
 80096a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a8:	4604      	mov	r4, r0
 80096aa:	460d      	mov	r5, r1
 80096ac:	b933      	cbnz	r3, 80096bc <_strtod_l+0xa74>
 80096ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096b2:	9010      	str	r0, [sp, #64]	; 0x40
 80096b4:	9311      	str	r3, [sp, #68]	; 0x44
 80096b6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80096ba:	e783      	b.n	80095c4 <_strtod_l+0x97c>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80096c4:	e7f7      	b.n	80096b6 <_strtod_l+0xa6e>
 80096c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80096ca:	9b05      	ldr	r3, [sp, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1a8      	bne.n	8009622 <_strtod_l+0x9da>
 80096d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096d6:	0d1b      	lsrs	r3, r3, #20
 80096d8:	051b      	lsls	r3, r3, #20
 80096da:	429a      	cmp	r2, r3
 80096dc:	d1a1      	bne.n	8009622 <_strtod_l+0x9da>
 80096de:	4620      	mov	r0, r4
 80096e0:	4629      	mov	r1, r5
 80096e2:	f7f7 fa41 	bl	8000b68 <__aeabi_d2lz>
 80096e6:	f7f6 fec9 	bl	800047c <__aeabi_l2d>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4620      	mov	r0, r4
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7f6 fd39 	bl	8000168 <__aeabi_dsub>
 80096f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096fc:	ea43 0308 	orr.w	r3, r3, r8
 8009700:	4313      	orrs	r3, r2
 8009702:	4604      	mov	r4, r0
 8009704:	460d      	mov	r5, r1
 8009706:	d066      	beq.n	80097d6 <_strtod_l+0xb8e>
 8009708:	a309      	add	r3, pc, #36	; (adr r3, 8009730 <_strtod_l+0xae8>)
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f7f7 f955 	bl	80009bc <__aeabi_dcmplt>
 8009712:	2800      	cmp	r0, #0
 8009714:	f47f ace2 	bne.w	80090dc <_strtod_l+0x494>
 8009718:	a307      	add	r3, pc, #28	; (adr r3, 8009738 <_strtod_l+0xaf0>)
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	4620      	mov	r0, r4
 8009720:	4629      	mov	r1, r5
 8009722:	f7f7 f969 	bl	80009f8 <__aeabi_dcmpgt>
 8009726:	2800      	cmp	r0, #0
 8009728:	f43f af7b 	beq.w	8009622 <_strtod_l+0x9da>
 800972c:	e4d6      	b.n	80090dc <_strtod_l+0x494>
 800972e:	bf00      	nop
 8009730:	94a03595 	.word	0x94a03595
 8009734:	3fdfffff 	.word	0x3fdfffff
 8009738:	35afe535 	.word	0x35afe535
 800973c:	3fe00000 	.word	0x3fe00000
 8009740:	000fffff 	.word	0x000fffff
 8009744:	7ff00000 	.word	0x7ff00000
 8009748:	7fefffff 	.word	0x7fefffff
 800974c:	3ff00000 	.word	0x3ff00000
 8009750:	7fe00000 	.word	0x7fe00000
 8009754:	7c9fffff 	.word	0x7c9fffff
 8009758:	3fe00000 	.word	0x3fe00000
 800975c:	bff00000 	.word	0xbff00000
 8009760:	9b05      	ldr	r3, [sp, #20]
 8009762:	b313      	cbz	r3, 80097aa <_strtod_l+0xb62>
 8009764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009766:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800976a:	d81e      	bhi.n	80097aa <_strtod_l+0xb62>
 800976c:	a326      	add	r3, pc, #152	; (adr r3, 8009808 <_strtod_l+0xbc0>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	4620      	mov	r0, r4
 8009774:	4629      	mov	r1, r5
 8009776:	f7f7 f92b 	bl	80009d0 <__aeabi_dcmple>
 800977a:	b190      	cbz	r0, 80097a2 <_strtod_l+0xb5a>
 800977c:	4629      	mov	r1, r5
 800977e:	4620      	mov	r0, r4
 8009780:	f7f7 f982 	bl	8000a88 <__aeabi_d2uiz>
 8009784:	2801      	cmp	r0, #1
 8009786:	bf38      	it	cc
 8009788:	2001      	movcc	r0, #1
 800978a:	f7f6 fe2b 	bl	80003e4 <__aeabi_ui2d>
 800978e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009790:	4604      	mov	r4, r0
 8009792:	460d      	mov	r5, r1
 8009794:	b9d3      	cbnz	r3, 80097cc <_strtod_l+0xb84>
 8009796:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800979a:	9012      	str	r0, [sp, #72]	; 0x48
 800979c:	9313      	str	r3, [sp, #76]	; 0x4c
 800979e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80097a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097a4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80097a8:	1a9f      	subs	r7, r3, r2
 80097aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097ae:	f002 f851 	bl	800b854 <__ulp>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4630      	mov	r0, r6
 80097b8:	4639      	mov	r1, r7
 80097ba:	f7f6 fe8d 	bl	80004d8 <__aeabi_dmul>
 80097be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80097c2:	f7f6 fcd3 	bl	800016c <__adddf3>
 80097c6:	4680      	mov	r8, r0
 80097c8:	4689      	mov	r9, r1
 80097ca:	e77e      	b.n	80096ca <_strtod_l+0xa82>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80097d4:	e7e3      	b.n	800979e <_strtod_l+0xb56>
 80097d6:	a30e      	add	r3, pc, #56	; (adr r3, 8009810 <_strtod_l+0xbc8>)
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	f7f7 f8ee 	bl	80009bc <__aeabi_dcmplt>
 80097e0:	e7a1      	b.n	8009726 <_strtod_l+0xade>
 80097e2:	2300      	movs	r3, #0
 80097e4:	930a      	str	r3, [sp, #40]	; 0x28
 80097e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	f7ff ba71 	b.w	8008cd2 <_strtod_l+0x8a>
 80097f0:	2a65      	cmp	r2, #101	; 0x65
 80097f2:	f43f ab63 	beq.w	8008ebc <_strtod_l+0x274>
 80097f6:	2a45      	cmp	r2, #69	; 0x45
 80097f8:	f43f ab60 	beq.w	8008ebc <_strtod_l+0x274>
 80097fc:	2301      	movs	r3, #1
 80097fe:	f7ff bb95 	b.w	8008f2c <_strtod_l+0x2e4>
 8009802:	bf00      	nop
 8009804:	f3af 8000 	nop.w
 8009808:	ffc00000 	.word	0xffc00000
 800980c:	41dfffff 	.word	0x41dfffff
 8009810:	94a03595 	.word	0x94a03595
 8009814:	3fcfffff 	.word	0x3fcfffff

08009818 <_strtod_r>:
 8009818:	4b01      	ldr	r3, [pc, #4]	; (8009820 <_strtod_r+0x8>)
 800981a:	f7ff ba15 	b.w	8008c48 <_strtod_l>
 800981e:	bf00      	nop
 8009820:	20000094 	.word	0x20000094

08009824 <_strtol_l.constprop.0>:
 8009824:	2b01      	cmp	r3, #1
 8009826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982a:	4680      	mov	r8, r0
 800982c:	d001      	beq.n	8009832 <_strtol_l.constprop.0+0xe>
 800982e:	2b24      	cmp	r3, #36	; 0x24
 8009830:	d906      	bls.n	8009840 <_strtol_l.constprop.0+0x1c>
 8009832:	f7fd ffe3 	bl	80077fc <__errno>
 8009836:	2316      	movs	r3, #22
 8009838:	6003      	str	r3, [r0, #0]
 800983a:	2000      	movs	r0, #0
 800983c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009840:	460d      	mov	r5, r1
 8009842:	4f35      	ldr	r7, [pc, #212]	; (8009918 <_strtol_l.constprop.0+0xf4>)
 8009844:	4628      	mov	r0, r5
 8009846:	f815 4b01 	ldrb.w	r4, [r5], #1
 800984a:	5de6      	ldrb	r6, [r4, r7]
 800984c:	f016 0608 	ands.w	r6, r6, #8
 8009850:	d1f8      	bne.n	8009844 <_strtol_l.constprop.0+0x20>
 8009852:	2c2d      	cmp	r4, #45	; 0x2d
 8009854:	d12f      	bne.n	80098b6 <_strtol_l.constprop.0+0x92>
 8009856:	2601      	movs	r6, #1
 8009858:	782c      	ldrb	r4, [r5, #0]
 800985a:	1c85      	adds	r5, r0, #2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d057      	beq.n	8009910 <_strtol_l.constprop.0+0xec>
 8009860:	2b10      	cmp	r3, #16
 8009862:	d109      	bne.n	8009878 <_strtol_l.constprop.0+0x54>
 8009864:	2c30      	cmp	r4, #48	; 0x30
 8009866:	d107      	bne.n	8009878 <_strtol_l.constprop.0+0x54>
 8009868:	7828      	ldrb	r0, [r5, #0]
 800986a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800986e:	2858      	cmp	r0, #88	; 0x58
 8009870:	d149      	bne.n	8009906 <_strtol_l.constprop.0+0xe2>
 8009872:	2310      	movs	r3, #16
 8009874:	786c      	ldrb	r4, [r5, #1]
 8009876:	3502      	adds	r5, #2
 8009878:	2700      	movs	r7, #0
 800987a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800987e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009882:	fbbe f9f3 	udiv	r9, lr, r3
 8009886:	4638      	mov	r0, r7
 8009888:	fb03 ea19 	mls	sl, r3, r9, lr
 800988c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009890:	f1bc 0f09 	cmp.w	ip, #9
 8009894:	d814      	bhi.n	80098c0 <_strtol_l.constprop.0+0x9c>
 8009896:	4664      	mov	r4, ip
 8009898:	42a3      	cmp	r3, r4
 800989a:	dd22      	ble.n	80098e2 <_strtol_l.constprop.0+0xbe>
 800989c:	2f00      	cmp	r7, #0
 800989e:	db1d      	blt.n	80098dc <_strtol_l.constprop.0+0xb8>
 80098a0:	4581      	cmp	r9, r0
 80098a2:	d31b      	bcc.n	80098dc <_strtol_l.constprop.0+0xb8>
 80098a4:	d101      	bne.n	80098aa <_strtol_l.constprop.0+0x86>
 80098a6:	45a2      	cmp	sl, r4
 80098a8:	db18      	blt.n	80098dc <_strtol_l.constprop.0+0xb8>
 80098aa:	2701      	movs	r7, #1
 80098ac:	fb00 4003 	mla	r0, r0, r3, r4
 80098b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098b4:	e7ea      	b.n	800988c <_strtol_l.constprop.0+0x68>
 80098b6:	2c2b      	cmp	r4, #43	; 0x2b
 80098b8:	bf04      	itt	eq
 80098ba:	782c      	ldrbeq	r4, [r5, #0]
 80098bc:	1c85      	addeq	r5, r0, #2
 80098be:	e7cd      	b.n	800985c <_strtol_l.constprop.0+0x38>
 80098c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80098c4:	f1bc 0f19 	cmp.w	ip, #25
 80098c8:	d801      	bhi.n	80098ce <_strtol_l.constprop.0+0xaa>
 80098ca:	3c37      	subs	r4, #55	; 0x37
 80098cc:	e7e4      	b.n	8009898 <_strtol_l.constprop.0+0x74>
 80098ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80098d2:	f1bc 0f19 	cmp.w	ip, #25
 80098d6:	d804      	bhi.n	80098e2 <_strtol_l.constprop.0+0xbe>
 80098d8:	3c57      	subs	r4, #87	; 0x57
 80098da:	e7dd      	b.n	8009898 <_strtol_l.constprop.0+0x74>
 80098dc:	f04f 37ff 	mov.w	r7, #4294967295
 80098e0:	e7e6      	b.n	80098b0 <_strtol_l.constprop.0+0x8c>
 80098e2:	2f00      	cmp	r7, #0
 80098e4:	da07      	bge.n	80098f6 <_strtol_l.constprop.0+0xd2>
 80098e6:	2322      	movs	r3, #34	; 0x22
 80098e8:	4670      	mov	r0, lr
 80098ea:	f8c8 3000 	str.w	r3, [r8]
 80098ee:	2a00      	cmp	r2, #0
 80098f0:	d0a4      	beq.n	800983c <_strtol_l.constprop.0+0x18>
 80098f2:	1e69      	subs	r1, r5, #1
 80098f4:	e005      	b.n	8009902 <_strtol_l.constprop.0+0xde>
 80098f6:	b106      	cbz	r6, 80098fa <_strtol_l.constprop.0+0xd6>
 80098f8:	4240      	negs	r0, r0
 80098fa:	2a00      	cmp	r2, #0
 80098fc:	d09e      	beq.n	800983c <_strtol_l.constprop.0+0x18>
 80098fe:	2f00      	cmp	r7, #0
 8009900:	d1f7      	bne.n	80098f2 <_strtol_l.constprop.0+0xce>
 8009902:	6011      	str	r1, [r2, #0]
 8009904:	e79a      	b.n	800983c <_strtol_l.constprop.0+0x18>
 8009906:	2430      	movs	r4, #48	; 0x30
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1b5      	bne.n	8009878 <_strtol_l.constprop.0+0x54>
 800990c:	2308      	movs	r3, #8
 800990e:	e7b3      	b.n	8009878 <_strtol_l.constprop.0+0x54>
 8009910:	2c30      	cmp	r4, #48	; 0x30
 8009912:	d0a9      	beq.n	8009868 <_strtol_l.constprop.0+0x44>
 8009914:	230a      	movs	r3, #10
 8009916:	e7af      	b.n	8009878 <_strtol_l.constprop.0+0x54>
 8009918:	08011549 	.word	0x08011549

0800991c <_strtol_r>:
 800991c:	f7ff bf82 	b.w	8009824 <_strtol_l.constprop.0>

08009920 <__swbuf_r>:
 8009920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009922:	460e      	mov	r6, r1
 8009924:	4614      	mov	r4, r2
 8009926:	4605      	mov	r5, r0
 8009928:	b118      	cbz	r0, 8009932 <__swbuf_r+0x12>
 800992a:	6983      	ldr	r3, [r0, #24]
 800992c:	b90b      	cbnz	r3, 8009932 <__swbuf_r+0x12>
 800992e:	f7fd ffc3 	bl	80078b8 <__sinit>
 8009932:	4b21      	ldr	r3, [pc, #132]	; (80099b8 <__swbuf_r+0x98>)
 8009934:	429c      	cmp	r4, r3
 8009936:	d12b      	bne.n	8009990 <__swbuf_r+0x70>
 8009938:	686c      	ldr	r4, [r5, #4]
 800993a:	69a3      	ldr	r3, [r4, #24]
 800993c:	60a3      	str	r3, [r4, #8]
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	071a      	lsls	r2, r3, #28
 8009942:	d52f      	bpl.n	80099a4 <__swbuf_r+0x84>
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	b36b      	cbz	r3, 80099a4 <__swbuf_r+0x84>
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	6820      	ldr	r0, [r4, #0]
 800994c:	b2f6      	uxtb	r6, r6
 800994e:	1ac0      	subs	r0, r0, r3
 8009950:	6963      	ldr	r3, [r4, #20]
 8009952:	4637      	mov	r7, r6
 8009954:	4283      	cmp	r3, r0
 8009956:	dc04      	bgt.n	8009962 <__swbuf_r+0x42>
 8009958:	4621      	mov	r1, r4
 800995a:	4628      	mov	r0, r5
 800995c:	f000 ffc0 	bl	800a8e0 <_fflush_r>
 8009960:	bb30      	cbnz	r0, 80099b0 <__swbuf_r+0x90>
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	3001      	adds	r0, #1
 8009966:	3b01      	subs	r3, #1
 8009968:	60a3      	str	r3, [r4, #8]
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	6022      	str	r2, [r4, #0]
 8009970:	701e      	strb	r6, [r3, #0]
 8009972:	6963      	ldr	r3, [r4, #20]
 8009974:	4283      	cmp	r3, r0
 8009976:	d004      	beq.n	8009982 <__swbuf_r+0x62>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	07db      	lsls	r3, r3, #31
 800997c:	d506      	bpl.n	800998c <__swbuf_r+0x6c>
 800997e:	2e0a      	cmp	r6, #10
 8009980:	d104      	bne.n	800998c <__swbuf_r+0x6c>
 8009982:	4621      	mov	r1, r4
 8009984:	4628      	mov	r0, r5
 8009986:	f000 ffab 	bl	800a8e0 <_fflush_r>
 800998a:	b988      	cbnz	r0, 80099b0 <__swbuf_r+0x90>
 800998c:	4638      	mov	r0, r7
 800998e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009990:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <__swbuf_r+0x9c>)
 8009992:	429c      	cmp	r4, r3
 8009994:	d101      	bne.n	800999a <__swbuf_r+0x7a>
 8009996:	68ac      	ldr	r4, [r5, #8]
 8009998:	e7cf      	b.n	800993a <__swbuf_r+0x1a>
 800999a:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <__swbuf_r+0xa0>)
 800999c:	429c      	cmp	r4, r3
 800999e:	bf08      	it	eq
 80099a0:	68ec      	ldreq	r4, [r5, #12]
 80099a2:	e7ca      	b.n	800993a <__swbuf_r+0x1a>
 80099a4:	4621      	mov	r1, r4
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 f81e 	bl	80099e8 <__swsetup_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d0cb      	beq.n	8009948 <__swbuf_r+0x28>
 80099b0:	f04f 37ff 	mov.w	r7, #4294967295
 80099b4:	e7ea      	b.n	800998c <__swbuf_r+0x6c>
 80099b6:	bf00      	nop
 80099b8:	08011474 	.word	0x08011474
 80099bc:	08011494 	.word	0x08011494
 80099c0:	08011454 	.word	0x08011454

080099c4 <_write_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4604      	mov	r4, r0
 80099c8:	4608      	mov	r0, r1
 80099ca:	4611      	mov	r1, r2
 80099cc:	2200      	movs	r2, #0
 80099ce:	4d05      	ldr	r5, [pc, #20]	; (80099e4 <_write_r+0x20>)
 80099d0:	602a      	str	r2, [r5, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	f7f7 fb4a 	bl	800106c <_write>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d102      	bne.n	80099e2 <_write_r+0x1e>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	b103      	cbz	r3, 80099e2 <_write_r+0x1e>
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	bd38      	pop	{r3, r4, r5, pc}
 80099e4:	20001d3c 	.word	0x20001d3c

080099e8 <__swsetup_r>:
 80099e8:	4b32      	ldr	r3, [pc, #200]	; (8009ab4 <__swsetup_r+0xcc>)
 80099ea:	b570      	push	{r4, r5, r6, lr}
 80099ec:	681d      	ldr	r5, [r3, #0]
 80099ee:	4606      	mov	r6, r0
 80099f0:	460c      	mov	r4, r1
 80099f2:	b125      	cbz	r5, 80099fe <__swsetup_r+0x16>
 80099f4:	69ab      	ldr	r3, [r5, #24]
 80099f6:	b913      	cbnz	r3, 80099fe <__swsetup_r+0x16>
 80099f8:	4628      	mov	r0, r5
 80099fa:	f7fd ff5d 	bl	80078b8 <__sinit>
 80099fe:	4b2e      	ldr	r3, [pc, #184]	; (8009ab8 <__swsetup_r+0xd0>)
 8009a00:	429c      	cmp	r4, r3
 8009a02:	d10f      	bne.n	8009a24 <__swsetup_r+0x3c>
 8009a04:	686c      	ldr	r4, [r5, #4]
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a0c:	0719      	lsls	r1, r3, #28
 8009a0e:	d42c      	bmi.n	8009a6a <__swsetup_r+0x82>
 8009a10:	06dd      	lsls	r5, r3, #27
 8009a12:	d411      	bmi.n	8009a38 <__swsetup_r+0x50>
 8009a14:	2309      	movs	r3, #9
 8009a16:	6033      	str	r3, [r6, #0]
 8009a18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a20:	81a3      	strh	r3, [r4, #12]
 8009a22:	e03e      	b.n	8009aa2 <__swsetup_r+0xba>
 8009a24:	4b25      	ldr	r3, [pc, #148]	; (8009abc <__swsetup_r+0xd4>)
 8009a26:	429c      	cmp	r4, r3
 8009a28:	d101      	bne.n	8009a2e <__swsetup_r+0x46>
 8009a2a:	68ac      	ldr	r4, [r5, #8]
 8009a2c:	e7eb      	b.n	8009a06 <__swsetup_r+0x1e>
 8009a2e:	4b24      	ldr	r3, [pc, #144]	; (8009ac0 <__swsetup_r+0xd8>)
 8009a30:	429c      	cmp	r4, r3
 8009a32:	bf08      	it	eq
 8009a34:	68ec      	ldreq	r4, [r5, #12]
 8009a36:	e7e6      	b.n	8009a06 <__swsetup_r+0x1e>
 8009a38:	0758      	lsls	r0, r3, #29
 8009a3a:	d512      	bpl.n	8009a62 <__swsetup_r+0x7a>
 8009a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a3e:	b141      	cbz	r1, 8009a52 <__swsetup_r+0x6a>
 8009a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a44:	4299      	cmp	r1, r3
 8009a46:	d002      	beq.n	8009a4e <__swsetup_r+0x66>
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f7fe f821 	bl	8007a90 <_free_r>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	6363      	str	r3, [r4, #52]	; 0x34
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a58:	81a3      	strh	r3, [r4, #12]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	6063      	str	r3, [r4, #4]
 8009a5e:	6923      	ldr	r3, [r4, #16]
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	f043 0308 	orr.w	r3, r3, #8
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	6923      	ldr	r3, [r4, #16]
 8009a6c:	b94b      	cbnz	r3, 8009a82 <__swsetup_r+0x9a>
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a78:	d003      	beq.n	8009a82 <__swsetup_r+0x9a>
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f001 fb0d 	bl	800b09c <__smakebuf_r>
 8009a82:	89a0      	ldrh	r0, [r4, #12]
 8009a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a88:	f010 0301 	ands.w	r3, r0, #1
 8009a8c:	d00a      	beq.n	8009aa4 <__swsetup_r+0xbc>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60a3      	str	r3, [r4, #8]
 8009a92:	6963      	ldr	r3, [r4, #20]
 8009a94:	425b      	negs	r3, r3
 8009a96:	61a3      	str	r3, [r4, #24]
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	b943      	cbnz	r3, 8009aae <__swsetup_r+0xc6>
 8009a9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009aa0:	d1ba      	bne.n	8009a18 <__swsetup_r+0x30>
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}
 8009aa4:	0781      	lsls	r1, r0, #30
 8009aa6:	bf58      	it	pl
 8009aa8:	6963      	ldrpl	r3, [r4, #20]
 8009aaa:	60a3      	str	r3, [r4, #8]
 8009aac:	e7f4      	b.n	8009a98 <__swsetup_r+0xb0>
 8009aae:	2000      	movs	r0, #0
 8009ab0:	e7f7      	b.n	8009aa2 <__swsetup_r+0xba>
 8009ab2:	bf00      	nop
 8009ab4:	2000002c 	.word	0x2000002c
 8009ab8:	08011474 	.word	0x08011474
 8009abc:	08011494 	.word	0x08011494
 8009ac0:	08011454 	.word	0x08011454

08009ac4 <_close_r>:
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	4d05      	ldr	r5, [pc, #20]	; (8009ae0 <_close_r+0x1c>)
 8009aca:	4604      	mov	r4, r0
 8009acc:	4608      	mov	r0, r1
 8009ace:	602b      	str	r3, [r5, #0]
 8009ad0:	f7f7 fc83 	bl	80013da <_close>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	d102      	bne.n	8009ade <_close_r+0x1a>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	b103      	cbz	r3, 8009ade <_close_r+0x1a>
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	20001d3c 	.word	0x20001d3c

08009ae4 <quorem>:
 8009ae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	6903      	ldr	r3, [r0, #16]
 8009aea:	690c      	ldr	r4, [r1, #16]
 8009aec:	4607      	mov	r7, r0
 8009aee:	42a3      	cmp	r3, r4
 8009af0:	f2c0 8082 	blt.w	8009bf8 <quorem+0x114>
 8009af4:	3c01      	subs	r4, #1
 8009af6:	f100 0514 	add.w	r5, r0, #20
 8009afa:	f101 0814 	add.w	r8, r1, #20
 8009afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b02:	9301      	str	r3, [sp, #4]
 8009b04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b1c:	d331      	bcc.n	8009b82 <quorem+0x9e>
 8009b1e:	f04f 0e00 	mov.w	lr, #0
 8009b22:	4640      	mov	r0, r8
 8009b24:	46ac      	mov	ip, r5
 8009b26:	46f2      	mov	sl, lr
 8009b28:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b2c:	b293      	uxth	r3, r2
 8009b2e:	fb06 e303 	mla	r3, r6, r3, lr
 8009b32:	0c12      	lsrs	r2, r2, #16
 8009b34:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	fb06 e202 	mla	r2, r6, r2, lr
 8009b3e:	ebaa 0303 	sub.w	r3, sl, r3
 8009b42:	f8dc a000 	ldr.w	sl, [ip]
 8009b46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b4a:	fa1f fa8a 	uxth.w	sl, sl
 8009b4e:	4453      	add	r3, sl
 8009b50:	f8dc a000 	ldr.w	sl, [ip]
 8009b54:	b292      	uxth	r2, r2
 8009b56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b64:	4581      	cmp	r9, r0
 8009b66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b6a:	f84c 3b04 	str.w	r3, [ip], #4
 8009b6e:	d2db      	bcs.n	8009b28 <quorem+0x44>
 8009b70:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b74:	b92b      	cbnz	r3, 8009b82 <quorem+0x9e>
 8009b76:	9b01      	ldr	r3, [sp, #4]
 8009b78:	3b04      	subs	r3, #4
 8009b7a:	429d      	cmp	r5, r3
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	d32f      	bcc.n	8009be0 <quorem+0xfc>
 8009b80:	613c      	str	r4, [r7, #16]
 8009b82:	4638      	mov	r0, r7
 8009b84:	f001 fdbe 	bl	800b704 <__mcmp>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	db25      	blt.n	8009bd8 <quorem+0xf4>
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f04f 0c00 	mov.w	ip, #0
 8009b92:	3601      	adds	r6, #1
 8009b94:	f858 1b04 	ldr.w	r1, [r8], #4
 8009b98:	f8d0 e000 	ldr.w	lr, [r0]
 8009b9c:	b28b      	uxth	r3, r1
 8009b9e:	ebac 0303 	sub.w	r3, ip, r3
 8009ba2:	fa1f f28e 	uxth.w	r2, lr
 8009ba6:	4413      	add	r3, r2
 8009ba8:	0c0a      	lsrs	r2, r1, #16
 8009baa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009bae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bb8:	45c1      	cmp	r9, r8
 8009bba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bbe:	f840 3b04 	str.w	r3, [r0], #4
 8009bc2:	d2e7      	bcs.n	8009b94 <quorem+0xb0>
 8009bc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bcc:	b922      	cbnz	r2, 8009bd8 <quorem+0xf4>
 8009bce:	3b04      	subs	r3, #4
 8009bd0:	429d      	cmp	r5, r3
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	d30a      	bcc.n	8009bec <quorem+0x108>
 8009bd6:	613c      	str	r4, [r7, #16]
 8009bd8:	4630      	mov	r0, r6
 8009bda:	b003      	add	sp, #12
 8009bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be0:	6812      	ldr	r2, [r2, #0]
 8009be2:	3b04      	subs	r3, #4
 8009be4:	2a00      	cmp	r2, #0
 8009be6:	d1cb      	bne.n	8009b80 <quorem+0x9c>
 8009be8:	3c01      	subs	r4, #1
 8009bea:	e7c6      	b.n	8009b7a <quorem+0x96>
 8009bec:	6812      	ldr	r2, [r2, #0]
 8009bee:	3b04      	subs	r3, #4
 8009bf0:	2a00      	cmp	r2, #0
 8009bf2:	d1f0      	bne.n	8009bd6 <quorem+0xf2>
 8009bf4:	3c01      	subs	r4, #1
 8009bf6:	e7eb      	b.n	8009bd0 <quorem+0xec>
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	e7ee      	b.n	8009bda <quorem+0xf6>
 8009bfc:	0000      	movs	r0, r0
	...

08009c00 <_dtoa_r>:
 8009c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c04:	4616      	mov	r6, r2
 8009c06:	461f      	mov	r7, r3
 8009c08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009c0a:	b099      	sub	sp, #100	; 0x64
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009c12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009c16:	b974      	cbnz	r4, 8009c36 <_dtoa_r+0x36>
 8009c18:	2010      	movs	r0, #16
 8009c1a:	f7fd ff13 	bl	8007a44 <malloc>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	6268      	str	r0, [r5, #36]	; 0x24
 8009c22:	b920      	cbnz	r0, 8009c2e <_dtoa_r+0x2e>
 8009c24:	21ea      	movs	r1, #234	; 0xea
 8009c26:	4ba8      	ldr	r3, [pc, #672]	; (8009ec8 <_dtoa_r+0x2c8>)
 8009c28:	48a8      	ldr	r0, [pc, #672]	; (8009ecc <_dtoa_r+0x2cc>)
 8009c2a:	f002 fa5d 	bl	800c0e8 <__assert_func>
 8009c2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c32:	6004      	str	r4, [r0, #0]
 8009c34:	60c4      	str	r4, [r0, #12]
 8009c36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c38:	6819      	ldr	r1, [r3, #0]
 8009c3a:	b151      	cbz	r1, 8009c52 <_dtoa_r+0x52>
 8009c3c:	685a      	ldr	r2, [r3, #4]
 8009c3e:	2301      	movs	r3, #1
 8009c40:	4093      	lsls	r3, r2
 8009c42:	604a      	str	r2, [r1, #4]
 8009c44:	608b      	str	r3, [r1, #8]
 8009c46:	4628      	mov	r0, r5
 8009c48:	f001 fad4 	bl	800b1f4 <_Bfree>
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	1e3b      	subs	r3, r7, #0
 8009c54:	bfaf      	iteee	ge
 8009c56:	2300      	movge	r3, #0
 8009c58:	2201      	movlt	r2, #1
 8009c5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009c5e:	9305      	strlt	r3, [sp, #20]
 8009c60:	bfa8      	it	ge
 8009c62:	f8c8 3000 	strge.w	r3, [r8]
 8009c66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009c6a:	4b99      	ldr	r3, [pc, #612]	; (8009ed0 <_dtoa_r+0x2d0>)
 8009c6c:	bfb8      	it	lt
 8009c6e:	f8c8 2000 	strlt.w	r2, [r8]
 8009c72:	ea33 0309 	bics.w	r3, r3, r9
 8009c76:	d119      	bne.n	8009cac <_dtoa_r+0xac>
 8009c78:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c84:	4333      	orrs	r3, r6
 8009c86:	f000 857f 	beq.w	800a788 <_dtoa_r+0xb88>
 8009c8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009c8c:	b953      	cbnz	r3, 8009ca4 <_dtoa_r+0xa4>
 8009c8e:	4b91      	ldr	r3, [pc, #580]	; (8009ed4 <_dtoa_r+0x2d4>)
 8009c90:	e022      	b.n	8009cd8 <_dtoa_r+0xd8>
 8009c92:	4b91      	ldr	r3, [pc, #580]	; (8009ed8 <_dtoa_r+0x2d8>)
 8009c94:	9303      	str	r3, [sp, #12]
 8009c96:	3308      	adds	r3, #8
 8009c98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	9803      	ldr	r0, [sp, #12]
 8009c9e:	b019      	add	sp, #100	; 0x64
 8009ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca4:	4b8b      	ldr	r3, [pc, #556]	; (8009ed4 <_dtoa_r+0x2d4>)
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	3303      	adds	r3, #3
 8009caa:	e7f5      	b.n	8009c98 <_dtoa_r+0x98>
 8009cac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009cb0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009cb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cb8:	2200      	movs	r2, #0
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f7f6 fe74 	bl	80009a8 <__aeabi_dcmpeq>
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	b158      	cbz	r0, 8009cdc <_dtoa_r+0xdc>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009cc8:	6013      	str	r3, [r2, #0]
 8009cca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 8558 	beq.w	800a782 <_dtoa_r+0xb82>
 8009cd2:	4882      	ldr	r0, [pc, #520]	; (8009edc <_dtoa_r+0x2dc>)
 8009cd4:	6018      	str	r0, [r3, #0]
 8009cd6:	1e43      	subs	r3, r0, #1
 8009cd8:	9303      	str	r3, [sp, #12]
 8009cda:	e7df      	b.n	8009c9c <_dtoa_r+0x9c>
 8009cdc:	ab16      	add	r3, sp, #88	; 0x58
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	ab17      	add	r3, sp, #92	; 0x5c
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009cea:	f001 fe2d 	bl	800b948 <__d2b>
 8009cee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009cf2:	4683      	mov	fp, r0
 8009cf4:	2c00      	cmp	r4, #0
 8009cf6:	d07f      	beq.n	8009df8 <_dtoa_r+0x1f8>
 8009cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cfe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009d02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d06:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009d0a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009d0e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009d12:	2200      	movs	r2, #0
 8009d14:	4b72      	ldr	r3, [pc, #456]	; (8009ee0 <_dtoa_r+0x2e0>)
 8009d16:	f7f6 fa27 	bl	8000168 <__aeabi_dsub>
 8009d1a:	a365      	add	r3, pc, #404	; (adr r3, 8009eb0 <_dtoa_r+0x2b0>)
 8009d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d20:	f7f6 fbda 	bl	80004d8 <__aeabi_dmul>
 8009d24:	a364      	add	r3, pc, #400	; (adr r3, 8009eb8 <_dtoa_r+0x2b8>)
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f7f6 fa1f 	bl	800016c <__adddf3>
 8009d2e:	4606      	mov	r6, r0
 8009d30:	4620      	mov	r0, r4
 8009d32:	460f      	mov	r7, r1
 8009d34:	f7f6 fb66 	bl	8000404 <__aeabi_i2d>
 8009d38:	a361      	add	r3, pc, #388	; (adr r3, 8009ec0 <_dtoa_r+0x2c0>)
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	f7f6 fbcb 	bl	80004d8 <__aeabi_dmul>
 8009d42:	4602      	mov	r2, r0
 8009d44:	460b      	mov	r3, r1
 8009d46:	4630      	mov	r0, r6
 8009d48:	4639      	mov	r1, r7
 8009d4a:	f7f6 fa0f 	bl	800016c <__adddf3>
 8009d4e:	4606      	mov	r6, r0
 8009d50:	460f      	mov	r7, r1
 8009d52:	f7f6 fe71 	bl	8000a38 <__aeabi_d2iz>
 8009d56:	2200      	movs	r2, #0
 8009d58:	4682      	mov	sl, r0
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	4639      	mov	r1, r7
 8009d60:	f7f6 fe2c 	bl	80009bc <__aeabi_dcmplt>
 8009d64:	b148      	cbz	r0, 8009d7a <_dtoa_r+0x17a>
 8009d66:	4650      	mov	r0, sl
 8009d68:	f7f6 fb4c 	bl	8000404 <__aeabi_i2d>
 8009d6c:	4632      	mov	r2, r6
 8009d6e:	463b      	mov	r3, r7
 8009d70:	f7f6 fe1a 	bl	80009a8 <__aeabi_dcmpeq>
 8009d74:	b908      	cbnz	r0, 8009d7a <_dtoa_r+0x17a>
 8009d76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d7a:	f1ba 0f16 	cmp.w	sl, #22
 8009d7e:	d858      	bhi.n	8009e32 <_dtoa_r+0x232>
 8009d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d84:	4b57      	ldr	r3, [pc, #348]	; (8009ee4 <_dtoa_r+0x2e4>)
 8009d86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	f7f6 fe15 	bl	80009bc <__aeabi_dcmplt>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d04f      	beq.n	8009e36 <_dtoa_r+0x236>
 8009d96:	2300      	movs	r3, #0
 8009d98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009da0:	1b1c      	subs	r4, r3, r4
 8009da2:	1e63      	subs	r3, r4, #1
 8009da4:	9309      	str	r3, [sp, #36]	; 0x24
 8009da6:	bf49      	itett	mi
 8009da8:	f1c4 0301 	rsbmi	r3, r4, #1
 8009dac:	2300      	movpl	r3, #0
 8009dae:	9306      	strmi	r3, [sp, #24]
 8009db0:	2300      	movmi	r3, #0
 8009db2:	bf54      	ite	pl
 8009db4:	9306      	strpl	r3, [sp, #24]
 8009db6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009db8:	f1ba 0f00 	cmp.w	sl, #0
 8009dbc:	db3d      	blt.n	8009e3a <_dtoa_r+0x23a>
 8009dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009dc4:	4453      	add	r3, sl
 8009dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc8:	2300      	movs	r3, #0
 8009dca:	930a      	str	r3, [sp, #40]	; 0x28
 8009dcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009dce:	2b09      	cmp	r3, #9
 8009dd0:	f200 808c 	bhi.w	8009eec <_dtoa_r+0x2ec>
 8009dd4:	2b05      	cmp	r3, #5
 8009dd6:	bfc4      	itt	gt
 8009dd8:	3b04      	subgt	r3, #4
 8009dda:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009ddc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009dde:	bfc8      	it	gt
 8009de0:	2400      	movgt	r4, #0
 8009de2:	f1a3 0302 	sub.w	r3, r3, #2
 8009de6:	bfd8      	it	le
 8009de8:	2401      	movle	r4, #1
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	f200 808a 	bhi.w	8009f04 <_dtoa_r+0x304>
 8009df0:	e8df f003 	tbb	[pc, r3]
 8009df4:	5b4d4f2d 	.word	0x5b4d4f2d
 8009df8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009dfc:	441c      	add	r4, r3
 8009dfe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009e02:	2b20      	cmp	r3, #32
 8009e04:	bfc3      	ittte	gt
 8009e06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e0a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009e0e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009e12:	f1c3 0320 	rsble	r3, r3, #32
 8009e16:	bfc6      	itte	gt
 8009e18:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e1c:	4318      	orrgt	r0, r3
 8009e1e:	fa06 f003 	lslle.w	r0, r6, r3
 8009e22:	f7f6 fadf 	bl	80003e4 <__aeabi_ui2d>
 8009e26:	2301      	movs	r3, #1
 8009e28:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009e2c:	3c01      	subs	r4, #1
 8009e2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e30:	e76f      	b.n	8009d12 <_dtoa_r+0x112>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e7b2      	b.n	8009d9c <_dtoa_r+0x19c>
 8009e36:	900f      	str	r0, [sp, #60]	; 0x3c
 8009e38:	e7b1      	b.n	8009d9e <_dtoa_r+0x19e>
 8009e3a:	9b06      	ldr	r3, [sp, #24]
 8009e3c:	eba3 030a 	sub.w	r3, r3, sl
 8009e40:	9306      	str	r3, [sp, #24]
 8009e42:	f1ca 0300 	rsb	r3, sl, #0
 8009e46:	930a      	str	r3, [sp, #40]	; 0x28
 8009e48:	2300      	movs	r3, #0
 8009e4a:	930e      	str	r3, [sp, #56]	; 0x38
 8009e4c:	e7be      	b.n	8009dcc <_dtoa_r+0x1cc>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dc58      	bgt.n	8009f0a <_dtoa_r+0x30a>
 8009e58:	f04f 0901 	mov.w	r9, #1
 8009e5c:	464b      	mov	r3, r9
 8009e5e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009e62:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009e66:	2200      	movs	r2, #0
 8009e68:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009e6a:	6042      	str	r2, [r0, #4]
 8009e6c:	2204      	movs	r2, #4
 8009e6e:	f102 0614 	add.w	r6, r2, #20
 8009e72:	429e      	cmp	r6, r3
 8009e74:	6841      	ldr	r1, [r0, #4]
 8009e76:	d94e      	bls.n	8009f16 <_dtoa_r+0x316>
 8009e78:	4628      	mov	r0, r5
 8009e7a:	f001 f97b 	bl	800b174 <_Balloc>
 8009e7e:	9003      	str	r0, [sp, #12]
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d14c      	bne.n	8009f1e <_dtoa_r+0x31e>
 8009e84:	4602      	mov	r2, r0
 8009e86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009e8a:	4b17      	ldr	r3, [pc, #92]	; (8009ee8 <_dtoa_r+0x2e8>)
 8009e8c:	e6cc      	b.n	8009c28 <_dtoa_r+0x28>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e7de      	b.n	8009e50 <_dtoa_r+0x250>
 8009e92:	2300      	movs	r3, #0
 8009e94:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e98:	eb0a 0903 	add.w	r9, sl, r3
 8009e9c:	f109 0301 	add.w	r3, r9, #1
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	9308      	str	r3, [sp, #32]
 8009ea4:	bfb8      	it	lt
 8009ea6:	2301      	movlt	r3, #1
 8009ea8:	e7dd      	b.n	8009e66 <_dtoa_r+0x266>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e7f2      	b.n	8009e94 <_dtoa_r+0x294>
 8009eae:	bf00      	nop
 8009eb0:	636f4361 	.word	0x636f4361
 8009eb4:	3fd287a7 	.word	0x3fd287a7
 8009eb8:	8b60c8b3 	.word	0x8b60c8b3
 8009ebc:	3fc68a28 	.word	0x3fc68a28
 8009ec0:	509f79fb 	.word	0x509f79fb
 8009ec4:	3fd34413 	.word	0x3fd34413
 8009ec8:	08011656 	.word	0x08011656
 8009ecc:	0801166d 	.word	0x0801166d
 8009ed0:	7ff00000 	.word	0x7ff00000
 8009ed4:	08011652 	.word	0x08011652
 8009ed8:	08011649 	.word	0x08011649
 8009edc:	080114c9 	.word	0x080114c9
 8009ee0:	3ff80000 	.word	0x3ff80000
 8009ee4:	080117d8 	.word	0x080117d8
 8009ee8:	080116c8 	.word	0x080116c8
 8009eec:	2401      	movs	r4, #1
 8009eee:	2300      	movs	r3, #0
 8009ef0:	940b      	str	r4, [sp, #44]	; 0x2c
 8009ef2:	9322      	str	r3, [sp, #136]	; 0x88
 8009ef4:	f04f 39ff 	mov.w	r9, #4294967295
 8009ef8:	2200      	movs	r2, #0
 8009efa:	2312      	movs	r3, #18
 8009efc:	f8cd 9020 	str.w	r9, [sp, #32]
 8009f00:	9223      	str	r2, [sp, #140]	; 0x8c
 8009f02:	e7b0      	b.n	8009e66 <_dtoa_r+0x266>
 8009f04:	2301      	movs	r3, #1
 8009f06:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f08:	e7f4      	b.n	8009ef4 <_dtoa_r+0x2f4>
 8009f0a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009f0e:	464b      	mov	r3, r9
 8009f10:	f8cd 9020 	str.w	r9, [sp, #32]
 8009f14:	e7a7      	b.n	8009e66 <_dtoa_r+0x266>
 8009f16:	3101      	adds	r1, #1
 8009f18:	6041      	str	r1, [r0, #4]
 8009f1a:	0052      	lsls	r2, r2, #1
 8009f1c:	e7a7      	b.n	8009e6e <_dtoa_r+0x26e>
 8009f1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f20:	9a03      	ldr	r2, [sp, #12]
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	9b08      	ldr	r3, [sp, #32]
 8009f26:	2b0e      	cmp	r3, #14
 8009f28:	f200 80a8 	bhi.w	800a07c <_dtoa_r+0x47c>
 8009f2c:	2c00      	cmp	r4, #0
 8009f2e:	f000 80a5 	beq.w	800a07c <_dtoa_r+0x47c>
 8009f32:	f1ba 0f00 	cmp.w	sl, #0
 8009f36:	dd34      	ble.n	8009fa2 <_dtoa_r+0x3a2>
 8009f38:	4a9a      	ldr	r2, [pc, #616]	; (800a1a4 <_dtoa_r+0x5a4>)
 8009f3a:	f00a 030f 	and.w	r3, sl, #15
 8009f3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f42:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009f46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009f4e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009f52:	d016      	beq.n	8009f82 <_dtoa_r+0x382>
 8009f54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f58:	4b93      	ldr	r3, [pc, #588]	; (800a1a8 <_dtoa_r+0x5a8>)
 8009f5a:	2703      	movs	r7, #3
 8009f5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f60:	f7f6 fbe4 	bl	800072c <__aeabi_ddiv>
 8009f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f68:	f004 040f 	and.w	r4, r4, #15
 8009f6c:	4e8e      	ldr	r6, [pc, #568]	; (800a1a8 <_dtoa_r+0x5a8>)
 8009f6e:	b954      	cbnz	r4, 8009f86 <_dtoa_r+0x386>
 8009f70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f78:	f7f6 fbd8 	bl	800072c <__aeabi_ddiv>
 8009f7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f80:	e029      	b.n	8009fd6 <_dtoa_r+0x3d6>
 8009f82:	2702      	movs	r7, #2
 8009f84:	e7f2      	b.n	8009f6c <_dtoa_r+0x36c>
 8009f86:	07e1      	lsls	r1, r4, #31
 8009f88:	d508      	bpl.n	8009f9c <_dtoa_r+0x39c>
 8009f8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f92:	f7f6 faa1 	bl	80004d8 <__aeabi_dmul>
 8009f96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f9a:	3701      	adds	r7, #1
 8009f9c:	1064      	asrs	r4, r4, #1
 8009f9e:	3608      	adds	r6, #8
 8009fa0:	e7e5      	b.n	8009f6e <_dtoa_r+0x36e>
 8009fa2:	f000 80a5 	beq.w	800a0f0 <_dtoa_r+0x4f0>
 8009fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009faa:	f1ca 0400 	rsb	r4, sl, #0
 8009fae:	4b7d      	ldr	r3, [pc, #500]	; (800a1a4 <_dtoa_r+0x5a4>)
 8009fb0:	f004 020f 	and.w	r2, r4, #15
 8009fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f7f6 fa8c 	bl	80004d8 <__aeabi_dmul>
 8009fc0:	2702      	movs	r7, #2
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fc8:	4e77      	ldr	r6, [pc, #476]	; (800a1a8 <_dtoa_r+0x5a8>)
 8009fca:	1124      	asrs	r4, r4, #4
 8009fcc:	2c00      	cmp	r4, #0
 8009fce:	f040 8084 	bne.w	800a0da <_dtoa_r+0x4da>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1d2      	bne.n	8009f7c <_dtoa_r+0x37c>
 8009fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 808b 	beq.w	800a0f4 <_dtoa_r+0x4f4>
 8009fde:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009fe2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009fe6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009fea:	2200      	movs	r2, #0
 8009fec:	4b6f      	ldr	r3, [pc, #444]	; (800a1ac <_dtoa_r+0x5ac>)
 8009fee:	f7f6 fce5 	bl	80009bc <__aeabi_dcmplt>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d07e      	beq.n	800a0f4 <_dtoa_r+0x4f4>
 8009ff6:	9b08      	ldr	r3, [sp, #32]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d07b      	beq.n	800a0f4 <_dtoa_r+0x4f4>
 8009ffc:	f1b9 0f00 	cmp.w	r9, #0
 800a000:	dd38      	ble.n	800a074 <_dtoa_r+0x474>
 800a002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a006:	2200      	movs	r2, #0
 800a008:	4b69      	ldr	r3, [pc, #420]	; (800a1b0 <_dtoa_r+0x5b0>)
 800a00a:	f7f6 fa65 	bl	80004d8 <__aeabi_dmul>
 800a00e:	464c      	mov	r4, r9
 800a010:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a014:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a018:	3701      	adds	r7, #1
 800a01a:	4638      	mov	r0, r7
 800a01c:	f7f6 f9f2 	bl	8000404 <__aeabi_i2d>
 800a020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a024:	f7f6 fa58 	bl	80004d8 <__aeabi_dmul>
 800a028:	2200      	movs	r2, #0
 800a02a:	4b62      	ldr	r3, [pc, #392]	; (800a1b4 <_dtoa_r+0x5b4>)
 800a02c:	f7f6 f89e 	bl	800016c <__adddf3>
 800a030:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a034:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a038:	9611      	str	r6, [sp, #68]	; 0x44
 800a03a:	2c00      	cmp	r4, #0
 800a03c:	d15d      	bne.n	800a0fa <_dtoa_r+0x4fa>
 800a03e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a042:	2200      	movs	r2, #0
 800a044:	4b5c      	ldr	r3, [pc, #368]	; (800a1b8 <_dtoa_r+0x5b8>)
 800a046:	f7f6 f88f 	bl	8000168 <__aeabi_dsub>
 800a04a:	4602      	mov	r2, r0
 800a04c:	460b      	mov	r3, r1
 800a04e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a052:	4633      	mov	r3, r6
 800a054:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a056:	f7f6 fccf 	bl	80009f8 <__aeabi_dcmpgt>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f040 829c 	bne.w	800a598 <_dtoa_r+0x998>
 800a060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a066:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a06a:	f7f6 fca7 	bl	80009bc <__aeabi_dcmplt>
 800a06e:	2800      	cmp	r0, #0
 800a070:	f040 8290 	bne.w	800a594 <_dtoa_r+0x994>
 800a074:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a078:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a07c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f2c0 8152 	blt.w	800a328 <_dtoa_r+0x728>
 800a084:	f1ba 0f0e 	cmp.w	sl, #14
 800a088:	f300 814e 	bgt.w	800a328 <_dtoa_r+0x728>
 800a08c:	4b45      	ldr	r3, [pc, #276]	; (800a1a4 <_dtoa_r+0x5a4>)
 800a08e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a092:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a096:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a09a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f280 80db 	bge.w	800a258 <_dtoa_r+0x658>
 800a0a2:	9b08      	ldr	r3, [sp, #32]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f300 80d7 	bgt.w	800a258 <_dtoa_r+0x658>
 800a0aa:	f040 8272 	bne.w	800a592 <_dtoa_r+0x992>
 800a0ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	4b40      	ldr	r3, [pc, #256]	; (800a1b8 <_dtoa_r+0x5b8>)
 800a0b6:	f7f6 fa0f 	bl	80004d8 <__aeabi_dmul>
 800a0ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0be:	f7f6 fc91 	bl	80009e4 <__aeabi_dcmpge>
 800a0c2:	9c08      	ldr	r4, [sp, #32]
 800a0c4:	4626      	mov	r6, r4
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f040 8248 	bne.w	800a55c <_dtoa_r+0x95c>
 800a0cc:	2331      	movs	r3, #49	; 0x31
 800a0ce:	9f03      	ldr	r7, [sp, #12]
 800a0d0:	f10a 0a01 	add.w	sl, sl, #1
 800a0d4:	f807 3b01 	strb.w	r3, [r7], #1
 800a0d8:	e244      	b.n	800a564 <_dtoa_r+0x964>
 800a0da:	07e2      	lsls	r2, r4, #31
 800a0dc:	d505      	bpl.n	800a0ea <_dtoa_r+0x4ea>
 800a0de:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0e2:	f7f6 f9f9 	bl	80004d8 <__aeabi_dmul>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	3701      	adds	r7, #1
 800a0ea:	1064      	asrs	r4, r4, #1
 800a0ec:	3608      	adds	r6, #8
 800a0ee:	e76d      	b.n	8009fcc <_dtoa_r+0x3cc>
 800a0f0:	2702      	movs	r7, #2
 800a0f2:	e770      	b.n	8009fd6 <_dtoa_r+0x3d6>
 800a0f4:	46d0      	mov	r8, sl
 800a0f6:	9c08      	ldr	r4, [sp, #32]
 800a0f8:	e78f      	b.n	800a01a <_dtoa_r+0x41a>
 800a0fa:	9903      	ldr	r1, [sp, #12]
 800a0fc:	4b29      	ldr	r3, [pc, #164]	; (800a1a4 <_dtoa_r+0x5a4>)
 800a0fe:	4421      	add	r1, r4
 800a100:	9112      	str	r1, [sp, #72]	; 0x48
 800a102:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a104:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a108:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a10c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a110:	2900      	cmp	r1, #0
 800a112:	d055      	beq.n	800a1c0 <_dtoa_r+0x5c0>
 800a114:	2000      	movs	r0, #0
 800a116:	4929      	ldr	r1, [pc, #164]	; (800a1bc <_dtoa_r+0x5bc>)
 800a118:	f7f6 fb08 	bl	800072c <__aeabi_ddiv>
 800a11c:	463b      	mov	r3, r7
 800a11e:	4632      	mov	r2, r6
 800a120:	f7f6 f822 	bl	8000168 <__aeabi_dsub>
 800a124:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a128:	9f03      	ldr	r7, [sp, #12]
 800a12a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a12e:	f7f6 fc83 	bl	8000a38 <__aeabi_d2iz>
 800a132:	4604      	mov	r4, r0
 800a134:	f7f6 f966 	bl	8000404 <__aeabi_i2d>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a140:	f7f6 f812 	bl	8000168 <__aeabi_dsub>
 800a144:	4602      	mov	r2, r0
 800a146:	460b      	mov	r3, r1
 800a148:	3430      	adds	r4, #48	; 0x30
 800a14a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a14e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a152:	f807 4b01 	strb.w	r4, [r7], #1
 800a156:	f7f6 fc31 	bl	80009bc <__aeabi_dcmplt>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d174      	bne.n	800a248 <_dtoa_r+0x648>
 800a15e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a162:	2000      	movs	r0, #0
 800a164:	4911      	ldr	r1, [pc, #68]	; (800a1ac <_dtoa_r+0x5ac>)
 800a166:	f7f5 ffff 	bl	8000168 <__aeabi_dsub>
 800a16a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a16e:	f7f6 fc25 	bl	80009bc <__aeabi_dcmplt>
 800a172:	2800      	cmp	r0, #0
 800a174:	f040 80b7 	bne.w	800a2e6 <_dtoa_r+0x6e6>
 800a178:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a17a:	429f      	cmp	r7, r3
 800a17c:	f43f af7a 	beq.w	800a074 <_dtoa_r+0x474>
 800a180:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a184:	2200      	movs	r2, #0
 800a186:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <_dtoa_r+0x5b0>)
 800a188:	f7f6 f9a6 	bl	80004d8 <__aeabi_dmul>
 800a18c:	2200      	movs	r2, #0
 800a18e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a196:	4b06      	ldr	r3, [pc, #24]	; (800a1b0 <_dtoa_r+0x5b0>)
 800a198:	f7f6 f99e 	bl	80004d8 <__aeabi_dmul>
 800a19c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1a0:	e7c3      	b.n	800a12a <_dtoa_r+0x52a>
 800a1a2:	bf00      	nop
 800a1a4:	080117d8 	.word	0x080117d8
 800a1a8:	080117b0 	.word	0x080117b0
 800a1ac:	3ff00000 	.word	0x3ff00000
 800a1b0:	40240000 	.word	0x40240000
 800a1b4:	401c0000 	.word	0x401c0000
 800a1b8:	40140000 	.word	0x40140000
 800a1bc:	3fe00000 	.word	0x3fe00000
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f7f6 f988 	bl	80004d8 <__aeabi_dmul>
 800a1c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a1ce:	9c03      	ldr	r4, [sp, #12]
 800a1d0:	9314      	str	r3, [sp, #80]	; 0x50
 800a1d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1d6:	f7f6 fc2f 	bl	8000a38 <__aeabi_d2iz>
 800a1da:	9015      	str	r0, [sp, #84]	; 0x54
 800a1dc:	f7f6 f912 	bl	8000404 <__aeabi_i2d>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1e8:	f7f5 ffbe 	bl	8000168 <__aeabi_dsub>
 800a1ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	3330      	adds	r3, #48	; 0x30
 800a1f2:	f804 3b01 	strb.w	r3, [r4], #1
 800a1f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1f8:	460f      	mov	r7, r1
 800a1fa:	429c      	cmp	r4, r3
 800a1fc:	f04f 0200 	mov.w	r2, #0
 800a200:	d124      	bne.n	800a24c <_dtoa_r+0x64c>
 800a202:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a206:	4bb0      	ldr	r3, [pc, #704]	; (800a4c8 <_dtoa_r+0x8c8>)
 800a208:	f7f5 ffb0 	bl	800016c <__adddf3>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4630      	mov	r0, r6
 800a212:	4639      	mov	r1, r7
 800a214:	f7f6 fbf0 	bl	80009f8 <__aeabi_dcmpgt>
 800a218:	2800      	cmp	r0, #0
 800a21a:	d163      	bne.n	800a2e4 <_dtoa_r+0x6e4>
 800a21c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a220:	2000      	movs	r0, #0
 800a222:	49a9      	ldr	r1, [pc, #676]	; (800a4c8 <_dtoa_r+0x8c8>)
 800a224:	f7f5 ffa0 	bl	8000168 <__aeabi_dsub>
 800a228:	4602      	mov	r2, r0
 800a22a:	460b      	mov	r3, r1
 800a22c:	4630      	mov	r0, r6
 800a22e:	4639      	mov	r1, r7
 800a230:	f7f6 fbc4 	bl	80009bc <__aeabi_dcmplt>
 800a234:	2800      	cmp	r0, #0
 800a236:	f43f af1d 	beq.w	800a074 <_dtoa_r+0x474>
 800a23a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a23c:	1e7b      	subs	r3, r7, #1
 800a23e:	9314      	str	r3, [sp, #80]	; 0x50
 800a240:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a244:	2b30      	cmp	r3, #48	; 0x30
 800a246:	d0f8      	beq.n	800a23a <_dtoa_r+0x63a>
 800a248:	46c2      	mov	sl, r8
 800a24a:	e03b      	b.n	800a2c4 <_dtoa_r+0x6c4>
 800a24c:	4b9f      	ldr	r3, [pc, #636]	; (800a4cc <_dtoa_r+0x8cc>)
 800a24e:	f7f6 f943 	bl	80004d8 <__aeabi_dmul>
 800a252:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a256:	e7bc      	b.n	800a1d2 <_dtoa_r+0x5d2>
 800a258:	9f03      	ldr	r7, [sp, #12]
 800a25a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a25e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a262:	4640      	mov	r0, r8
 800a264:	4649      	mov	r1, r9
 800a266:	f7f6 fa61 	bl	800072c <__aeabi_ddiv>
 800a26a:	f7f6 fbe5 	bl	8000a38 <__aeabi_d2iz>
 800a26e:	4604      	mov	r4, r0
 800a270:	f7f6 f8c8 	bl	8000404 <__aeabi_i2d>
 800a274:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a278:	f7f6 f92e 	bl	80004d8 <__aeabi_dmul>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4640      	mov	r0, r8
 800a282:	4649      	mov	r1, r9
 800a284:	f7f5 ff70 	bl	8000168 <__aeabi_dsub>
 800a288:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a28c:	f807 6b01 	strb.w	r6, [r7], #1
 800a290:	9e03      	ldr	r6, [sp, #12]
 800a292:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a296:	1bbe      	subs	r6, r7, r6
 800a298:	45b4      	cmp	ip, r6
 800a29a:	4602      	mov	r2, r0
 800a29c:	460b      	mov	r3, r1
 800a29e:	d136      	bne.n	800a30e <_dtoa_r+0x70e>
 800a2a0:	f7f5 ff64 	bl	800016c <__adddf3>
 800a2a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2a8:	4680      	mov	r8, r0
 800a2aa:	4689      	mov	r9, r1
 800a2ac:	f7f6 fba4 	bl	80009f8 <__aeabi_dcmpgt>
 800a2b0:	bb58      	cbnz	r0, 800a30a <_dtoa_r+0x70a>
 800a2b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	4649      	mov	r1, r9
 800a2ba:	f7f6 fb75 	bl	80009a8 <__aeabi_dcmpeq>
 800a2be:	b108      	cbz	r0, 800a2c4 <_dtoa_r+0x6c4>
 800a2c0:	07e1      	lsls	r1, r4, #31
 800a2c2:	d422      	bmi.n	800a30a <_dtoa_r+0x70a>
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	4659      	mov	r1, fp
 800a2c8:	f000 ff94 	bl	800b1f4 <_Bfree>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	703b      	strb	r3, [r7, #0]
 800a2d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a2d2:	f10a 0001 	add.w	r0, sl, #1
 800a2d6:	6018      	str	r0, [r3, #0]
 800a2d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f43f acde 	beq.w	8009c9c <_dtoa_r+0x9c>
 800a2e0:	601f      	str	r7, [r3, #0]
 800a2e2:	e4db      	b.n	8009c9c <_dtoa_r+0x9c>
 800a2e4:	4627      	mov	r7, r4
 800a2e6:	463b      	mov	r3, r7
 800a2e8:	461f      	mov	r7, r3
 800a2ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2ee:	2a39      	cmp	r2, #57	; 0x39
 800a2f0:	d107      	bne.n	800a302 <_dtoa_r+0x702>
 800a2f2:	9a03      	ldr	r2, [sp, #12]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d1f7      	bne.n	800a2e8 <_dtoa_r+0x6e8>
 800a2f8:	2230      	movs	r2, #48	; 0x30
 800a2fa:	9903      	ldr	r1, [sp, #12]
 800a2fc:	f108 0801 	add.w	r8, r8, #1
 800a300:	700a      	strb	r2, [r1, #0]
 800a302:	781a      	ldrb	r2, [r3, #0]
 800a304:	3201      	adds	r2, #1
 800a306:	701a      	strb	r2, [r3, #0]
 800a308:	e79e      	b.n	800a248 <_dtoa_r+0x648>
 800a30a:	46d0      	mov	r8, sl
 800a30c:	e7eb      	b.n	800a2e6 <_dtoa_r+0x6e6>
 800a30e:	2200      	movs	r2, #0
 800a310:	4b6e      	ldr	r3, [pc, #440]	; (800a4cc <_dtoa_r+0x8cc>)
 800a312:	f7f6 f8e1 	bl	80004d8 <__aeabi_dmul>
 800a316:	2200      	movs	r2, #0
 800a318:	2300      	movs	r3, #0
 800a31a:	4680      	mov	r8, r0
 800a31c:	4689      	mov	r9, r1
 800a31e:	f7f6 fb43 	bl	80009a8 <__aeabi_dcmpeq>
 800a322:	2800      	cmp	r0, #0
 800a324:	d09b      	beq.n	800a25e <_dtoa_r+0x65e>
 800a326:	e7cd      	b.n	800a2c4 <_dtoa_r+0x6c4>
 800a328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	f000 80d0 	beq.w	800a4d0 <_dtoa_r+0x8d0>
 800a330:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a332:	2a01      	cmp	r2, #1
 800a334:	f300 80ae 	bgt.w	800a494 <_dtoa_r+0x894>
 800a338:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a33a:	2a00      	cmp	r2, #0
 800a33c:	f000 80a6 	beq.w	800a48c <_dtoa_r+0x88c>
 800a340:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a344:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a346:	9f06      	ldr	r7, [sp, #24]
 800a348:	9a06      	ldr	r2, [sp, #24]
 800a34a:	2101      	movs	r1, #1
 800a34c:	441a      	add	r2, r3
 800a34e:	9206      	str	r2, [sp, #24]
 800a350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a352:	4628      	mov	r0, r5
 800a354:	441a      	add	r2, r3
 800a356:	9209      	str	r2, [sp, #36]	; 0x24
 800a358:	f001 f84c 	bl	800b3f4 <__i2b>
 800a35c:	4606      	mov	r6, r0
 800a35e:	2f00      	cmp	r7, #0
 800a360:	dd0c      	ble.n	800a37c <_dtoa_r+0x77c>
 800a362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a364:	2b00      	cmp	r3, #0
 800a366:	dd09      	ble.n	800a37c <_dtoa_r+0x77c>
 800a368:	42bb      	cmp	r3, r7
 800a36a:	bfa8      	it	ge
 800a36c:	463b      	movge	r3, r7
 800a36e:	9a06      	ldr	r2, [sp, #24]
 800a370:	1aff      	subs	r7, r7, r3
 800a372:	1ad2      	subs	r2, r2, r3
 800a374:	9206      	str	r2, [sp, #24]
 800a376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	9309      	str	r3, [sp, #36]	; 0x24
 800a37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a37e:	b1f3      	cbz	r3, 800a3be <_dtoa_r+0x7be>
 800a380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 80a8 	beq.w	800a4d8 <_dtoa_r+0x8d8>
 800a388:	2c00      	cmp	r4, #0
 800a38a:	dd10      	ble.n	800a3ae <_dtoa_r+0x7ae>
 800a38c:	4631      	mov	r1, r6
 800a38e:	4622      	mov	r2, r4
 800a390:	4628      	mov	r0, r5
 800a392:	f001 f8ed 	bl	800b570 <__pow5mult>
 800a396:	465a      	mov	r2, fp
 800a398:	4601      	mov	r1, r0
 800a39a:	4606      	mov	r6, r0
 800a39c:	4628      	mov	r0, r5
 800a39e:	f001 f83f 	bl	800b420 <__multiply>
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	4659      	mov	r1, fp
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f000 ff24 	bl	800b1f4 <_Bfree>
 800a3ac:	46c3      	mov	fp, r8
 800a3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b0:	1b1a      	subs	r2, r3, r4
 800a3b2:	d004      	beq.n	800a3be <_dtoa_r+0x7be>
 800a3b4:	4659      	mov	r1, fp
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f001 f8da 	bl	800b570 <__pow5mult>
 800a3bc:	4683      	mov	fp, r0
 800a3be:	2101      	movs	r1, #1
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	f001 f817 	bl	800b3f4 <__i2b>
 800a3c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f340 8086 	ble.w	800a4dc <_dtoa_r+0x8dc>
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4601      	mov	r1, r0
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	f001 f8cb 	bl	800b570 <__pow5mult>
 800a3da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3dc:	4604      	mov	r4, r0
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	dd7f      	ble.n	800a4e2 <_dtoa_r+0x8e2>
 800a3e2:	f04f 0800 	mov.w	r8, #0
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a3ec:	6918      	ldr	r0, [r3, #16]
 800a3ee:	f000 ffb3 	bl	800b358 <__hi0bits>
 800a3f2:	f1c0 0020 	rsb	r0, r0, #32
 800a3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f8:	4418      	add	r0, r3
 800a3fa:	f010 001f 	ands.w	r0, r0, #31
 800a3fe:	f000 8092 	beq.w	800a526 <_dtoa_r+0x926>
 800a402:	f1c0 0320 	rsb	r3, r0, #32
 800a406:	2b04      	cmp	r3, #4
 800a408:	f340 808a 	ble.w	800a520 <_dtoa_r+0x920>
 800a40c:	f1c0 001c 	rsb	r0, r0, #28
 800a410:	9b06      	ldr	r3, [sp, #24]
 800a412:	4407      	add	r7, r0
 800a414:	4403      	add	r3, r0
 800a416:	9306      	str	r3, [sp, #24]
 800a418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a41a:	4403      	add	r3, r0
 800a41c:	9309      	str	r3, [sp, #36]	; 0x24
 800a41e:	9b06      	ldr	r3, [sp, #24]
 800a420:	2b00      	cmp	r3, #0
 800a422:	dd05      	ble.n	800a430 <_dtoa_r+0x830>
 800a424:	4659      	mov	r1, fp
 800a426:	461a      	mov	r2, r3
 800a428:	4628      	mov	r0, r5
 800a42a:	f001 f8fb 	bl	800b624 <__lshift>
 800a42e:	4683      	mov	fp, r0
 800a430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a432:	2b00      	cmp	r3, #0
 800a434:	dd05      	ble.n	800a442 <_dtoa_r+0x842>
 800a436:	4621      	mov	r1, r4
 800a438:	461a      	mov	r2, r3
 800a43a:	4628      	mov	r0, r5
 800a43c:	f001 f8f2 	bl	800b624 <__lshift>
 800a440:	4604      	mov	r4, r0
 800a442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d070      	beq.n	800a52a <_dtoa_r+0x92a>
 800a448:	4621      	mov	r1, r4
 800a44a:	4658      	mov	r0, fp
 800a44c:	f001 f95a 	bl	800b704 <__mcmp>
 800a450:	2800      	cmp	r0, #0
 800a452:	da6a      	bge.n	800a52a <_dtoa_r+0x92a>
 800a454:	2300      	movs	r3, #0
 800a456:	4659      	mov	r1, fp
 800a458:	220a      	movs	r2, #10
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 feec 	bl	800b238 <__multadd>
 800a460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a462:	4683      	mov	fp, r0
 800a464:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 8194 	beq.w	800a796 <_dtoa_r+0xb96>
 800a46e:	4631      	mov	r1, r6
 800a470:	2300      	movs	r3, #0
 800a472:	220a      	movs	r2, #10
 800a474:	4628      	mov	r0, r5
 800a476:	f000 fedf 	bl	800b238 <__multadd>
 800a47a:	f1b9 0f00 	cmp.w	r9, #0
 800a47e:	4606      	mov	r6, r0
 800a480:	f300 8093 	bgt.w	800a5aa <_dtoa_r+0x9aa>
 800a484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a486:	2b02      	cmp	r3, #2
 800a488:	dc57      	bgt.n	800a53a <_dtoa_r+0x93a>
 800a48a:	e08e      	b.n	800a5aa <_dtoa_r+0x9aa>
 800a48c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a48e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a492:	e757      	b.n	800a344 <_dtoa_r+0x744>
 800a494:	9b08      	ldr	r3, [sp, #32]
 800a496:	1e5c      	subs	r4, r3, #1
 800a498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a49a:	42a3      	cmp	r3, r4
 800a49c:	bfb7      	itett	lt
 800a49e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4a0:	1b1c      	subge	r4, r3, r4
 800a4a2:	1ae2      	sublt	r2, r4, r3
 800a4a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a4a6:	bfbe      	ittt	lt
 800a4a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a4aa:	189b      	addlt	r3, r3, r2
 800a4ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a4ae:	9b08      	ldr	r3, [sp, #32]
 800a4b0:	bfb8      	it	lt
 800a4b2:	2400      	movlt	r4, #0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bfbb      	ittet	lt
 800a4b8:	9b06      	ldrlt	r3, [sp, #24]
 800a4ba:	9a08      	ldrlt	r2, [sp, #32]
 800a4bc:	9f06      	ldrge	r7, [sp, #24]
 800a4be:	1a9f      	sublt	r7, r3, r2
 800a4c0:	bfac      	ite	ge
 800a4c2:	9b08      	ldrge	r3, [sp, #32]
 800a4c4:	2300      	movlt	r3, #0
 800a4c6:	e73f      	b.n	800a348 <_dtoa_r+0x748>
 800a4c8:	3fe00000 	.word	0x3fe00000
 800a4cc:	40240000 	.word	0x40240000
 800a4d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a4d2:	9f06      	ldr	r7, [sp, #24]
 800a4d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a4d6:	e742      	b.n	800a35e <_dtoa_r+0x75e>
 800a4d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4da:	e76b      	b.n	800a3b4 <_dtoa_r+0x7b4>
 800a4dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	dc19      	bgt.n	800a516 <_dtoa_r+0x916>
 800a4e2:	9b04      	ldr	r3, [sp, #16]
 800a4e4:	b9bb      	cbnz	r3, 800a516 <_dtoa_r+0x916>
 800a4e6:	9b05      	ldr	r3, [sp, #20]
 800a4e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4ec:	b99b      	cbnz	r3, 800a516 <_dtoa_r+0x916>
 800a4ee:	9b05      	ldr	r3, [sp, #20]
 800a4f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4f4:	0d1b      	lsrs	r3, r3, #20
 800a4f6:	051b      	lsls	r3, r3, #20
 800a4f8:	b183      	cbz	r3, 800a51c <_dtoa_r+0x91c>
 800a4fa:	f04f 0801 	mov.w	r8, #1
 800a4fe:	9b06      	ldr	r3, [sp, #24]
 800a500:	3301      	adds	r3, #1
 800a502:	9306      	str	r3, [sp, #24]
 800a504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a506:	3301      	adds	r3, #1
 800a508:	9309      	str	r3, [sp, #36]	; 0x24
 800a50a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f47f af6a 	bne.w	800a3e6 <_dtoa_r+0x7e6>
 800a512:	2001      	movs	r0, #1
 800a514:	e76f      	b.n	800a3f6 <_dtoa_r+0x7f6>
 800a516:	f04f 0800 	mov.w	r8, #0
 800a51a:	e7f6      	b.n	800a50a <_dtoa_r+0x90a>
 800a51c:	4698      	mov	r8, r3
 800a51e:	e7f4      	b.n	800a50a <_dtoa_r+0x90a>
 800a520:	f43f af7d 	beq.w	800a41e <_dtoa_r+0x81e>
 800a524:	4618      	mov	r0, r3
 800a526:	301c      	adds	r0, #28
 800a528:	e772      	b.n	800a410 <_dtoa_r+0x810>
 800a52a:	9b08      	ldr	r3, [sp, #32]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	dc36      	bgt.n	800a59e <_dtoa_r+0x99e>
 800a530:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a532:	2b02      	cmp	r3, #2
 800a534:	dd33      	ble.n	800a59e <_dtoa_r+0x99e>
 800a536:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a53a:	f1b9 0f00 	cmp.w	r9, #0
 800a53e:	d10d      	bne.n	800a55c <_dtoa_r+0x95c>
 800a540:	4621      	mov	r1, r4
 800a542:	464b      	mov	r3, r9
 800a544:	2205      	movs	r2, #5
 800a546:	4628      	mov	r0, r5
 800a548:	f000 fe76 	bl	800b238 <__multadd>
 800a54c:	4601      	mov	r1, r0
 800a54e:	4604      	mov	r4, r0
 800a550:	4658      	mov	r0, fp
 800a552:	f001 f8d7 	bl	800b704 <__mcmp>
 800a556:	2800      	cmp	r0, #0
 800a558:	f73f adb8 	bgt.w	800a0cc <_dtoa_r+0x4cc>
 800a55c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a55e:	9f03      	ldr	r7, [sp, #12]
 800a560:	ea6f 0a03 	mvn.w	sl, r3
 800a564:	f04f 0800 	mov.w	r8, #0
 800a568:	4621      	mov	r1, r4
 800a56a:	4628      	mov	r0, r5
 800a56c:	f000 fe42 	bl	800b1f4 <_Bfree>
 800a570:	2e00      	cmp	r6, #0
 800a572:	f43f aea7 	beq.w	800a2c4 <_dtoa_r+0x6c4>
 800a576:	f1b8 0f00 	cmp.w	r8, #0
 800a57a:	d005      	beq.n	800a588 <_dtoa_r+0x988>
 800a57c:	45b0      	cmp	r8, r6
 800a57e:	d003      	beq.n	800a588 <_dtoa_r+0x988>
 800a580:	4641      	mov	r1, r8
 800a582:	4628      	mov	r0, r5
 800a584:	f000 fe36 	bl	800b1f4 <_Bfree>
 800a588:	4631      	mov	r1, r6
 800a58a:	4628      	mov	r0, r5
 800a58c:	f000 fe32 	bl	800b1f4 <_Bfree>
 800a590:	e698      	b.n	800a2c4 <_dtoa_r+0x6c4>
 800a592:	2400      	movs	r4, #0
 800a594:	4626      	mov	r6, r4
 800a596:	e7e1      	b.n	800a55c <_dtoa_r+0x95c>
 800a598:	46c2      	mov	sl, r8
 800a59a:	4626      	mov	r6, r4
 800a59c:	e596      	b.n	800a0cc <_dtoa_r+0x4cc>
 800a59e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 80fd 	beq.w	800a7a4 <_dtoa_r+0xba4>
 800a5aa:	2f00      	cmp	r7, #0
 800a5ac:	dd05      	ble.n	800a5ba <_dtoa_r+0x9ba>
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	463a      	mov	r2, r7
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f001 f836 	bl	800b624 <__lshift>
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	f1b8 0f00 	cmp.w	r8, #0
 800a5be:	d05c      	beq.n	800a67a <_dtoa_r+0xa7a>
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	6871      	ldr	r1, [r6, #4]
 800a5c4:	f000 fdd6 	bl	800b174 <_Balloc>
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	b928      	cbnz	r0, 800a5d8 <_dtoa_r+0x9d8>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a5d2:	4b7f      	ldr	r3, [pc, #508]	; (800a7d0 <_dtoa_r+0xbd0>)
 800a5d4:	f7ff bb28 	b.w	8009c28 <_dtoa_r+0x28>
 800a5d8:	6932      	ldr	r2, [r6, #16]
 800a5da:	f106 010c 	add.w	r1, r6, #12
 800a5de:	3202      	adds	r2, #2
 800a5e0:	0092      	lsls	r2, r2, #2
 800a5e2:	300c      	adds	r0, #12
 800a5e4:	f7fd fa3e 	bl	8007a64 <memcpy>
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	f001 f819 	bl	800b624 <__lshift>
 800a5f2:	46b0      	mov	r8, r6
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	9b03      	ldr	r3, [sp, #12]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	9308      	str	r3, [sp, #32]
 800a5fc:	9b03      	ldr	r3, [sp, #12]
 800a5fe:	444b      	add	r3, r9
 800a600:	930a      	str	r3, [sp, #40]	; 0x28
 800a602:	9b04      	ldr	r3, [sp, #16]
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	9309      	str	r3, [sp, #36]	; 0x24
 800a60a:	9b08      	ldr	r3, [sp, #32]
 800a60c:	4621      	mov	r1, r4
 800a60e:	3b01      	subs	r3, #1
 800a610:	4658      	mov	r0, fp
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	f7ff fa66 	bl	8009ae4 <quorem>
 800a618:	4603      	mov	r3, r0
 800a61a:	4641      	mov	r1, r8
 800a61c:	3330      	adds	r3, #48	; 0x30
 800a61e:	9006      	str	r0, [sp, #24]
 800a620:	4658      	mov	r0, fp
 800a622:	930b      	str	r3, [sp, #44]	; 0x2c
 800a624:	f001 f86e 	bl	800b704 <__mcmp>
 800a628:	4632      	mov	r2, r6
 800a62a:	4681      	mov	r9, r0
 800a62c:	4621      	mov	r1, r4
 800a62e:	4628      	mov	r0, r5
 800a630:	f001 f884 	bl	800b73c <__mdiff>
 800a634:	68c2      	ldr	r2, [r0, #12]
 800a636:	4607      	mov	r7, r0
 800a638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a63a:	bb02      	cbnz	r2, 800a67e <_dtoa_r+0xa7e>
 800a63c:	4601      	mov	r1, r0
 800a63e:	4658      	mov	r0, fp
 800a640:	f001 f860 	bl	800b704 <__mcmp>
 800a644:	4602      	mov	r2, r0
 800a646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a648:	4639      	mov	r1, r7
 800a64a:	4628      	mov	r0, r5
 800a64c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a650:	f000 fdd0 	bl	800b1f4 <_Bfree>
 800a654:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a658:	9f08      	ldr	r7, [sp, #32]
 800a65a:	ea43 0102 	orr.w	r1, r3, r2
 800a65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a660:	430b      	orrs	r3, r1
 800a662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a664:	d10d      	bne.n	800a682 <_dtoa_r+0xa82>
 800a666:	2b39      	cmp	r3, #57	; 0x39
 800a668:	d029      	beq.n	800a6be <_dtoa_r+0xabe>
 800a66a:	f1b9 0f00 	cmp.w	r9, #0
 800a66e:	dd01      	ble.n	800a674 <_dtoa_r+0xa74>
 800a670:	9b06      	ldr	r3, [sp, #24]
 800a672:	3331      	adds	r3, #49	; 0x31
 800a674:	9a04      	ldr	r2, [sp, #16]
 800a676:	7013      	strb	r3, [r2, #0]
 800a678:	e776      	b.n	800a568 <_dtoa_r+0x968>
 800a67a:	4630      	mov	r0, r6
 800a67c:	e7b9      	b.n	800a5f2 <_dtoa_r+0x9f2>
 800a67e:	2201      	movs	r2, #1
 800a680:	e7e2      	b.n	800a648 <_dtoa_r+0xa48>
 800a682:	f1b9 0f00 	cmp.w	r9, #0
 800a686:	db06      	blt.n	800a696 <_dtoa_r+0xa96>
 800a688:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a68a:	ea41 0909 	orr.w	r9, r1, r9
 800a68e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a690:	ea59 0101 	orrs.w	r1, r9, r1
 800a694:	d120      	bne.n	800a6d8 <_dtoa_r+0xad8>
 800a696:	2a00      	cmp	r2, #0
 800a698:	ddec      	ble.n	800a674 <_dtoa_r+0xa74>
 800a69a:	4659      	mov	r1, fp
 800a69c:	2201      	movs	r2, #1
 800a69e:	4628      	mov	r0, r5
 800a6a0:	9308      	str	r3, [sp, #32]
 800a6a2:	f000 ffbf 	bl	800b624 <__lshift>
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4683      	mov	fp, r0
 800a6aa:	f001 f82b 	bl	800b704 <__mcmp>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	9b08      	ldr	r3, [sp, #32]
 800a6b2:	dc02      	bgt.n	800a6ba <_dtoa_r+0xaba>
 800a6b4:	d1de      	bne.n	800a674 <_dtoa_r+0xa74>
 800a6b6:	07da      	lsls	r2, r3, #31
 800a6b8:	d5dc      	bpl.n	800a674 <_dtoa_r+0xa74>
 800a6ba:	2b39      	cmp	r3, #57	; 0x39
 800a6bc:	d1d8      	bne.n	800a670 <_dtoa_r+0xa70>
 800a6be:	2339      	movs	r3, #57	; 0x39
 800a6c0:	9a04      	ldr	r2, [sp, #16]
 800a6c2:	7013      	strb	r3, [r2, #0]
 800a6c4:	463b      	mov	r3, r7
 800a6c6:	461f      	mov	r7, r3
 800a6c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	2a39      	cmp	r2, #57	; 0x39
 800a6d0:	d050      	beq.n	800a774 <_dtoa_r+0xb74>
 800a6d2:	3201      	adds	r2, #1
 800a6d4:	701a      	strb	r2, [r3, #0]
 800a6d6:	e747      	b.n	800a568 <_dtoa_r+0x968>
 800a6d8:	2a00      	cmp	r2, #0
 800a6da:	dd03      	ble.n	800a6e4 <_dtoa_r+0xae4>
 800a6dc:	2b39      	cmp	r3, #57	; 0x39
 800a6de:	d0ee      	beq.n	800a6be <_dtoa_r+0xabe>
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	e7c7      	b.n	800a674 <_dtoa_r+0xa74>
 800a6e4:	9a08      	ldr	r2, [sp, #32]
 800a6e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a6ec:	428a      	cmp	r2, r1
 800a6ee:	d02a      	beq.n	800a746 <_dtoa_r+0xb46>
 800a6f0:	4659      	mov	r1, fp
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	220a      	movs	r2, #10
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	f000 fd9e 	bl	800b238 <__multadd>
 800a6fc:	45b0      	cmp	r8, r6
 800a6fe:	4683      	mov	fp, r0
 800a700:	f04f 0300 	mov.w	r3, #0
 800a704:	f04f 020a 	mov.w	r2, #10
 800a708:	4641      	mov	r1, r8
 800a70a:	4628      	mov	r0, r5
 800a70c:	d107      	bne.n	800a71e <_dtoa_r+0xb1e>
 800a70e:	f000 fd93 	bl	800b238 <__multadd>
 800a712:	4680      	mov	r8, r0
 800a714:	4606      	mov	r6, r0
 800a716:	9b08      	ldr	r3, [sp, #32]
 800a718:	3301      	adds	r3, #1
 800a71a:	9308      	str	r3, [sp, #32]
 800a71c:	e775      	b.n	800a60a <_dtoa_r+0xa0a>
 800a71e:	f000 fd8b 	bl	800b238 <__multadd>
 800a722:	4631      	mov	r1, r6
 800a724:	4680      	mov	r8, r0
 800a726:	2300      	movs	r3, #0
 800a728:	220a      	movs	r2, #10
 800a72a:	4628      	mov	r0, r5
 800a72c:	f000 fd84 	bl	800b238 <__multadd>
 800a730:	4606      	mov	r6, r0
 800a732:	e7f0      	b.n	800a716 <_dtoa_r+0xb16>
 800a734:	f1b9 0f00 	cmp.w	r9, #0
 800a738:	bfcc      	ite	gt
 800a73a:	464f      	movgt	r7, r9
 800a73c:	2701      	movle	r7, #1
 800a73e:	f04f 0800 	mov.w	r8, #0
 800a742:	9a03      	ldr	r2, [sp, #12]
 800a744:	4417      	add	r7, r2
 800a746:	4659      	mov	r1, fp
 800a748:	2201      	movs	r2, #1
 800a74a:	4628      	mov	r0, r5
 800a74c:	9308      	str	r3, [sp, #32]
 800a74e:	f000 ff69 	bl	800b624 <__lshift>
 800a752:	4621      	mov	r1, r4
 800a754:	4683      	mov	fp, r0
 800a756:	f000 ffd5 	bl	800b704 <__mcmp>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	dcb2      	bgt.n	800a6c4 <_dtoa_r+0xac4>
 800a75e:	d102      	bne.n	800a766 <_dtoa_r+0xb66>
 800a760:	9b08      	ldr	r3, [sp, #32]
 800a762:	07db      	lsls	r3, r3, #31
 800a764:	d4ae      	bmi.n	800a6c4 <_dtoa_r+0xac4>
 800a766:	463b      	mov	r3, r7
 800a768:	461f      	mov	r7, r3
 800a76a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a76e:	2a30      	cmp	r2, #48	; 0x30
 800a770:	d0fa      	beq.n	800a768 <_dtoa_r+0xb68>
 800a772:	e6f9      	b.n	800a568 <_dtoa_r+0x968>
 800a774:	9a03      	ldr	r2, [sp, #12]
 800a776:	429a      	cmp	r2, r3
 800a778:	d1a5      	bne.n	800a6c6 <_dtoa_r+0xac6>
 800a77a:	2331      	movs	r3, #49	; 0x31
 800a77c:	f10a 0a01 	add.w	sl, sl, #1
 800a780:	e779      	b.n	800a676 <_dtoa_r+0xa76>
 800a782:	4b14      	ldr	r3, [pc, #80]	; (800a7d4 <_dtoa_r+0xbd4>)
 800a784:	f7ff baa8 	b.w	8009cd8 <_dtoa_r+0xd8>
 800a788:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f47f aa81 	bne.w	8009c92 <_dtoa_r+0x92>
 800a790:	4b11      	ldr	r3, [pc, #68]	; (800a7d8 <_dtoa_r+0xbd8>)
 800a792:	f7ff baa1 	b.w	8009cd8 <_dtoa_r+0xd8>
 800a796:	f1b9 0f00 	cmp.w	r9, #0
 800a79a:	dc03      	bgt.n	800a7a4 <_dtoa_r+0xba4>
 800a79c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	f73f aecb 	bgt.w	800a53a <_dtoa_r+0x93a>
 800a7a4:	9f03      	ldr	r7, [sp, #12]
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	4658      	mov	r0, fp
 800a7aa:	f7ff f99b 	bl	8009ae4 <quorem>
 800a7ae:	9a03      	ldr	r2, [sp, #12]
 800a7b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a7b4:	f807 3b01 	strb.w	r3, [r7], #1
 800a7b8:	1aba      	subs	r2, r7, r2
 800a7ba:	4591      	cmp	r9, r2
 800a7bc:	ddba      	ble.n	800a734 <_dtoa_r+0xb34>
 800a7be:	4659      	mov	r1, fp
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	220a      	movs	r2, #10
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	f000 fd37 	bl	800b238 <__multadd>
 800a7ca:	4683      	mov	fp, r0
 800a7cc:	e7eb      	b.n	800a7a6 <_dtoa_r+0xba6>
 800a7ce:	bf00      	nop
 800a7d0:	080116c8 	.word	0x080116c8
 800a7d4:	080114c8 	.word	0x080114c8
 800a7d8:	08011649 	.word	0x08011649

0800a7dc <__sflush_r>:
 800a7dc:	898a      	ldrh	r2, [r1, #12]
 800a7de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	0710      	lsls	r0, r2, #28
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	d457      	bmi.n	800a898 <__sflush_r+0xbc>
 800a7e8:	684b      	ldr	r3, [r1, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	dc04      	bgt.n	800a7f8 <__sflush_r+0x1c>
 800a7ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	dc01      	bgt.n	800a7f8 <__sflush_r+0x1c>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7fa:	2e00      	cmp	r6, #0
 800a7fc:	d0fa      	beq.n	800a7f4 <__sflush_r+0x18>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a804:	682f      	ldr	r7, [r5, #0]
 800a806:	602b      	str	r3, [r5, #0]
 800a808:	d032      	beq.n	800a870 <__sflush_r+0x94>
 800a80a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	075a      	lsls	r2, r3, #29
 800a810:	d505      	bpl.n	800a81e <__sflush_r+0x42>
 800a812:	6863      	ldr	r3, [r4, #4]
 800a814:	1ac0      	subs	r0, r0, r3
 800a816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a818:	b10b      	cbz	r3, 800a81e <__sflush_r+0x42>
 800a81a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a81c:	1ac0      	subs	r0, r0, r3
 800a81e:	2300      	movs	r3, #0
 800a820:	4602      	mov	r2, r0
 800a822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a824:	4628      	mov	r0, r5
 800a826:	6a21      	ldr	r1, [r4, #32]
 800a828:	47b0      	blx	r6
 800a82a:	1c43      	adds	r3, r0, #1
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	d106      	bne.n	800a83e <__sflush_r+0x62>
 800a830:	6829      	ldr	r1, [r5, #0]
 800a832:	291d      	cmp	r1, #29
 800a834:	d82c      	bhi.n	800a890 <__sflush_r+0xb4>
 800a836:	4a29      	ldr	r2, [pc, #164]	; (800a8dc <__sflush_r+0x100>)
 800a838:	40ca      	lsrs	r2, r1
 800a83a:	07d6      	lsls	r6, r2, #31
 800a83c:	d528      	bpl.n	800a890 <__sflush_r+0xb4>
 800a83e:	2200      	movs	r2, #0
 800a840:	6062      	str	r2, [r4, #4]
 800a842:	6922      	ldr	r2, [r4, #16]
 800a844:	04d9      	lsls	r1, r3, #19
 800a846:	6022      	str	r2, [r4, #0]
 800a848:	d504      	bpl.n	800a854 <__sflush_r+0x78>
 800a84a:	1c42      	adds	r2, r0, #1
 800a84c:	d101      	bne.n	800a852 <__sflush_r+0x76>
 800a84e:	682b      	ldr	r3, [r5, #0]
 800a850:	b903      	cbnz	r3, 800a854 <__sflush_r+0x78>
 800a852:	6560      	str	r0, [r4, #84]	; 0x54
 800a854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a856:	602f      	str	r7, [r5, #0]
 800a858:	2900      	cmp	r1, #0
 800a85a:	d0cb      	beq.n	800a7f4 <__sflush_r+0x18>
 800a85c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a860:	4299      	cmp	r1, r3
 800a862:	d002      	beq.n	800a86a <__sflush_r+0x8e>
 800a864:	4628      	mov	r0, r5
 800a866:	f7fd f913 	bl	8007a90 <_free_r>
 800a86a:	2000      	movs	r0, #0
 800a86c:	6360      	str	r0, [r4, #52]	; 0x34
 800a86e:	e7c2      	b.n	800a7f6 <__sflush_r+0x1a>
 800a870:	6a21      	ldr	r1, [r4, #32]
 800a872:	2301      	movs	r3, #1
 800a874:	4628      	mov	r0, r5
 800a876:	47b0      	blx	r6
 800a878:	1c41      	adds	r1, r0, #1
 800a87a:	d1c7      	bne.n	800a80c <__sflush_r+0x30>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0c4      	beq.n	800a80c <__sflush_r+0x30>
 800a882:	2b1d      	cmp	r3, #29
 800a884:	d001      	beq.n	800a88a <__sflush_r+0xae>
 800a886:	2b16      	cmp	r3, #22
 800a888:	d101      	bne.n	800a88e <__sflush_r+0xb2>
 800a88a:	602f      	str	r7, [r5, #0]
 800a88c:	e7b2      	b.n	800a7f4 <__sflush_r+0x18>
 800a88e:	89a3      	ldrh	r3, [r4, #12]
 800a890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	e7ae      	b.n	800a7f6 <__sflush_r+0x1a>
 800a898:	690f      	ldr	r7, [r1, #16]
 800a89a:	2f00      	cmp	r7, #0
 800a89c:	d0aa      	beq.n	800a7f4 <__sflush_r+0x18>
 800a89e:	0793      	lsls	r3, r2, #30
 800a8a0:	bf18      	it	ne
 800a8a2:	2300      	movne	r3, #0
 800a8a4:	680e      	ldr	r6, [r1, #0]
 800a8a6:	bf08      	it	eq
 800a8a8:	694b      	ldreq	r3, [r1, #20]
 800a8aa:	1bf6      	subs	r6, r6, r7
 800a8ac:	600f      	str	r7, [r1, #0]
 800a8ae:	608b      	str	r3, [r1, #8]
 800a8b0:	2e00      	cmp	r6, #0
 800a8b2:	dd9f      	ble.n	800a7f4 <__sflush_r+0x18>
 800a8b4:	4633      	mov	r3, r6
 800a8b6:	463a      	mov	r2, r7
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	6a21      	ldr	r1, [r4, #32]
 800a8bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a8c0:	47e0      	blx	ip
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	dc06      	bgt.n	800a8d4 <__sflush_r+0xf8>
 800a8c6:	89a3      	ldrh	r3, [r4, #12]
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8d0:	81a3      	strh	r3, [r4, #12]
 800a8d2:	e790      	b.n	800a7f6 <__sflush_r+0x1a>
 800a8d4:	4407      	add	r7, r0
 800a8d6:	1a36      	subs	r6, r6, r0
 800a8d8:	e7ea      	b.n	800a8b0 <__sflush_r+0xd4>
 800a8da:	bf00      	nop
 800a8dc:	20400001 	.word	0x20400001

0800a8e0 <_fflush_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	690b      	ldr	r3, [r1, #16]
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	b913      	cbnz	r3, 800a8f0 <_fflush_r+0x10>
 800a8ea:	2500      	movs	r5, #0
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	b118      	cbz	r0, 800a8fa <_fflush_r+0x1a>
 800a8f2:	6983      	ldr	r3, [r0, #24]
 800a8f4:	b90b      	cbnz	r3, 800a8fa <_fflush_r+0x1a>
 800a8f6:	f7fc ffdf 	bl	80078b8 <__sinit>
 800a8fa:	4b14      	ldr	r3, [pc, #80]	; (800a94c <_fflush_r+0x6c>)
 800a8fc:	429c      	cmp	r4, r3
 800a8fe:	d11b      	bne.n	800a938 <_fflush_r+0x58>
 800a900:	686c      	ldr	r4, [r5, #4]
 800a902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d0ef      	beq.n	800a8ea <_fflush_r+0xa>
 800a90a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a90c:	07d0      	lsls	r0, r2, #31
 800a90e:	d404      	bmi.n	800a91a <_fflush_r+0x3a>
 800a910:	0599      	lsls	r1, r3, #22
 800a912:	d402      	bmi.n	800a91a <_fflush_r+0x3a>
 800a914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a916:	f7fd f892 	bl	8007a3e <__retarget_lock_acquire_recursive>
 800a91a:	4628      	mov	r0, r5
 800a91c:	4621      	mov	r1, r4
 800a91e:	f7ff ff5d 	bl	800a7dc <__sflush_r>
 800a922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a924:	4605      	mov	r5, r0
 800a926:	07da      	lsls	r2, r3, #31
 800a928:	d4e0      	bmi.n	800a8ec <_fflush_r+0xc>
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	059b      	lsls	r3, r3, #22
 800a92e:	d4dd      	bmi.n	800a8ec <_fflush_r+0xc>
 800a930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a932:	f7fd f885 	bl	8007a40 <__retarget_lock_release_recursive>
 800a936:	e7d9      	b.n	800a8ec <_fflush_r+0xc>
 800a938:	4b05      	ldr	r3, [pc, #20]	; (800a950 <_fflush_r+0x70>)
 800a93a:	429c      	cmp	r4, r3
 800a93c:	d101      	bne.n	800a942 <_fflush_r+0x62>
 800a93e:	68ac      	ldr	r4, [r5, #8]
 800a940:	e7df      	b.n	800a902 <_fflush_r+0x22>
 800a942:	4b04      	ldr	r3, [pc, #16]	; (800a954 <_fflush_r+0x74>)
 800a944:	429c      	cmp	r4, r3
 800a946:	bf08      	it	eq
 800a948:	68ec      	ldreq	r4, [r5, #12]
 800a94a:	e7da      	b.n	800a902 <_fflush_r+0x22>
 800a94c:	08011474 	.word	0x08011474
 800a950:	08011494 	.word	0x08011494
 800a954:	08011454 	.word	0x08011454

0800a958 <rshift>:
 800a958:	6903      	ldr	r3, [r0, #16]
 800a95a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a95e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a962:	f100 0414 	add.w	r4, r0, #20
 800a966:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a96a:	dd46      	ble.n	800a9fa <rshift+0xa2>
 800a96c:	f011 011f 	ands.w	r1, r1, #31
 800a970:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a974:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a978:	d10c      	bne.n	800a994 <rshift+0x3c>
 800a97a:	4629      	mov	r1, r5
 800a97c:	f100 0710 	add.w	r7, r0, #16
 800a980:	42b1      	cmp	r1, r6
 800a982:	d335      	bcc.n	800a9f0 <rshift+0x98>
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	1eea      	subs	r2, r5, #3
 800a98a:	4296      	cmp	r6, r2
 800a98c:	bf38      	it	cc
 800a98e:	2300      	movcc	r3, #0
 800a990:	4423      	add	r3, r4
 800a992:	e015      	b.n	800a9c0 <rshift+0x68>
 800a994:	46a1      	mov	r9, r4
 800a996:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a99a:	f1c1 0820 	rsb	r8, r1, #32
 800a99e:	40cf      	lsrs	r7, r1
 800a9a0:	f105 0e04 	add.w	lr, r5, #4
 800a9a4:	4576      	cmp	r6, lr
 800a9a6:	46f4      	mov	ip, lr
 800a9a8:	d816      	bhi.n	800a9d8 <rshift+0x80>
 800a9aa:	1a9a      	subs	r2, r3, r2
 800a9ac:	0092      	lsls	r2, r2, #2
 800a9ae:	3a04      	subs	r2, #4
 800a9b0:	3501      	adds	r5, #1
 800a9b2:	42ae      	cmp	r6, r5
 800a9b4:	bf38      	it	cc
 800a9b6:	2200      	movcc	r2, #0
 800a9b8:	18a3      	adds	r3, r4, r2
 800a9ba:	50a7      	str	r7, [r4, r2]
 800a9bc:	b107      	cbz	r7, 800a9c0 <rshift+0x68>
 800a9be:	3304      	adds	r3, #4
 800a9c0:	42a3      	cmp	r3, r4
 800a9c2:	eba3 0204 	sub.w	r2, r3, r4
 800a9c6:	bf08      	it	eq
 800a9c8:	2300      	moveq	r3, #0
 800a9ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a9ce:	6102      	str	r2, [r0, #16]
 800a9d0:	bf08      	it	eq
 800a9d2:	6143      	streq	r3, [r0, #20]
 800a9d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9d8:	f8dc c000 	ldr.w	ip, [ip]
 800a9dc:	fa0c fc08 	lsl.w	ip, ip, r8
 800a9e0:	ea4c 0707 	orr.w	r7, ip, r7
 800a9e4:	f849 7b04 	str.w	r7, [r9], #4
 800a9e8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9ec:	40cf      	lsrs	r7, r1
 800a9ee:	e7d9      	b.n	800a9a4 <rshift+0x4c>
 800a9f0:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9f4:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9f8:	e7c2      	b.n	800a980 <rshift+0x28>
 800a9fa:	4623      	mov	r3, r4
 800a9fc:	e7e0      	b.n	800a9c0 <rshift+0x68>

0800a9fe <__hexdig_fun>:
 800a9fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa02:	2b09      	cmp	r3, #9
 800aa04:	d802      	bhi.n	800aa0c <__hexdig_fun+0xe>
 800aa06:	3820      	subs	r0, #32
 800aa08:	b2c0      	uxtb	r0, r0
 800aa0a:	4770      	bx	lr
 800aa0c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aa10:	2b05      	cmp	r3, #5
 800aa12:	d801      	bhi.n	800aa18 <__hexdig_fun+0x1a>
 800aa14:	3847      	subs	r0, #71	; 0x47
 800aa16:	e7f7      	b.n	800aa08 <__hexdig_fun+0xa>
 800aa18:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa1c:	2b05      	cmp	r3, #5
 800aa1e:	d801      	bhi.n	800aa24 <__hexdig_fun+0x26>
 800aa20:	3827      	subs	r0, #39	; 0x27
 800aa22:	e7f1      	b.n	800aa08 <__hexdig_fun+0xa>
 800aa24:	2000      	movs	r0, #0
 800aa26:	4770      	bx	lr

0800aa28 <__gethex>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	b08b      	sub	sp, #44	; 0x2c
 800aa2e:	9305      	str	r3, [sp, #20]
 800aa30:	4bb2      	ldr	r3, [pc, #712]	; (800acfc <__gethex+0x2d4>)
 800aa32:	9002      	str	r0, [sp, #8]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	468b      	mov	fp, r1
 800aa38:	4618      	mov	r0, r3
 800aa3a:	4690      	mov	r8, r2
 800aa3c:	9303      	str	r3, [sp, #12]
 800aa3e:	f7f5 fb87 	bl	8000150 <strlen>
 800aa42:	4682      	mov	sl, r0
 800aa44:	9b03      	ldr	r3, [sp, #12]
 800aa46:	f8db 2000 	ldr.w	r2, [fp]
 800aa4a:	4403      	add	r3, r0
 800aa4c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800aa50:	9306      	str	r3, [sp, #24]
 800aa52:	1c93      	adds	r3, r2, #2
 800aa54:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aa58:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aa5c:	32fe      	adds	r2, #254	; 0xfe
 800aa5e:	18d1      	adds	r1, r2, r3
 800aa60:	461f      	mov	r7, r3
 800aa62:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa66:	9101      	str	r1, [sp, #4]
 800aa68:	2830      	cmp	r0, #48	; 0x30
 800aa6a:	d0f8      	beq.n	800aa5e <__gethex+0x36>
 800aa6c:	f7ff ffc7 	bl	800a9fe <__hexdig_fun>
 800aa70:	4604      	mov	r4, r0
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d13a      	bne.n	800aaec <__gethex+0xc4>
 800aa76:	4652      	mov	r2, sl
 800aa78:	4638      	mov	r0, r7
 800aa7a:	9903      	ldr	r1, [sp, #12]
 800aa7c:	f001 fb12 	bl	800c0a4 <strncmp>
 800aa80:	4605      	mov	r5, r0
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d166      	bne.n	800ab54 <__gethex+0x12c>
 800aa86:	f817 000a 	ldrb.w	r0, [r7, sl]
 800aa8a:	eb07 060a 	add.w	r6, r7, sl
 800aa8e:	f7ff ffb6 	bl	800a9fe <__hexdig_fun>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d060      	beq.n	800ab58 <__gethex+0x130>
 800aa96:	4633      	mov	r3, r6
 800aa98:	7818      	ldrb	r0, [r3, #0]
 800aa9a:	461f      	mov	r7, r3
 800aa9c:	2830      	cmp	r0, #48	; 0x30
 800aa9e:	f103 0301 	add.w	r3, r3, #1
 800aaa2:	d0f9      	beq.n	800aa98 <__gethex+0x70>
 800aaa4:	f7ff ffab 	bl	800a9fe <__hexdig_fun>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	fab0 f480 	clz	r4, r0
 800aaae:	4635      	mov	r5, r6
 800aab0:	0964      	lsrs	r4, r4, #5
 800aab2:	9301      	str	r3, [sp, #4]
 800aab4:	463a      	mov	r2, r7
 800aab6:	4616      	mov	r6, r2
 800aab8:	7830      	ldrb	r0, [r6, #0]
 800aaba:	3201      	adds	r2, #1
 800aabc:	f7ff ff9f 	bl	800a9fe <__hexdig_fun>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d1f8      	bne.n	800aab6 <__gethex+0x8e>
 800aac4:	4652      	mov	r2, sl
 800aac6:	4630      	mov	r0, r6
 800aac8:	9903      	ldr	r1, [sp, #12]
 800aaca:	f001 faeb 	bl	800c0a4 <strncmp>
 800aace:	b980      	cbnz	r0, 800aaf2 <__gethex+0xca>
 800aad0:	b94d      	cbnz	r5, 800aae6 <__gethex+0xbe>
 800aad2:	eb06 050a 	add.w	r5, r6, sl
 800aad6:	462a      	mov	r2, r5
 800aad8:	4616      	mov	r6, r2
 800aada:	7830      	ldrb	r0, [r6, #0]
 800aadc:	3201      	adds	r2, #1
 800aade:	f7ff ff8e 	bl	800a9fe <__hexdig_fun>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d1f8      	bne.n	800aad8 <__gethex+0xb0>
 800aae6:	1bad      	subs	r5, r5, r6
 800aae8:	00ad      	lsls	r5, r5, #2
 800aaea:	e004      	b.n	800aaf6 <__gethex+0xce>
 800aaec:	2400      	movs	r4, #0
 800aaee:	4625      	mov	r5, r4
 800aaf0:	e7e0      	b.n	800aab4 <__gethex+0x8c>
 800aaf2:	2d00      	cmp	r5, #0
 800aaf4:	d1f7      	bne.n	800aae6 <__gethex+0xbe>
 800aaf6:	7833      	ldrb	r3, [r6, #0]
 800aaf8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aafc:	2b50      	cmp	r3, #80	; 0x50
 800aafe:	d139      	bne.n	800ab74 <__gethex+0x14c>
 800ab00:	7873      	ldrb	r3, [r6, #1]
 800ab02:	2b2b      	cmp	r3, #43	; 0x2b
 800ab04:	d02a      	beq.n	800ab5c <__gethex+0x134>
 800ab06:	2b2d      	cmp	r3, #45	; 0x2d
 800ab08:	d02c      	beq.n	800ab64 <__gethex+0x13c>
 800ab0a:	f04f 0900 	mov.w	r9, #0
 800ab0e:	1c71      	adds	r1, r6, #1
 800ab10:	7808      	ldrb	r0, [r1, #0]
 800ab12:	f7ff ff74 	bl	800a9fe <__hexdig_fun>
 800ab16:	1e43      	subs	r3, r0, #1
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b18      	cmp	r3, #24
 800ab1c:	d82a      	bhi.n	800ab74 <__gethex+0x14c>
 800ab1e:	f1a0 0210 	sub.w	r2, r0, #16
 800ab22:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab26:	f7ff ff6a 	bl	800a9fe <__hexdig_fun>
 800ab2a:	1e43      	subs	r3, r0, #1
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b18      	cmp	r3, #24
 800ab30:	d91b      	bls.n	800ab6a <__gethex+0x142>
 800ab32:	f1b9 0f00 	cmp.w	r9, #0
 800ab36:	d000      	beq.n	800ab3a <__gethex+0x112>
 800ab38:	4252      	negs	r2, r2
 800ab3a:	4415      	add	r5, r2
 800ab3c:	f8cb 1000 	str.w	r1, [fp]
 800ab40:	b1d4      	cbz	r4, 800ab78 <__gethex+0x150>
 800ab42:	9b01      	ldr	r3, [sp, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bf14      	ite	ne
 800ab48:	2700      	movne	r7, #0
 800ab4a:	2706      	moveq	r7, #6
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	b00b      	add	sp, #44	; 0x2c
 800ab50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab54:	463e      	mov	r6, r7
 800ab56:	4625      	mov	r5, r4
 800ab58:	2401      	movs	r4, #1
 800ab5a:	e7cc      	b.n	800aaf6 <__gethex+0xce>
 800ab5c:	f04f 0900 	mov.w	r9, #0
 800ab60:	1cb1      	adds	r1, r6, #2
 800ab62:	e7d5      	b.n	800ab10 <__gethex+0xe8>
 800ab64:	f04f 0901 	mov.w	r9, #1
 800ab68:	e7fa      	b.n	800ab60 <__gethex+0x138>
 800ab6a:	230a      	movs	r3, #10
 800ab6c:	fb03 0202 	mla	r2, r3, r2, r0
 800ab70:	3a10      	subs	r2, #16
 800ab72:	e7d6      	b.n	800ab22 <__gethex+0xfa>
 800ab74:	4631      	mov	r1, r6
 800ab76:	e7e1      	b.n	800ab3c <__gethex+0x114>
 800ab78:	4621      	mov	r1, r4
 800ab7a:	1bf3      	subs	r3, r6, r7
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	2b07      	cmp	r3, #7
 800ab80:	dc0a      	bgt.n	800ab98 <__gethex+0x170>
 800ab82:	9802      	ldr	r0, [sp, #8]
 800ab84:	f000 faf6 	bl	800b174 <_Balloc>
 800ab88:	4604      	mov	r4, r0
 800ab8a:	b940      	cbnz	r0, 800ab9e <__gethex+0x176>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	21de      	movs	r1, #222	; 0xde
 800ab90:	4b5b      	ldr	r3, [pc, #364]	; (800ad00 <__gethex+0x2d8>)
 800ab92:	485c      	ldr	r0, [pc, #368]	; (800ad04 <__gethex+0x2dc>)
 800ab94:	f001 faa8 	bl	800c0e8 <__assert_func>
 800ab98:	3101      	adds	r1, #1
 800ab9a:	105b      	asrs	r3, r3, #1
 800ab9c:	e7ef      	b.n	800ab7e <__gethex+0x156>
 800ab9e:	f04f 0b00 	mov.w	fp, #0
 800aba2:	f100 0914 	add.w	r9, r0, #20
 800aba6:	f1ca 0301 	rsb	r3, sl, #1
 800abaa:	f8cd 9010 	str.w	r9, [sp, #16]
 800abae:	f8cd b004 	str.w	fp, [sp, #4]
 800abb2:	9308      	str	r3, [sp, #32]
 800abb4:	42b7      	cmp	r7, r6
 800abb6:	d33f      	bcc.n	800ac38 <__gethex+0x210>
 800abb8:	9f04      	ldr	r7, [sp, #16]
 800abba:	9b01      	ldr	r3, [sp, #4]
 800abbc:	f847 3b04 	str.w	r3, [r7], #4
 800abc0:	eba7 0709 	sub.w	r7, r7, r9
 800abc4:	10bf      	asrs	r7, r7, #2
 800abc6:	6127      	str	r7, [r4, #16]
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 fbc5 	bl	800b358 <__hi0bits>
 800abce:	017f      	lsls	r7, r7, #5
 800abd0:	f8d8 6000 	ldr.w	r6, [r8]
 800abd4:	1a3f      	subs	r7, r7, r0
 800abd6:	42b7      	cmp	r7, r6
 800abd8:	dd62      	ble.n	800aca0 <__gethex+0x278>
 800abda:	1bbf      	subs	r7, r7, r6
 800abdc:	4639      	mov	r1, r7
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 ff5f 	bl	800baa2 <__any_on>
 800abe4:	4682      	mov	sl, r0
 800abe6:	b1a8      	cbz	r0, 800ac14 <__gethex+0x1ec>
 800abe8:	f04f 0a01 	mov.w	sl, #1
 800abec:	1e7b      	subs	r3, r7, #1
 800abee:	1159      	asrs	r1, r3, #5
 800abf0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800abf4:	f003 021f 	and.w	r2, r3, #31
 800abf8:	fa0a f202 	lsl.w	r2, sl, r2
 800abfc:	420a      	tst	r2, r1
 800abfe:	d009      	beq.n	800ac14 <__gethex+0x1ec>
 800ac00:	4553      	cmp	r3, sl
 800ac02:	dd05      	ble.n	800ac10 <__gethex+0x1e8>
 800ac04:	4620      	mov	r0, r4
 800ac06:	1eb9      	subs	r1, r7, #2
 800ac08:	f000 ff4b 	bl	800baa2 <__any_on>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d144      	bne.n	800ac9a <__gethex+0x272>
 800ac10:	f04f 0a02 	mov.w	sl, #2
 800ac14:	4639      	mov	r1, r7
 800ac16:	4620      	mov	r0, r4
 800ac18:	f7ff fe9e 	bl	800a958 <rshift>
 800ac1c:	443d      	add	r5, r7
 800ac1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac22:	42ab      	cmp	r3, r5
 800ac24:	da4a      	bge.n	800acbc <__gethex+0x294>
 800ac26:	4621      	mov	r1, r4
 800ac28:	9802      	ldr	r0, [sp, #8]
 800ac2a:	f000 fae3 	bl	800b1f4 <_Bfree>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac32:	27a3      	movs	r7, #163	; 0xa3
 800ac34:	6013      	str	r3, [r2, #0]
 800ac36:	e789      	b.n	800ab4c <__gethex+0x124>
 800ac38:	1e73      	subs	r3, r6, #1
 800ac3a:	9a06      	ldr	r2, [sp, #24]
 800ac3c:	9307      	str	r3, [sp, #28]
 800ac3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d019      	beq.n	800ac7a <__gethex+0x252>
 800ac46:	f1bb 0f20 	cmp.w	fp, #32
 800ac4a:	d107      	bne.n	800ac5c <__gethex+0x234>
 800ac4c:	9b04      	ldr	r3, [sp, #16]
 800ac4e:	9a01      	ldr	r2, [sp, #4]
 800ac50:	f843 2b04 	str.w	r2, [r3], #4
 800ac54:	9304      	str	r3, [sp, #16]
 800ac56:	2300      	movs	r3, #0
 800ac58:	469b      	mov	fp, r3
 800ac5a:	9301      	str	r3, [sp, #4]
 800ac5c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ac60:	f7ff fecd 	bl	800a9fe <__hexdig_fun>
 800ac64:	9b01      	ldr	r3, [sp, #4]
 800ac66:	f000 000f 	and.w	r0, r0, #15
 800ac6a:	fa00 f00b 	lsl.w	r0, r0, fp
 800ac6e:	4303      	orrs	r3, r0
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	f10b 0b04 	add.w	fp, fp, #4
 800ac76:	9b07      	ldr	r3, [sp, #28]
 800ac78:	e00d      	b.n	800ac96 <__gethex+0x26e>
 800ac7a:	9a08      	ldr	r2, [sp, #32]
 800ac7c:	1e73      	subs	r3, r6, #1
 800ac7e:	4413      	add	r3, r2
 800ac80:	42bb      	cmp	r3, r7
 800ac82:	d3e0      	bcc.n	800ac46 <__gethex+0x21e>
 800ac84:	4618      	mov	r0, r3
 800ac86:	4652      	mov	r2, sl
 800ac88:	9903      	ldr	r1, [sp, #12]
 800ac8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac8c:	f001 fa0a 	bl	800c0a4 <strncmp>
 800ac90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d1d7      	bne.n	800ac46 <__gethex+0x21e>
 800ac96:	461e      	mov	r6, r3
 800ac98:	e78c      	b.n	800abb4 <__gethex+0x18c>
 800ac9a:	f04f 0a03 	mov.w	sl, #3
 800ac9e:	e7b9      	b.n	800ac14 <__gethex+0x1ec>
 800aca0:	da09      	bge.n	800acb6 <__gethex+0x28e>
 800aca2:	1bf7      	subs	r7, r6, r7
 800aca4:	4621      	mov	r1, r4
 800aca6:	463a      	mov	r2, r7
 800aca8:	9802      	ldr	r0, [sp, #8]
 800acaa:	f000 fcbb 	bl	800b624 <__lshift>
 800acae:	4604      	mov	r4, r0
 800acb0:	1bed      	subs	r5, r5, r7
 800acb2:	f100 0914 	add.w	r9, r0, #20
 800acb6:	f04f 0a00 	mov.w	sl, #0
 800acba:	e7b0      	b.n	800ac1e <__gethex+0x1f6>
 800acbc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800acc0:	42a8      	cmp	r0, r5
 800acc2:	dd72      	ble.n	800adaa <__gethex+0x382>
 800acc4:	1b45      	subs	r5, r0, r5
 800acc6:	42ae      	cmp	r6, r5
 800acc8:	dc35      	bgt.n	800ad36 <__gethex+0x30e>
 800acca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d029      	beq.n	800ad26 <__gethex+0x2fe>
 800acd2:	2b03      	cmp	r3, #3
 800acd4:	d02b      	beq.n	800ad2e <__gethex+0x306>
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d11c      	bne.n	800ad14 <__gethex+0x2ec>
 800acda:	42ae      	cmp	r6, r5
 800acdc:	d11a      	bne.n	800ad14 <__gethex+0x2ec>
 800acde:	2e01      	cmp	r6, #1
 800ace0:	d112      	bne.n	800ad08 <__gethex+0x2e0>
 800ace2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ace6:	9a05      	ldr	r2, [sp, #20]
 800ace8:	2762      	movs	r7, #98	; 0x62
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	2301      	movs	r3, #1
 800acee:	6123      	str	r3, [r4, #16]
 800acf0:	f8c9 3000 	str.w	r3, [r9]
 800acf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acf6:	601c      	str	r4, [r3, #0]
 800acf8:	e728      	b.n	800ab4c <__gethex+0x124>
 800acfa:	bf00      	nop
 800acfc:	08011740 	.word	0x08011740
 800ad00:	080116c8 	.word	0x080116c8
 800ad04:	080116d9 	.word	0x080116d9
 800ad08:	4620      	mov	r0, r4
 800ad0a:	1e71      	subs	r1, r6, #1
 800ad0c:	f000 fec9 	bl	800baa2 <__any_on>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d1e6      	bne.n	800ace2 <__gethex+0x2ba>
 800ad14:	4621      	mov	r1, r4
 800ad16:	9802      	ldr	r0, [sp, #8]
 800ad18:	f000 fa6c 	bl	800b1f4 <_Bfree>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad20:	2750      	movs	r7, #80	; 0x50
 800ad22:	6013      	str	r3, [r2, #0]
 800ad24:	e712      	b.n	800ab4c <__gethex+0x124>
 800ad26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1f3      	bne.n	800ad14 <__gethex+0x2ec>
 800ad2c:	e7d9      	b.n	800ace2 <__gethex+0x2ba>
 800ad2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1d6      	bne.n	800ace2 <__gethex+0x2ba>
 800ad34:	e7ee      	b.n	800ad14 <__gethex+0x2ec>
 800ad36:	1e6f      	subs	r7, r5, #1
 800ad38:	f1ba 0f00 	cmp.w	sl, #0
 800ad3c:	d132      	bne.n	800ada4 <__gethex+0x37c>
 800ad3e:	b127      	cbz	r7, 800ad4a <__gethex+0x322>
 800ad40:	4639      	mov	r1, r7
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 fead 	bl	800baa2 <__any_on>
 800ad48:	4682      	mov	sl, r0
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	117b      	asrs	r3, r7, #5
 800ad4e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ad52:	f007 071f 	and.w	r7, r7, #31
 800ad56:	fa01 f707 	lsl.w	r7, r1, r7
 800ad5a:	421f      	tst	r7, r3
 800ad5c:	f04f 0702 	mov.w	r7, #2
 800ad60:	4629      	mov	r1, r5
 800ad62:	4620      	mov	r0, r4
 800ad64:	bf18      	it	ne
 800ad66:	f04a 0a02 	orrne.w	sl, sl, #2
 800ad6a:	1b76      	subs	r6, r6, r5
 800ad6c:	f7ff fdf4 	bl	800a958 <rshift>
 800ad70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ad74:	f1ba 0f00 	cmp.w	sl, #0
 800ad78:	d048      	beq.n	800ae0c <__gethex+0x3e4>
 800ad7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d015      	beq.n	800adae <__gethex+0x386>
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d017      	beq.n	800adb6 <__gethex+0x38e>
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d109      	bne.n	800ad9e <__gethex+0x376>
 800ad8a:	f01a 0f02 	tst.w	sl, #2
 800ad8e:	d006      	beq.n	800ad9e <__gethex+0x376>
 800ad90:	f8d9 0000 	ldr.w	r0, [r9]
 800ad94:	ea4a 0a00 	orr.w	sl, sl, r0
 800ad98:	f01a 0f01 	tst.w	sl, #1
 800ad9c:	d10e      	bne.n	800adbc <__gethex+0x394>
 800ad9e:	f047 0710 	orr.w	r7, r7, #16
 800ada2:	e033      	b.n	800ae0c <__gethex+0x3e4>
 800ada4:	f04f 0a01 	mov.w	sl, #1
 800ada8:	e7cf      	b.n	800ad4a <__gethex+0x322>
 800adaa:	2701      	movs	r7, #1
 800adac:	e7e2      	b.n	800ad74 <__gethex+0x34c>
 800adae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adb0:	f1c3 0301 	rsb	r3, r3, #1
 800adb4:	9315      	str	r3, [sp, #84]	; 0x54
 800adb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d0f0      	beq.n	800ad9e <__gethex+0x376>
 800adbc:	f04f 0c00 	mov.w	ip, #0
 800adc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800adc4:	f104 0314 	add.w	r3, r4, #20
 800adc8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800adcc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800add0:	4618      	mov	r0, r3
 800add2:	f853 2b04 	ldr.w	r2, [r3], #4
 800add6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800adda:	d01c      	beq.n	800ae16 <__gethex+0x3ee>
 800addc:	3201      	adds	r2, #1
 800adde:	6002      	str	r2, [r0, #0]
 800ade0:	2f02      	cmp	r7, #2
 800ade2:	f104 0314 	add.w	r3, r4, #20
 800ade6:	d13d      	bne.n	800ae64 <__gethex+0x43c>
 800ade8:	f8d8 2000 	ldr.w	r2, [r8]
 800adec:	3a01      	subs	r2, #1
 800adee:	42b2      	cmp	r2, r6
 800adf0:	d10a      	bne.n	800ae08 <__gethex+0x3e0>
 800adf2:	2201      	movs	r2, #1
 800adf4:	1171      	asrs	r1, r6, #5
 800adf6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adfa:	f006 061f 	and.w	r6, r6, #31
 800adfe:	fa02 f606 	lsl.w	r6, r2, r6
 800ae02:	421e      	tst	r6, r3
 800ae04:	bf18      	it	ne
 800ae06:	4617      	movne	r7, r2
 800ae08:	f047 0720 	orr.w	r7, r7, #32
 800ae0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae0e:	601c      	str	r4, [r3, #0]
 800ae10:	9b05      	ldr	r3, [sp, #20]
 800ae12:	601d      	str	r5, [r3, #0]
 800ae14:	e69a      	b.n	800ab4c <__gethex+0x124>
 800ae16:	4299      	cmp	r1, r3
 800ae18:	f843 cc04 	str.w	ip, [r3, #-4]
 800ae1c:	d8d8      	bhi.n	800add0 <__gethex+0x3a8>
 800ae1e:	68a3      	ldr	r3, [r4, #8]
 800ae20:	459b      	cmp	fp, r3
 800ae22:	db17      	blt.n	800ae54 <__gethex+0x42c>
 800ae24:	6861      	ldr	r1, [r4, #4]
 800ae26:	9802      	ldr	r0, [sp, #8]
 800ae28:	3101      	adds	r1, #1
 800ae2a:	f000 f9a3 	bl	800b174 <_Balloc>
 800ae2e:	4681      	mov	r9, r0
 800ae30:	b918      	cbnz	r0, 800ae3a <__gethex+0x412>
 800ae32:	4602      	mov	r2, r0
 800ae34:	2184      	movs	r1, #132	; 0x84
 800ae36:	4b19      	ldr	r3, [pc, #100]	; (800ae9c <__gethex+0x474>)
 800ae38:	e6ab      	b.n	800ab92 <__gethex+0x16a>
 800ae3a:	6922      	ldr	r2, [r4, #16]
 800ae3c:	f104 010c 	add.w	r1, r4, #12
 800ae40:	3202      	adds	r2, #2
 800ae42:	0092      	lsls	r2, r2, #2
 800ae44:	300c      	adds	r0, #12
 800ae46:	f7fc fe0d 	bl	8007a64 <memcpy>
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	9802      	ldr	r0, [sp, #8]
 800ae4e:	f000 f9d1 	bl	800b1f4 <_Bfree>
 800ae52:	464c      	mov	r4, r9
 800ae54:	6923      	ldr	r3, [r4, #16]
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	6122      	str	r2, [r4, #16]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae60:	615a      	str	r2, [r3, #20]
 800ae62:	e7bd      	b.n	800ade0 <__gethex+0x3b8>
 800ae64:	6922      	ldr	r2, [r4, #16]
 800ae66:	455a      	cmp	r2, fp
 800ae68:	dd0b      	ble.n	800ae82 <__gethex+0x45a>
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f7ff fd73 	bl	800a958 <rshift>
 800ae72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae76:	3501      	adds	r5, #1
 800ae78:	42ab      	cmp	r3, r5
 800ae7a:	f6ff aed4 	blt.w	800ac26 <__gethex+0x1fe>
 800ae7e:	2701      	movs	r7, #1
 800ae80:	e7c2      	b.n	800ae08 <__gethex+0x3e0>
 800ae82:	f016 061f 	ands.w	r6, r6, #31
 800ae86:	d0fa      	beq.n	800ae7e <__gethex+0x456>
 800ae88:	4453      	add	r3, sl
 800ae8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae8e:	f000 fa63 	bl	800b358 <__hi0bits>
 800ae92:	f1c6 0620 	rsb	r6, r6, #32
 800ae96:	42b0      	cmp	r0, r6
 800ae98:	dbe7      	blt.n	800ae6a <__gethex+0x442>
 800ae9a:	e7f0      	b.n	800ae7e <__gethex+0x456>
 800ae9c:	080116c8 	.word	0x080116c8

0800aea0 <L_shift>:
 800aea0:	f1c2 0208 	rsb	r2, r2, #8
 800aea4:	0092      	lsls	r2, r2, #2
 800aea6:	b570      	push	{r4, r5, r6, lr}
 800aea8:	f1c2 0620 	rsb	r6, r2, #32
 800aeac:	6843      	ldr	r3, [r0, #4]
 800aeae:	6804      	ldr	r4, [r0, #0]
 800aeb0:	fa03 f506 	lsl.w	r5, r3, r6
 800aeb4:	432c      	orrs	r4, r5
 800aeb6:	40d3      	lsrs	r3, r2
 800aeb8:	6004      	str	r4, [r0, #0]
 800aeba:	f840 3f04 	str.w	r3, [r0, #4]!
 800aebe:	4288      	cmp	r0, r1
 800aec0:	d3f4      	bcc.n	800aeac <L_shift+0xc>
 800aec2:	bd70      	pop	{r4, r5, r6, pc}

0800aec4 <__match>:
 800aec4:	b530      	push	{r4, r5, lr}
 800aec6:	6803      	ldr	r3, [r0, #0]
 800aec8:	3301      	adds	r3, #1
 800aeca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aece:	b914      	cbnz	r4, 800aed6 <__match+0x12>
 800aed0:	6003      	str	r3, [r0, #0]
 800aed2:	2001      	movs	r0, #1
 800aed4:	bd30      	pop	{r4, r5, pc}
 800aed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeda:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aede:	2d19      	cmp	r5, #25
 800aee0:	bf98      	it	ls
 800aee2:	3220      	addls	r2, #32
 800aee4:	42a2      	cmp	r2, r4
 800aee6:	d0f0      	beq.n	800aeca <__match+0x6>
 800aee8:	2000      	movs	r0, #0
 800aeea:	e7f3      	b.n	800aed4 <__match+0x10>

0800aeec <__hexnan>:
 800aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef0:	2500      	movs	r5, #0
 800aef2:	680b      	ldr	r3, [r1, #0]
 800aef4:	4682      	mov	sl, r0
 800aef6:	115e      	asrs	r6, r3, #5
 800aef8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aefc:	f013 031f 	ands.w	r3, r3, #31
 800af00:	bf18      	it	ne
 800af02:	3604      	addne	r6, #4
 800af04:	1f37      	subs	r7, r6, #4
 800af06:	46b9      	mov	r9, r7
 800af08:	463c      	mov	r4, r7
 800af0a:	46ab      	mov	fp, r5
 800af0c:	b087      	sub	sp, #28
 800af0e:	4690      	mov	r8, r2
 800af10:	6802      	ldr	r2, [r0, #0]
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	f846 5c04 	str.w	r5, [r6, #-4]
 800af18:	9502      	str	r5, [sp, #8]
 800af1a:	7851      	ldrb	r1, [r2, #1]
 800af1c:	1c53      	adds	r3, r2, #1
 800af1e:	9303      	str	r3, [sp, #12]
 800af20:	b341      	cbz	r1, 800af74 <__hexnan+0x88>
 800af22:	4608      	mov	r0, r1
 800af24:	9205      	str	r2, [sp, #20]
 800af26:	9104      	str	r1, [sp, #16]
 800af28:	f7ff fd69 	bl	800a9fe <__hexdig_fun>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d14f      	bne.n	800afd0 <__hexnan+0xe4>
 800af30:	9904      	ldr	r1, [sp, #16]
 800af32:	9a05      	ldr	r2, [sp, #20]
 800af34:	2920      	cmp	r1, #32
 800af36:	d818      	bhi.n	800af6a <__hexnan+0x7e>
 800af38:	9b02      	ldr	r3, [sp, #8]
 800af3a:	459b      	cmp	fp, r3
 800af3c:	dd13      	ble.n	800af66 <__hexnan+0x7a>
 800af3e:	454c      	cmp	r4, r9
 800af40:	d206      	bcs.n	800af50 <__hexnan+0x64>
 800af42:	2d07      	cmp	r5, #7
 800af44:	dc04      	bgt.n	800af50 <__hexnan+0x64>
 800af46:	462a      	mov	r2, r5
 800af48:	4649      	mov	r1, r9
 800af4a:	4620      	mov	r0, r4
 800af4c:	f7ff ffa8 	bl	800aea0 <L_shift>
 800af50:	4544      	cmp	r4, r8
 800af52:	d950      	bls.n	800aff6 <__hexnan+0x10a>
 800af54:	2300      	movs	r3, #0
 800af56:	f1a4 0904 	sub.w	r9, r4, #4
 800af5a:	f844 3c04 	str.w	r3, [r4, #-4]
 800af5e:	461d      	mov	r5, r3
 800af60:	464c      	mov	r4, r9
 800af62:	f8cd b008 	str.w	fp, [sp, #8]
 800af66:	9a03      	ldr	r2, [sp, #12]
 800af68:	e7d7      	b.n	800af1a <__hexnan+0x2e>
 800af6a:	2929      	cmp	r1, #41	; 0x29
 800af6c:	d156      	bne.n	800b01c <__hexnan+0x130>
 800af6e:	3202      	adds	r2, #2
 800af70:	f8ca 2000 	str.w	r2, [sl]
 800af74:	f1bb 0f00 	cmp.w	fp, #0
 800af78:	d050      	beq.n	800b01c <__hexnan+0x130>
 800af7a:	454c      	cmp	r4, r9
 800af7c:	d206      	bcs.n	800af8c <__hexnan+0xa0>
 800af7e:	2d07      	cmp	r5, #7
 800af80:	dc04      	bgt.n	800af8c <__hexnan+0xa0>
 800af82:	462a      	mov	r2, r5
 800af84:	4649      	mov	r1, r9
 800af86:	4620      	mov	r0, r4
 800af88:	f7ff ff8a 	bl	800aea0 <L_shift>
 800af8c:	4544      	cmp	r4, r8
 800af8e:	d934      	bls.n	800affa <__hexnan+0x10e>
 800af90:	4623      	mov	r3, r4
 800af92:	f1a8 0204 	sub.w	r2, r8, #4
 800af96:	f853 1b04 	ldr.w	r1, [r3], #4
 800af9a:	429f      	cmp	r7, r3
 800af9c:	f842 1f04 	str.w	r1, [r2, #4]!
 800afa0:	d2f9      	bcs.n	800af96 <__hexnan+0xaa>
 800afa2:	1b3b      	subs	r3, r7, r4
 800afa4:	f023 0303 	bic.w	r3, r3, #3
 800afa8:	3304      	adds	r3, #4
 800afaa:	3401      	adds	r4, #1
 800afac:	3e03      	subs	r6, #3
 800afae:	42b4      	cmp	r4, r6
 800afb0:	bf88      	it	hi
 800afb2:	2304      	movhi	r3, #4
 800afb4:	2200      	movs	r2, #0
 800afb6:	4443      	add	r3, r8
 800afb8:	f843 2b04 	str.w	r2, [r3], #4
 800afbc:	429f      	cmp	r7, r3
 800afbe:	d2fb      	bcs.n	800afb8 <__hexnan+0xcc>
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	b91b      	cbnz	r3, 800afcc <__hexnan+0xe0>
 800afc4:	4547      	cmp	r7, r8
 800afc6:	d127      	bne.n	800b018 <__hexnan+0x12c>
 800afc8:	2301      	movs	r3, #1
 800afca:	603b      	str	r3, [r7, #0]
 800afcc:	2005      	movs	r0, #5
 800afce:	e026      	b.n	800b01e <__hexnan+0x132>
 800afd0:	3501      	adds	r5, #1
 800afd2:	2d08      	cmp	r5, #8
 800afd4:	f10b 0b01 	add.w	fp, fp, #1
 800afd8:	dd06      	ble.n	800afe8 <__hexnan+0xfc>
 800afda:	4544      	cmp	r4, r8
 800afdc:	d9c3      	bls.n	800af66 <__hexnan+0x7a>
 800afde:	2300      	movs	r3, #0
 800afe0:	2501      	movs	r5, #1
 800afe2:	f844 3c04 	str.w	r3, [r4, #-4]
 800afe6:	3c04      	subs	r4, #4
 800afe8:	6822      	ldr	r2, [r4, #0]
 800afea:	f000 000f 	and.w	r0, r0, #15
 800afee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aff2:	6022      	str	r2, [r4, #0]
 800aff4:	e7b7      	b.n	800af66 <__hexnan+0x7a>
 800aff6:	2508      	movs	r5, #8
 800aff8:	e7b5      	b.n	800af66 <__hexnan+0x7a>
 800affa:	9b01      	ldr	r3, [sp, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d0df      	beq.n	800afc0 <__hexnan+0xd4>
 800b000:	f04f 32ff 	mov.w	r2, #4294967295
 800b004:	f1c3 0320 	rsb	r3, r3, #32
 800b008:	fa22 f303 	lsr.w	r3, r2, r3
 800b00c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b010:	401a      	ands	r2, r3
 800b012:	f846 2c04 	str.w	r2, [r6, #-4]
 800b016:	e7d3      	b.n	800afc0 <__hexnan+0xd4>
 800b018:	3f04      	subs	r7, #4
 800b01a:	e7d1      	b.n	800afc0 <__hexnan+0xd4>
 800b01c:	2004      	movs	r0, #4
 800b01e:	b007      	add	sp, #28
 800b020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b024 <_localeconv_r>:
 800b024:	4800      	ldr	r0, [pc, #0]	; (800b028 <_localeconv_r+0x4>)
 800b026:	4770      	bx	lr
 800b028:	20000184 	.word	0x20000184

0800b02c <_lseek_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	4604      	mov	r4, r0
 800b030:	4608      	mov	r0, r1
 800b032:	4611      	mov	r1, r2
 800b034:	2200      	movs	r2, #0
 800b036:	4d05      	ldr	r5, [pc, #20]	; (800b04c <_lseek_r+0x20>)
 800b038:	602a      	str	r2, [r5, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	f7f6 f9f1 	bl	8001422 <_lseek>
 800b040:	1c43      	adds	r3, r0, #1
 800b042:	d102      	bne.n	800b04a <_lseek_r+0x1e>
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	b103      	cbz	r3, 800b04a <_lseek_r+0x1e>
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	20001d3c 	.word	0x20001d3c

0800b050 <__swhatbuf_r>:
 800b050:	b570      	push	{r4, r5, r6, lr}
 800b052:	460e      	mov	r6, r1
 800b054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b058:	4614      	mov	r4, r2
 800b05a:	2900      	cmp	r1, #0
 800b05c:	461d      	mov	r5, r3
 800b05e:	b096      	sub	sp, #88	; 0x58
 800b060:	da08      	bge.n	800b074 <__swhatbuf_r+0x24>
 800b062:	2200      	movs	r2, #0
 800b064:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b068:	602a      	str	r2, [r5, #0]
 800b06a:	061a      	lsls	r2, r3, #24
 800b06c:	d410      	bmi.n	800b090 <__swhatbuf_r+0x40>
 800b06e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b072:	e00e      	b.n	800b092 <__swhatbuf_r+0x42>
 800b074:	466a      	mov	r2, sp
 800b076:	f001 f867 	bl	800c148 <_fstat_r>
 800b07a:	2800      	cmp	r0, #0
 800b07c:	dbf1      	blt.n	800b062 <__swhatbuf_r+0x12>
 800b07e:	9a01      	ldr	r2, [sp, #4]
 800b080:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b084:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b088:	425a      	negs	r2, r3
 800b08a:	415a      	adcs	r2, r3
 800b08c:	602a      	str	r2, [r5, #0]
 800b08e:	e7ee      	b.n	800b06e <__swhatbuf_r+0x1e>
 800b090:	2340      	movs	r3, #64	; 0x40
 800b092:	2000      	movs	r0, #0
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	b016      	add	sp, #88	; 0x58
 800b098:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b09c <__smakebuf_r>:
 800b09c:	898b      	ldrh	r3, [r1, #12]
 800b09e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0a0:	079d      	lsls	r5, r3, #30
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	460c      	mov	r4, r1
 800b0a6:	d507      	bpl.n	800b0b8 <__smakebuf_r+0x1c>
 800b0a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	6123      	str	r3, [r4, #16]
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	6163      	str	r3, [r4, #20]
 800b0b4:	b002      	add	sp, #8
 800b0b6:	bd70      	pop	{r4, r5, r6, pc}
 800b0b8:	466a      	mov	r2, sp
 800b0ba:	ab01      	add	r3, sp, #4
 800b0bc:	f7ff ffc8 	bl	800b050 <__swhatbuf_r>
 800b0c0:	9900      	ldr	r1, [sp, #0]
 800b0c2:	4605      	mov	r5, r0
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f7fc fd4b 	bl	8007b60 <_malloc_r>
 800b0ca:	b948      	cbnz	r0, 800b0e0 <__smakebuf_r+0x44>
 800b0cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0d0:	059a      	lsls	r2, r3, #22
 800b0d2:	d4ef      	bmi.n	800b0b4 <__smakebuf_r+0x18>
 800b0d4:	f023 0303 	bic.w	r3, r3, #3
 800b0d8:	f043 0302 	orr.w	r3, r3, #2
 800b0dc:	81a3      	strh	r3, [r4, #12]
 800b0de:	e7e3      	b.n	800b0a8 <__smakebuf_r+0xc>
 800b0e0:	4b0d      	ldr	r3, [pc, #52]	; (800b118 <__smakebuf_r+0x7c>)
 800b0e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	6020      	str	r0, [r4, #0]
 800b0e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0ec:	81a3      	strh	r3, [r4, #12]
 800b0ee:	9b00      	ldr	r3, [sp, #0]
 800b0f0:	6120      	str	r0, [r4, #16]
 800b0f2:	6163      	str	r3, [r4, #20]
 800b0f4:	9b01      	ldr	r3, [sp, #4]
 800b0f6:	b15b      	cbz	r3, 800b110 <__smakebuf_r+0x74>
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0fe:	f001 f835 	bl	800c16c <_isatty_r>
 800b102:	b128      	cbz	r0, 800b110 <__smakebuf_r+0x74>
 800b104:	89a3      	ldrh	r3, [r4, #12]
 800b106:	f023 0303 	bic.w	r3, r3, #3
 800b10a:	f043 0301 	orr.w	r3, r3, #1
 800b10e:	81a3      	strh	r3, [r4, #12]
 800b110:	89a0      	ldrh	r0, [r4, #12]
 800b112:	4305      	orrs	r5, r0
 800b114:	81a5      	strh	r5, [r4, #12]
 800b116:	e7cd      	b.n	800b0b4 <__smakebuf_r+0x18>
 800b118:	08007851 	.word	0x08007851

0800b11c <__ascii_mbtowc>:
 800b11c:	b082      	sub	sp, #8
 800b11e:	b901      	cbnz	r1, 800b122 <__ascii_mbtowc+0x6>
 800b120:	a901      	add	r1, sp, #4
 800b122:	b142      	cbz	r2, 800b136 <__ascii_mbtowc+0x1a>
 800b124:	b14b      	cbz	r3, 800b13a <__ascii_mbtowc+0x1e>
 800b126:	7813      	ldrb	r3, [r2, #0]
 800b128:	600b      	str	r3, [r1, #0]
 800b12a:	7812      	ldrb	r2, [r2, #0]
 800b12c:	1e10      	subs	r0, r2, #0
 800b12e:	bf18      	it	ne
 800b130:	2001      	movne	r0, #1
 800b132:	b002      	add	sp, #8
 800b134:	4770      	bx	lr
 800b136:	4610      	mov	r0, r2
 800b138:	e7fb      	b.n	800b132 <__ascii_mbtowc+0x16>
 800b13a:	f06f 0001 	mvn.w	r0, #1
 800b13e:	e7f8      	b.n	800b132 <__ascii_mbtowc+0x16>

0800b140 <memchr>:
 800b140:	4603      	mov	r3, r0
 800b142:	b510      	push	{r4, lr}
 800b144:	b2c9      	uxtb	r1, r1
 800b146:	4402      	add	r2, r0
 800b148:	4293      	cmp	r3, r2
 800b14a:	4618      	mov	r0, r3
 800b14c:	d101      	bne.n	800b152 <memchr+0x12>
 800b14e:	2000      	movs	r0, #0
 800b150:	e003      	b.n	800b15a <memchr+0x1a>
 800b152:	7804      	ldrb	r4, [r0, #0]
 800b154:	3301      	adds	r3, #1
 800b156:	428c      	cmp	r4, r1
 800b158:	d1f6      	bne.n	800b148 <memchr+0x8>
 800b15a:	bd10      	pop	{r4, pc}

0800b15c <__malloc_lock>:
 800b15c:	4801      	ldr	r0, [pc, #4]	; (800b164 <__malloc_lock+0x8>)
 800b15e:	f7fc bc6e 	b.w	8007a3e <__retarget_lock_acquire_recursive>
 800b162:	bf00      	nop
 800b164:	20001d30 	.word	0x20001d30

0800b168 <__malloc_unlock>:
 800b168:	4801      	ldr	r0, [pc, #4]	; (800b170 <__malloc_unlock+0x8>)
 800b16a:	f7fc bc69 	b.w	8007a40 <__retarget_lock_release_recursive>
 800b16e:	bf00      	nop
 800b170:	20001d30 	.word	0x20001d30

0800b174 <_Balloc>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b178:	4604      	mov	r4, r0
 800b17a:	460d      	mov	r5, r1
 800b17c:	b976      	cbnz	r6, 800b19c <_Balloc+0x28>
 800b17e:	2010      	movs	r0, #16
 800b180:	f7fc fc60 	bl	8007a44 <malloc>
 800b184:	4602      	mov	r2, r0
 800b186:	6260      	str	r0, [r4, #36]	; 0x24
 800b188:	b920      	cbnz	r0, 800b194 <_Balloc+0x20>
 800b18a:	2166      	movs	r1, #102	; 0x66
 800b18c:	4b17      	ldr	r3, [pc, #92]	; (800b1ec <_Balloc+0x78>)
 800b18e:	4818      	ldr	r0, [pc, #96]	; (800b1f0 <_Balloc+0x7c>)
 800b190:	f000 ffaa 	bl	800c0e8 <__assert_func>
 800b194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b198:	6006      	str	r6, [r0, #0]
 800b19a:	60c6      	str	r6, [r0, #12]
 800b19c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b19e:	68f3      	ldr	r3, [r6, #12]
 800b1a0:	b183      	cbz	r3, 800b1c4 <_Balloc+0x50>
 800b1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1aa:	b9b8      	cbnz	r0, 800b1dc <_Balloc+0x68>
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	fa01 f605 	lsl.w	r6, r1, r5
 800b1b2:	1d72      	adds	r2, r6, #5
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	0092      	lsls	r2, r2, #2
 800b1b8:	f000 fc94 	bl	800bae4 <_calloc_r>
 800b1bc:	b160      	cbz	r0, 800b1d8 <_Balloc+0x64>
 800b1be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1c2:	e00e      	b.n	800b1e2 <_Balloc+0x6e>
 800b1c4:	2221      	movs	r2, #33	; 0x21
 800b1c6:	2104      	movs	r1, #4
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f000 fc8b 	bl	800bae4 <_calloc_r>
 800b1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1d0:	60f0      	str	r0, [r6, #12]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1e4      	bne.n	800b1a2 <_Balloc+0x2e>
 800b1d8:	2000      	movs	r0, #0
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	6802      	ldr	r2, [r0, #0]
 800b1de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1e8:	e7f7      	b.n	800b1da <_Balloc+0x66>
 800b1ea:	bf00      	nop
 800b1ec:	08011656 	.word	0x08011656
 800b1f0:	08011754 	.word	0x08011754

0800b1f4 <_Bfree>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	b976      	cbnz	r6, 800b21c <_Bfree+0x28>
 800b1fe:	2010      	movs	r0, #16
 800b200:	f7fc fc20 	bl	8007a44 <malloc>
 800b204:	4602      	mov	r2, r0
 800b206:	6268      	str	r0, [r5, #36]	; 0x24
 800b208:	b920      	cbnz	r0, 800b214 <_Bfree+0x20>
 800b20a:	218a      	movs	r1, #138	; 0x8a
 800b20c:	4b08      	ldr	r3, [pc, #32]	; (800b230 <_Bfree+0x3c>)
 800b20e:	4809      	ldr	r0, [pc, #36]	; (800b234 <_Bfree+0x40>)
 800b210:	f000 ff6a 	bl	800c0e8 <__assert_func>
 800b214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b218:	6006      	str	r6, [r0, #0]
 800b21a:	60c6      	str	r6, [r0, #12]
 800b21c:	b13c      	cbz	r4, 800b22e <_Bfree+0x3a>
 800b21e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b220:	6862      	ldr	r2, [r4, #4]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b228:	6021      	str	r1, [r4, #0]
 800b22a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	08011656 	.word	0x08011656
 800b234:	08011754 	.word	0x08011754

0800b238 <__multadd>:
 800b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23c:	4607      	mov	r7, r0
 800b23e:	460c      	mov	r4, r1
 800b240:	461e      	mov	r6, r3
 800b242:	2000      	movs	r0, #0
 800b244:	690d      	ldr	r5, [r1, #16]
 800b246:	f101 0c14 	add.w	ip, r1, #20
 800b24a:	f8dc 3000 	ldr.w	r3, [ip]
 800b24e:	3001      	adds	r0, #1
 800b250:	b299      	uxth	r1, r3
 800b252:	fb02 6101 	mla	r1, r2, r1, r6
 800b256:	0c1e      	lsrs	r6, r3, #16
 800b258:	0c0b      	lsrs	r3, r1, #16
 800b25a:	fb02 3306 	mla	r3, r2, r6, r3
 800b25e:	b289      	uxth	r1, r1
 800b260:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b264:	4285      	cmp	r5, r0
 800b266:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b26a:	f84c 1b04 	str.w	r1, [ip], #4
 800b26e:	dcec      	bgt.n	800b24a <__multadd+0x12>
 800b270:	b30e      	cbz	r6, 800b2b6 <__multadd+0x7e>
 800b272:	68a3      	ldr	r3, [r4, #8]
 800b274:	42ab      	cmp	r3, r5
 800b276:	dc19      	bgt.n	800b2ac <__multadd+0x74>
 800b278:	6861      	ldr	r1, [r4, #4]
 800b27a:	4638      	mov	r0, r7
 800b27c:	3101      	adds	r1, #1
 800b27e:	f7ff ff79 	bl	800b174 <_Balloc>
 800b282:	4680      	mov	r8, r0
 800b284:	b928      	cbnz	r0, 800b292 <__multadd+0x5a>
 800b286:	4602      	mov	r2, r0
 800b288:	21b5      	movs	r1, #181	; 0xb5
 800b28a:	4b0c      	ldr	r3, [pc, #48]	; (800b2bc <__multadd+0x84>)
 800b28c:	480c      	ldr	r0, [pc, #48]	; (800b2c0 <__multadd+0x88>)
 800b28e:	f000 ff2b 	bl	800c0e8 <__assert_func>
 800b292:	6922      	ldr	r2, [r4, #16]
 800b294:	f104 010c 	add.w	r1, r4, #12
 800b298:	3202      	adds	r2, #2
 800b29a:	0092      	lsls	r2, r2, #2
 800b29c:	300c      	adds	r0, #12
 800b29e:	f7fc fbe1 	bl	8007a64 <memcpy>
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f7ff ffa5 	bl	800b1f4 <_Bfree>
 800b2aa:	4644      	mov	r4, r8
 800b2ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2b0:	3501      	adds	r5, #1
 800b2b2:	615e      	str	r6, [r3, #20]
 800b2b4:	6125      	str	r5, [r4, #16]
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2bc:	080116c8 	.word	0x080116c8
 800b2c0:	08011754 	.word	0x08011754

0800b2c4 <__s2b>:
 800b2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c8:	4615      	mov	r5, r2
 800b2ca:	2209      	movs	r2, #9
 800b2cc:	461f      	mov	r7, r3
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	460c      	mov	r4, r1
 800b2d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	2201      	movs	r2, #1
 800b2da:	2100      	movs	r1, #0
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	db09      	blt.n	800b2f4 <__s2b+0x30>
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f7ff ff47 	bl	800b174 <_Balloc>
 800b2e6:	b940      	cbnz	r0, 800b2fa <__s2b+0x36>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	21ce      	movs	r1, #206	; 0xce
 800b2ec:	4b18      	ldr	r3, [pc, #96]	; (800b350 <__s2b+0x8c>)
 800b2ee:	4819      	ldr	r0, [pc, #100]	; (800b354 <__s2b+0x90>)
 800b2f0:	f000 fefa 	bl	800c0e8 <__assert_func>
 800b2f4:	0052      	lsls	r2, r2, #1
 800b2f6:	3101      	adds	r1, #1
 800b2f8:	e7f0      	b.n	800b2dc <__s2b+0x18>
 800b2fa:	9b08      	ldr	r3, [sp, #32]
 800b2fc:	2d09      	cmp	r5, #9
 800b2fe:	6143      	str	r3, [r0, #20]
 800b300:	f04f 0301 	mov.w	r3, #1
 800b304:	6103      	str	r3, [r0, #16]
 800b306:	dd16      	ble.n	800b336 <__s2b+0x72>
 800b308:	f104 0909 	add.w	r9, r4, #9
 800b30c:	46c8      	mov	r8, r9
 800b30e:	442c      	add	r4, r5
 800b310:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b314:	4601      	mov	r1, r0
 800b316:	220a      	movs	r2, #10
 800b318:	4630      	mov	r0, r6
 800b31a:	3b30      	subs	r3, #48	; 0x30
 800b31c:	f7ff ff8c 	bl	800b238 <__multadd>
 800b320:	45a0      	cmp	r8, r4
 800b322:	d1f5      	bne.n	800b310 <__s2b+0x4c>
 800b324:	f1a5 0408 	sub.w	r4, r5, #8
 800b328:	444c      	add	r4, r9
 800b32a:	1b2d      	subs	r5, r5, r4
 800b32c:	1963      	adds	r3, r4, r5
 800b32e:	42bb      	cmp	r3, r7
 800b330:	db04      	blt.n	800b33c <__s2b+0x78>
 800b332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b336:	2509      	movs	r5, #9
 800b338:	340a      	adds	r4, #10
 800b33a:	e7f6      	b.n	800b32a <__s2b+0x66>
 800b33c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b340:	4601      	mov	r1, r0
 800b342:	220a      	movs	r2, #10
 800b344:	4630      	mov	r0, r6
 800b346:	3b30      	subs	r3, #48	; 0x30
 800b348:	f7ff ff76 	bl	800b238 <__multadd>
 800b34c:	e7ee      	b.n	800b32c <__s2b+0x68>
 800b34e:	bf00      	nop
 800b350:	080116c8 	.word	0x080116c8
 800b354:	08011754 	.word	0x08011754

0800b358 <__hi0bits>:
 800b358:	0c02      	lsrs	r2, r0, #16
 800b35a:	0412      	lsls	r2, r2, #16
 800b35c:	4603      	mov	r3, r0
 800b35e:	b9ca      	cbnz	r2, 800b394 <__hi0bits+0x3c>
 800b360:	0403      	lsls	r3, r0, #16
 800b362:	2010      	movs	r0, #16
 800b364:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b368:	bf04      	itt	eq
 800b36a:	021b      	lsleq	r3, r3, #8
 800b36c:	3008      	addeq	r0, #8
 800b36e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b372:	bf04      	itt	eq
 800b374:	011b      	lsleq	r3, r3, #4
 800b376:	3004      	addeq	r0, #4
 800b378:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b37c:	bf04      	itt	eq
 800b37e:	009b      	lsleq	r3, r3, #2
 800b380:	3002      	addeq	r0, #2
 800b382:	2b00      	cmp	r3, #0
 800b384:	db05      	blt.n	800b392 <__hi0bits+0x3a>
 800b386:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b38a:	f100 0001 	add.w	r0, r0, #1
 800b38e:	bf08      	it	eq
 800b390:	2020      	moveq	r0, #32
 800b392:	4770      	bx	lr
 800b394:	2000      	movs	r0, #0
 800b396:	e7e5      	b.n	800b364 <__hi0bits+0xc>

0800b398 <__lo0bits>:
 800b398:	6803      	ldr	r3, [r0, #0]
 800b39a:	4602      	mov	r2, r0
 800b39c:	f013 0007 	ands.w	r0, r3, #7
 800b3a0:	d00b      	beq.n	800b3ba <__lo0bits+0x22>
 800b3a2:	07d9      	lsls	r1, r3, #31
 800b3a4:	d421      	bmi.n	800b3ea <__lo0bits+0x52>
 800b3a6:	0798      	lsls	r0, r3, #30
 800b3a8:	bf49      	itett	mi
 800b3aa:	085b      	lsrmi	r3, r3, #1
 800b3ac:	089b      	lsrpl	r3, r3, #2
 800b3ae:	2001      	movmi	r0, #1
 800b3b0:	6013      	strmi	r3, [r2, #0]
 800b3b2:	bf5c      	itt	pl
 800b3b4:	2002      	movpl	r0, #2
 800b3b6:	6013      	strpl	r3, [r2, #0]
 800b3b8:	4770      	bx	lr
 800b3ba:	b299      	uxth	r1, r3
 800b3bc:	b909      	cbnz	r1, 800b3c2 <__lo0bits+0x2a>
 800b3be:	2010      	movs	r0, #16
 800b3c0:	0c1b      	lsrs	r3, r3, #16
 800b3c2:	b2d9      	uxtb	r1, r3
 800b3c4:	b909      	cbnz	r1, 800b3ca <__lo0bits+0x32>
 800b3c6:	3008      	adds	r0, #8
 800b3c8:	0a1b      	lsrs	r3, r3, #8
 800b3ca:	0719      	lsls	r1, r3, #28
 800b3cc:	bf04      	itt	eq
 800b3ce:	091b      	lsreq	r3, r3, #4
 800b3d0:	3004      	addeq	r0, #4
 800b3d2:	0799      	lsls	r1, r3, #30
 800b3d4:	bf04      	itt	eq
 800b3d6:	089b      	lsreq	r3, r3, #2
 800b3d8:	3002      	addeq	r0, #2
 800b3da:	07d9      	lsls	r1, r3, #31
 800b3dc:	d403      	bmi.n	800b3e6 <__lo0bits+0x4e>
 800b3de:	085b      	lsrs	r3, r3, #1
 800b3e0:	f100 0001 	add.w	r0, r0, #1
 800b3e4:	d003      	beq.n	800b3ee <__lo0bits+0x56>
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	4770      	bx	lr
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	4770      	bx	lr
 800b3ee:	2020      	movs	r0, #32
 800b3f0:	4770      	bx	lr
	...

0800b3f4 <__i2b>:
 800b3f4:	b510      	push	{r4, lr}
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	f7ff febb 	bl	800b174 <_Balloc>
 800b3fe:	4602      	mov	r2, r0
 800b400:	b928      	cbnz	r0, 800b40e <__i2b+0x1a>
 800b402:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b406:	4b04      	ldr	r3, [pc, #16]	; (800b418 <__i2b+0x24>)
 800b408:	4804      	ldr	r0, [pc, #16]	; (800b41c <__i2b+0x28>)
 800b40a:	f000 fe6d 	bl	800c0e8 <__assert_func>
 800b40e:	2301      	movs	r3, #1
 800b410:	6144      	str	r4, [r0, #20]
 800b412:	6103      	str	r3, [r0, #16]
 800b414:	bd10      	pop	{r4, pc}
 800b416:	bf00      	nop
 800b418:	080116c8 	.word	0x080116c8
 800b41c:	08011754 	.word	0x08011754

0800b420 <__multiply>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	4691      	mov	r9, r2
 800b426:	690a      	ldr	r2, [r1, #16]
 800b428:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b42c:	460c      	mov	r4, r1
 800b42e:	429a      	cmp	r2, r3
 800b430:	bfbe      	ittt	lt
 800b432:	460b      	movlt	r3, r1
 800b434:	464c      	movlt	r4, r9
 800b436:	4699      	movlt	r9, r3
 800b438:	6927      	ldr	r7, [r4, #16]
 800b43a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b43e:	68a3      	ldr	r3, [r4, #8]
 800b440:	6861      	ldr	r1, [r4, #4]
 800b442:	eb07 060a 	add.w	r6, r7, sl
 800b446:	42b3      	cmp	r3, r6
 800b448:	b085      	sub	sp, #20
 800b44a:	bfb8      	it	lt
 800b44c:	3101      	addlt	r1, #1
 800b44e:	f7ff fe91 	bl	800b174 <_Balloc>
 800b452:	b930      	cbnz	r0, 800b462 <__multiply+0x42>
 800b454:	4602      	mov	r2, r0
 800b456:	f240 115d 	movw	r1, #349	; 0x15d
 800b45a:	4b43      	ldr	r3, [pc, #268]	; (800b568 <__multiply+0x148>)
 800b45c:	4843      	ldr	r0, [pc, #268]	; (800b56c <__multiply+0x14c>)
 800b45e:	f000 fe43 	bl	800c0e8 <__assert_func>
 800b462:	f100 0514 	add.w	r5, r0, #20
 800b466:	462b      	mov	r3, r5
 800b468:	2200      	movs	r2, #0
 800b46a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b46e:	4543      	cmp	r3, r8
 800b470:	d321      	bcc.n	800b4b6 <__multiply+0x96>
 800b472:	f104 0314 	add.w	r3, r4, #20
 800b476:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b47a:	f109 0314 	add.w	r3, r9, #20
 800b47e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b482:	9202      	str	r2, [sp, #8]
 800b484:	1b3a      	subs	r2, r7, r4
 800b486:	3a15      	subs	r2, #21
 800b488:	f022 0203 	bic.w	r2, r2, #3
 800b48c:	3204      	adds	r2, #4
 800b48e:	f104 0115 	add.w	r1, r4, #21
 800b492:	428f      	cmp	r7, r1
 800b494:	bf38      	it	cc
 800b496:	2204      	movcc	r2, #4
 800b498:	9201      	str	r2, [sp, #4]
 800b49a:	9a02      	ldr	r2, [sp, #8]
 800b49c:	9303      	str	r3, [sp, #12]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d80c      	bhi.n	800b4bc <__multiply+0x9c>
 800b4a2:	2e00      	cmp	r6, #0
 800b4a4:	dd03      	ble.n	800b4ae <__multiply+0x8e>
 800b4a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d059      	beq.n	800b562 <__multiply+0x142>
 800b4ae:	6106      	str	r6, [r0, #16]
 800b4b0:	b005      	add	sp, #20
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	f843 2b04 	str.w	r2, [r3], #4
 800b4ba:	e7d8      	b.n	800b46e <__multiply+0x4e>
 800b4bc:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4c0:	f1ba 0f00 	cmp.w	sl, #0
 800b4c4:	d023      	beq.n	800b50e <__multiply+0xee>
 800b4c6:	46a9      	mov	r9, r5
 800b4c8:	f04f 0c00 	mov.w	ip, #0
 800b4cc:	f104 0e14 	add.w	lr, r4, #20
 800b4d0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4d4:	f8d9 1000 	ldr.w	r1, [r9]
 800b4d8:	fa1f fb82 	uxth.w	fp, r2
 800b4dc:	b289      	uxth	r1, r1
 800b4de:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4e2:	4461      	add	r1, ip
 800b4e4:	f8d9 c000 	ldr.w	ip, [r9]
 800b4e8:	0c12      	lsrs	r2, r2, #16
 800b4ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b4ee:	fb0a c202 	mla	r2, sl, r2, ip
 800b4f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4f6:	b289      	uxth	r1, r1
 800b4f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4fc:	4577      	cmp	r7, lr
 800b4fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b502:	f849 1b04 	str.w	r1, [r9], #4
 800b506:	d8e3      	bhi.n	800b4d0 <__multiply+0xb0>
 800b508:	9a01      	ldr	r2, [sp, #4]
 800b50a:	f845 c002 	str.w	ip, [r5, r2]
 800b50e:	9a03      	ldr	r2, [sp, #12]
 800b510:	3304      	adds	r3, #4
 800b512:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b516:	f1b9 0f00 	cmp.w	r9, #0
 800b51a:	d020      	beq.n	800b55e <__multiply+0x13e>
 800b51c:	46ae      	mov	lr, r5
 800b51e:	f04f 0a00 	mov.w	sl, #0
 800b522:	6829      	ldr	r1, [r5, #0]
 800b524:	f104 0c14 	add.w	ip, r4, #20
 800b528:	f8bc b000 	ldrh.w	fp, [ip]
 800b52c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b530:	b289      	uxth	r1, r1
 800b532:	fb09 220b 	mla	r2, r9, fp, r2
 800b536:	4492      	add	sl, r2
 800b538:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b53c:	f84e 1b04 	str.w	r1, [lr], #4
 800b540:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b544:	f8be 1000 	ldrh.w	r1, [lr]
 800b548:	0c12      	lsrs	r2, r2, #16
 800b54a:	fb09 1102 	mla	r1, r9, r2, r1
 800b54e:	4567      	cmp	r7, ip
 800b550:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b554:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b558:	d8e6      	bhi.n	800b528 <__multiply+0x108>
 800b55a:	9a01      	ldr	r2, [sp, #4]
 800b55c:	50a9      	str	r1, [r5, r2]
 800b55e:	3504      	adds	r5, #4
 800b560:	e79b      	b.n	800b49a <__multiply+0x7a>
 800b562:	3e01      	subs	r6, #1
 800b564:	e79d      	b.n	800b4a2 <__multiply+0x82>
 800b566:	bf00      	nop
 800b568:	080116c8 	.word	0x080116c8
 800b56c:	08011754 	.word	0x08011754

0800b570 <__pow5mult>:
 800b570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b574:	4615      	mov	r5, r2
 800b576:	f012 0203 	ands.w	r2, r2, #3
 800b57a:	4606      	mov	r6, r0
 800b57c:	460f      	mov	r7, r1
 800b57e:	d007      	beq.n	800b590 <__pow5mult+0x20>
 800b580:	4c25      	ldr	r4, [pc, #148]	; (800b618 <__pow5mult+0xa8>)
 800b582:	3a01      	subs	r2, #1
 800b584:	2300      	movs	r3, #0
 800b586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b58a:	f7ff fe55 	bl	800b238 <__multadd>
 800b58e:	4607      	mov	r7, r0
 800b590:	10ad      	asrs	r5, r5, #2
 800b592:	d03d      	beq.n	800b610 <__pow5mult+0xa0>
 800b594:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b596:	b97c      	cbnz	r4, 800b5b8 <__pow5mult+0x48>
 800b598:	2010      	movs	r0, #16
 800b59a:	f7fc fa53 	bl	8007a44 <malloc>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	6270      	str	r0, [r6, #36]	; 0x24
 800b5a2:	b928      	cbnz	r0, 800b5b0 <__pow5mult+0x40>
 800b5a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5a8:	4b1c      	ldr	r3, [pc, #112]	; (800b61c <__pow5mult+0xac>)
 800b5aa:	481d      	ldr	r0, [pc, #116]	; (800b620 <__pow5mult+0xb0>)
 800b5ac:	f000 fd9c 	bl	800c0e8 <__assert_func>
 800b5b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5b4:	6004      	str	r4, [r0, #0]
 800b5b6:	60c4      	str	r4, [r0, #12]
 800b5b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5c0:	b94c      	cbnz	r4, 800b5d6 <__pow5mult+0x66>
 800b5c2:	f240 2171 	movw	r1, #625	; 0x271
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f7ff ff14 	bl	800b3f4 <__i2b>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5d4:	6003      	str	r3, [r0, #0]
 800b5d6:	f04f 0900 	mov.w	r9, #0
 800b5da:	07eb      	lsls	r3, r5, #31
 800b5dc:	d50a      	bpl.n	800b5f4 <__pow5mult+0x84>
 800b5de:	4639      	mov	r1, r7
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7ff ff1c 	bl	800b420 <__multiply>
 800b5e8:	4680      	mov	r8, r0
 800b5ea:	4639      	mov	r1, r7
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7ff fe01 	bl	800b1f4 <_Bfree>
 800b5f2:	4647      	mov	r7, r8
 800b5f4:	106d      	asrs	r5, r5, #1
 800b5f6:	d00b      	beq.n	800b610 <__pow5mult+0xa0>
 800b5f8:	6820      	ldr	r0, [r4, #0]
 800b5fa:	b938      	cbnz	r0, 800b60c <__pow5mult+0x9c>
 800b5fc:	4622      	mov	r2, r4
 800b5fe:	4621      	mov	r1, r4
 800b600:	4630      	mov	r0, r6
 800b602:	f7ff ff0d 	bl	800b420 <__multiply>
 800b606:	6020      	str	r0, [r4, #0]
 800b608:	f8c0 9000 	str.w	r9, [r0]
 800b60c:	4604      	mov	r4, r0
 800b60e:	e7e4      	b.n	800b5da <__pow5mult+0x6a>
 800b610:	4638      	mov	r0, r7
 800b612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b616:	bf00      	nop
 800b618:	080118a0 	.word	0x080118a0
 800b61c:	08011656 	.word	0x08011656
 800b620:	08011754 	.word	0x08011754

0800b624 <__lshift>:
 800b624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b628:	460c      	mov	r4, r1
 800b62a:	4607      	mov	r7, r0
 800b62c:	4691      	mov	r9, r2
 800b62e:	6923      	ldr	r3, [r4, #16]
 800b630:	6849      	ldr	r1, [r1, #4]
 800b632:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b636:	68a3      	ldr	r3, [r4, #8]
 800b638:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b63c:	f108 0601 	add.w	r6, r8, #1
 800b640:	42b3      	cmp	r3, r6
 800b642:	db0b      	blt.n	800b65c <__lshift+0x38>
 800b644:	4638      	mov	r0, r7
 800b646:	f7ff fd95 	bl	800b174 <_Balloc>
 800b64a:	4605      	mov	r5, r0
 800b64c:	b948      	cbnz	r0, 800b662 <__lshift+0x3e>
 800b64e:	4602      	mov	r2, r0
 800b650:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b654:	4b29      	ldr	r3, [pc, #164]	; (800b6fc <__lshift+0xd8>)
 800b656:	482a      	ldr	r0, [pc, #168]	; (800b700 <__lshift+0xdc>)
 800b658:	f000 fd46 	bl	800c0e8 <__assert_func>
 800b65c:	3101      	adds	r1, #1
 800b65e:	005b      	lsls	r3, r3, #1
 800b660:	e7ee      	b.n	800b640 <__lshift+0x1c>
 800b662:	2300      	movs	r3, #0
 800b664:	f100 0114 	add.w	r1, r0, #20
 800b668:	f100 0210 	add.w	r2, r0, #16
 800b66c:	4618      	mov	r0, r3
 800b66e:	4553      	cmp	r3, sl
 800b670:	db37      	blt.n	800b6e2 <__lshift+0xbe>
 800b672:	6920      	ldr	r0, [r4, #16]
 800b674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b678:	f104 0314 	add.w	r3, r4, #20
 800b67c:	f019 091f 	ands.w	r9, r9, #31
 800b680:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b684:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b688:	d02f      	beq.n	800b6ea <__lshift+0xc6>
 800b68a:	468a      	mov	sl, r1
 800b68c:	f04f 0c00 	mov.w	ip, #0
 800b690:	f1c9 0e20 	rsb	lr, r9, #32
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	fa02 f209 	lsl.w	r2, r2, r9
 800b69a:	ea42 020c 	orr.w	r2, r2, ip
 800b69e:	f84a 2b04 	str.w	r2, [sl], #4
 800b6a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6a6:	4298      	cmp	r0, r3
 800b6a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b6ac:	d8f2      	bhi.n	800b694 <__lshift+0x70>
 800b6ae:	1b03      	subs	r3, r0, r4
 800b6b0:	3b15      	subs	r3, #21
 800b6b2:	f023 0303 	bic.w	r3, r3, #3
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	f104 0215 	add.w	r2, r4, #21
 800b6bc:	4290      	cmp	r0, r2
 800b6be:	bf38      	it	cc
 800b6c0:	2304      	movcc	r3, #4
 800b6c2:	f841 c003 	str.w	ip, [r1, r3]
 800b6c6:	f1bc 0f00 	cmp.w	ip, #0
 800b6ca:	d001      	beq.n	800b6d0 <__lshift+0xac>
 800b6cc:	f108 0602 	add.w	r6, r8, #2
 800b6d0:	3e01      	subs	r6, #1
 800b6d2:	4638      	mov	r0, r7
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	612e      	str	r6, [r5, #16]
 800b6d8:	f7ff fd8c 	bl	800b1f4 <_Bfree>
 800b6dc:	4628      	mov	r0, r5
 800b6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	e7c1      	b.n	800b66e <__lshift+0x4a>
 800b6ea:	3904      	subs	r1, #4
 800b6ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6f0:	4298      	cmp	r0, r3
 800b6f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6f6:	d8f9      	bhi.n	800b6ec <__lshift+0xc8>
 800b6f8:	e7ea      	b.n	800b6d0 <__lshift+0xac>
 800b6fa:	bf00      	nop
 800b6fc:	080116c8 	.word	0x080116c8
 800b700:	08011754 	.word	0x08011754

0800b704 <__mcmp>:
 800b704:	4603      	mov	r3, r0
 800b706:	690a      	ldr	r2, [r1, #16]
 800b708:	6900      	ldr	r0, [r0, #16]
 800b70a:	b530      	push	{r4, r5, lr}
 800b70c:	1a80      	subs	r0, r0, r2
 800b70e:	d10d      	bne.n	800b72c <__mcmp+0x28>
 800b710:	3314      	adds	r3, #20
 800b712:	3114      	adds	r1, #20
 800b714:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b718:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b71c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b724:	4295      	cmp	r5, r2
 800b726:	d002      	beq.n	800b72e <__mcmp+0x2a>
 800b728:	d304      	bcc.n	800b734 <__mcmp+0x30>
 800b72a:	2001      	movs	r0, #1
 800b72c:	bd30      	pop	{r4, r5, pc}
 800b72e:	42a3      	cmp	r3, r4
 800b730:	d3f4      	bcc.n	800b71c <__mcmp+0x18>
 800b732:	e7fb      	b.n	800b72c <__mcmp+0x28>
 800b734:	f04f 30ff 	mov.w	r0, #4294967295
 800b738:	e7f8      	b.n	800b72c <__mcmp+0x28>
	...

0800b73c <__mdiff>:
 800b73c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	460d      	mov	r5, r1
 800b742:	4607      	mov	r7, r0
 800b744:	4611      	mov	r1, r2
 800b746:	4628      	mov	r0, r5
 800b748:	4614      	mov	r4, r2
 800b74a:	f7ff ffdb 	bl	800b704 <__mcmp>
 800b74e:	1e06      	subs	r6, r0, #0
 800b750:	d111      	bne.n	800b776 <__mdiff+0x3a>
 800b752:	4631      	mov	r1, r6
 800b754:	4638      	mov	r0, r7
 800b756:	f7ff fd0d 	bl	800b174 <_Balloc>
 800b75a:	4602      	mov	r2, r0
 800b75c:	b928      	cbnz	r0, 800b76a <__mdiff+0x2e>
 800b75e:	f240 2132 	movw	r1, #562	; 0x232
 800b762:	4b3a      	ldr	r3, [pc, #232]	; (800b84c <__mdiff+0x110>)
 800b764:	483a      	ldr	r0, [pc, #232]	; (800b850 <__mdiff+0x114>)
 800b766:	f000 fcbf 	bl	800c0e8 <__assert_func>
 800b76a:	2301      	movs	r3, #1
 800b76c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b770:	4610      	mov	r0, r2
 800b772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b776:	bfa4      	itt	ge
 800b778:	4623      	movge	r3, r4
 800b77a:	462c      	movge	r4, r5
 800b77c:	4638      	mov	r0, r7
 800b77e:	6861      	ldr	r1, [r4, #4]
 800b780:	bfa6      	itte	ge
 800b782:	461d      	movge	r5, r3
 800b784:	2600      	movge	r6, #0
 800b786:	2601      	movlt	r6, #1
 800b788:	f7ff fcf4 	bl	800b174 <_Balloc>
 800b78c:	4602      	mov	r2, r0
 800b78e:	b918      	cbnz	r0, 800b798 <__mdiff+0x5c>
 800b790:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b794:	4b2d      	ldr	r3, [pc, #180]	; (800b84c <__mdiff+0x110>)
 800b796:	e7e5      	b.n	800b764 <__mdiff+0x28>
 800b798:	f102 0814 	add.w	r8, r2, #20
 800b79c:	46c2      	mov	sl, r8
 800b79e:	f04f 0c00 	mov.w	ip, #0
 800b7a2:	6927      	ldr	r7, [r4, #16]
 800b7a4:	60c6      	str	r6, [r0, #12]
 800b7a6:	692e      	ldr	r6, [r5, #16]
 800b7a8:	f104 0014 	add.w	r0, r4, #20
 800b7ac:	f105 0914 	add.w	r9, r5, #20
 800b7b0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b7b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7b8:	3410      	adds	r4, #16
 800b7ba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b7be:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7c2:	fa1f f18b 	uxth.w	r1, fp
 800b7c6:	448c      	add	ip, r1
 800b7c8:	b299      	uxth	r1, r3
 800b7ca:	0c1b      	lsrs	r3, r3, #16
 800b7cc:	ebac 0101 	sub.w	r1, ip, r1
 800b7d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7d4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b7d8:	b289      	uxth	r1, r1
 800b7da:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b7de:	454e      	cmp	r6, r9
 800b7e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b7e4:	f84a 3b04 	str.w	r3, [sl], #4
 800b7e8:	d8e7      	bhi.n	800b7ba <__mdiff+0x7e>
 800b7ea:	1b73      	subs	r3, r6, r5
 800b7ec:	3b15      	subs	r3, #21
 800b7ee:	f023 0303 	bic.w	r3, r3, #3
 800b7f2:	3515      	adds	r5, #21
 800b7f4:	3304      	adds	r3, #4
 800b7f6:	42ae      	cmp	r6, r5
 800b7f8:	bf38      	it	cc
 800b7fa:	2304      	movcc	r3, #4
 800b7fc:	4418      	add	r0, r3
 800b7fe:	4443      	add	r3, r8
 800b800:	461e      	mov	r6, r3
 800b802:	4605      	mov	r5, r0
 800b804:	4575      	cmp	r5, lr
 800b806:	d30e      	bcc.n	800b826 <__mdiff+0xea>
 800b808:	f10e 0103 	add.w	r1, lr, #3
 800b80c:	1a09      	subs	r1, r1, r0
 800b80e:	f021 0103 	bic.w	r1, r1, #3
 800b812:	3803      	subs	r0, #3
 800b814:	4586      	cmp	lr, r0
 800b816:	bf38      	it	cc
 800b818:	2100      	movcc	r1, #0
 800b81a:	4419      	add	r1, r3
 800b81c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b820:	b18b      	cbz	r3, 800b846 <__mdiff+0x10a>
 800b822:	6117      	str	r7, [r2, #16]
 800b824:	e7a4      	b.n	800b770 <__mdiff+0x34>
 800b826:	f855 8b04 	ldr.w	r8, [r5], #4
 800b82a:	fa1f f188 	uxth.w	r1, r8
 800b82e:	4461      	add	r1, ip
 800b830:	140c      	asrs	r4, r1, #16
 800b832:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b836:	b289      	uxth	r1, r1
 800b838:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b83c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b840:	f846 1b04 	str.w	r1, [r6], #4
 800b844:	e7de      	b.n	800b804 <__mdiff+0xc8>
 800b846:	3f01      	subs	r7, #1
 800b848:	e7e8      	b.n	800b81c <__mdiff+0xe0>
 800b84a:	bf00      	nop
 800b84c:	080116c8 	.word	0x080116c8
 800b850:	08011754 	.word	0x08011754

0800b854 <__ulp>:
 800b854:	4b11      	ldr	r3, [pc, #68]	; (800b89c <__ulp+0x48>)
 800b856:	400b      	ands	r3, r1
 800b858:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	dd02      	ble.n	800b866 <__ulp+0x12>
 800b860:	2000      	movs	r0, #0
 800b862:	4619      	mov	r1, r3
 800b864:	4770      	bx	lr
 800b866:	425b      	negs	r3, r3
 800b868:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b86c:	f04f 0000 	mov.w	r0, #0
 800b870:	f04f 0100 	mov.w	r1, #0
 800b874:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b878:	da04      	bge.n	800b884 <__ulp+0x30>
 800b87a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b87e:	fa43 f102 	asr.w	r1, r3, r2
 800b882:	4770      	bx	lr
 800b884:	f1a2 0314 	sub.w	r3, r2, #20
 800b888:	2b1e      	cmp	r3, #30
 800b88a:	bfd6      	itet	le
 800b88c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b890:	2301      	movgt	r3, #1
 800b892:	fa22 f303 	lsrle.w	r3, r2, r3
 800b896:	4618      	mov	r0, r3
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	7ff00000 	.word	0x7ff00000

0800b8a0 <__b2d>:
 800b8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a4:	6907      	ldr	r7, [r0, #16]
 800b8a6:	f100 0914 	add.w	r9, r0, #20
 800b8aa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b8ae:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b8b2:	f1a7 0804 	sub.w	r8, r7, #4
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7ff fd4e 	bl	800b358 <__hi0bits>
 800b8bc:	f1c0 0320 	rsb	r3, r0, #32
 800b8c0:	280a      	cmp	r0, #10
 800b8c2:	600b      	str	r3, [r1, #0]
 800b8c4:	491f      	ldr	r1, [pc, #124]	; (800b944 <__b2d+0xa4>)
 800b8c6:	dc17      	bgt.n	800b8f8 <__b2d+0x58>
 800b8c8:	45c1      	cmp	r9, r8
 800b8ca:	bf28      	it	cs
 800b8cc:	2200      	movcs	r2, #0
 800b8ce:	f1c0 0c0b 	rsb	ip, r0, #11
 800b8d2:	fa26 f30c 	lsr.w	r3, r6, ip
 800b8d6:	bf38      	it	cc
 800b8d8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b8dc:	ea43 0501 	orr.w	r5, r3, r1
 800b8e0:	f100 0315 	add.w	r3, r0, #21
 800b8e4:	fa06 f303 	lsl.w	r3, r6, r3
 800b8e8:	fa22 f20c 	lsr.w	r2, r2, ip
 800b8ec:	ea43 0402 	orr.w	r4, r3, r2
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8f8:	45c1      	cmp	r9, r8
 800b8fa:	bf2e      	itee	cs
 800b8fc:	2200      	movcs	r2, #0
 800b8fe:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b902:	f1a7 0808 	subcc.w	r8, r7, #8
 800b906:	f1b0 030b 	subs.w	r3, r0, #11
 800b90a:	d016      	beq.n	800b93a <__b2d+0x9a>
 800b90c:	f1c3 0720 	rsb	r7, r3, #32
 800b910:	fa22 f107 	lsr.w	r1, r2, r7
 800b914:	45c8      	cmp	r8, r9
 800b916:	fa06 f603 	lsl.w	r6, r6, r3
 800b91a:	ea46 0601 	orr.w	r6, r6, r1
 800b91e:	bf94      	ite	ls
 800b920:	2100      	movls	r1, #0
 800b922:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b926:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b92a:	fa02 f003 	lsl.w	r0, r2, r3
 800b92e:	40f9      	lsrs	r1, r7
 800b930:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b934:	ea40 0401 	orr.w	r4, r0, r1
 800b938:	e7da      	b.n	800b8f0 <__b2d+0x50>
 800b93a:	4614      	mov	r4, r2
 800b93c:	ea46 0501 	orr.w	r5, r6, r1
 800b940:	e7d6      	b.n	800b8f0 <__b2d+0x50>
 800b942:	bf00      	nop
 800b944:	3ff00000 	.word	0x3ff00000

0800b948 <__d2b>:
 800b948:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b94c:	2101      	movs	r1, #1
 800b94e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b952:	4690      	mov	r8, r2
 800b954:	461d      	mov	r5, r3
 800b956:	f7ff fc0d 	bl	800b174 <_Balloc>
 800b95a:	4604      	mov	r4, r0
 800b95c:	b930      	cbnz	r0, 800b96c <__d2b+0x24>
 800b95e:	4602      	mov	r2, r0
 800b960:	f240 310a 	movw	r1, #778	; 0x30a
 800b964:	4b24      	ldr	r3, [pc, #144]	; (800b9f8 <__d2b+0xb0>)
 800b966:	4825      	ldr	r0, [pc, #148]	; (800b9fc <__d2b+0xb4>)
 800b968:	f000 fbbe 	bl	800c0e8 <__assert_func>
 800b96c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b970:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b974:	bb2d      	cbnz	r5, 800b9c2 <__d2b+0x7a>
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	f1b8 0300 	subs.w	r3, r8, #0
 800b97c:	d026      	beq.n	800b9cc <__d2b+0x84>
 800b97e:	4668      	mov	r0, sp
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	f7ff fd09 	bl	800b398 <__lo0bits>
 800b986:	9900      	ldr	r1, [sp, #0]
 800b988:	b1f0      	cbz	r0, 800b9c8 <__d2b+0x80>
 800b98a:	9a01      	ldr	r2, [sp, #4]
 800b98c:	f1c0 0320 	rsb	r3, r0, #32
 800b990:	fa02 f303 	lsl.w	r3, r2, r3
 800b994:	430b      	orrs	r3, r1
 800b996:	40c2      	lsrs	r2, r0
 800b998:	6163      	str	r3, [r4, #20]
 800b99a:	9201      	str	r2, [sp, #4]
 800b99c:	9b01      	ldr	r3, [sp, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	bf14      	ite	ne
 800b9a2:	2102      	movne	r1, #2
 800b9a4:	2101      	moveq	r1, #1
 800b9a6:	61a3      	str	r3, [r4, #24]
 800b9a8:	6121      	str	r1, [r4, #16]
 800b9aa:	b1c5      	cbz	r5, 800b9de <__d2b+0x96>
 800b9ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9b0:	4405      	add	r5, r0
 800b9b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9b6:	603d      	str	r5, [r7, #0]
 800b9b8:	6030      	str	r0, [r6, #0]
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	b002      	add	sp, #8
 800b9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9c6:	e7d6      	b.n	800b976 <__d2b+0x2e>
 800b9c8:	6161      	str	r1, [r4, #20]
 800b9ca:	e7e7      	b.n	800b99c <__d2b+0x54>
 800b9cc:	a801      	add	r0, sp, #4
 800b9ce:	f7ff fce3 	bl	800b398 <__lo0bits>
 800b9d2:	2101      	movs	r1, #1
 800b9d4:	9b01      	ldr	r3, [sp, #4]
 800b9d6:	6121      	str	r1, [r4, #16]
 800b9d8:	6163      	str	r3, [r4, #20]
 800b9da:	3020      	adds	r0, #32
 800b9dc:	e7e5      	b.n	800b9aa <__d2b+0x62>
 800b9de:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b9e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9e6:	6038      	str	r0, [r7, #0]
 800b9e8:	6918      	ldr	r0, [r3, #16]
 800b9ea:	f7ff fcb5 	bl	800b358 <__hi0bits>
 800b9ee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b9f2:	6031      	str	r1, [r6, #0]
 800b9f4:	e7e1      	b.n	800b9ba <__d2b+0x72>
 800b9f6:	bf00      	nop
 800b9f8:	080116c8 	.word	0x080116c8
 800b9fc:	08011754 	.word	0x08011754

0800ba00 <__ratio>:
 800ba00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	4688      	mov	r8, r1
 800ba06:	4669      	mov	r1, sp
 800ba08:	4681      	mov	r9, r0
 800ba0a:	f7ff ff49 	bl	800b8a0 <__b2d>
 800ba0e:	460f      	mov	r7, r1
 800ba10:	4604      	mov	r4, r0
 800ba12:	460d      	mov	r5, r1
 800ba14:	4640      	mov	r0, r8
 800ba16:	a901      	add	r1, sp, #4
 800ba18:	f7ff ff42 	bl	800b8a0 <__b2d>
 800ba1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba20:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ba24:	468b      	mov	fp, r1
 800ba26:	eba3 0c02 	sub.w	ip, r3, r2
 800ba2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba2e:	1a9b      	subs	r3, r3, r2
 800ba30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	bfd5      	itete	le
 800ba38:	460a      	movle	r2, r1
 800ba3a:	462a      	movgt	r2, r5
 800ba3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba40:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ba44:	bfd8      	it	le
 800ba46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ba4a:	465b      	mov	r3, fp
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	4639      	mov	r1, r7
 800ba50:	4620      	mov	r0, r4
 800ba52:	f7f4 fe6b 	bl	800072c <__aeabi_ddiv>
 800ba56:	b003      	add	sp, #12
 800ba58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba5c <__copybits>:
 800ba5c:	3901      	subs	r1, #1
 800ba5e:	b570      	push	{r4, r5, r6, lr}
 800ba60:	1149      	asrs	r1, r1, #5
 800ba62:	6914      	ldr	r4, [r2, #16]
 800ba64:	3101      	adds	r1, #1
 800ba66:	f102 0314 	add.w	r3, r2, #20
 800ba6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba72:	1f05      	subs	r5, r0, #4
 800ba74:	42a3      	cmp	r3, r4
 800ba76:	d30c      	bcc.n	800ba92 <__copybits+0x36>
 800ba78:	1aa3      	subs	r3, r4, r2
 800ba7a:	3b11      	subs	r3, #17
 800ba7c:	f023 0303 	bic.w	r3, r3, #3
 800ba80:	3211      	adds	r2, #17
 800ba82:	42a2      	cmp	r2, r4
 800ba84:	bf88      	it	hi
 800ba86:	2300      	movhi	r3, #0
 800ba88:	4418      	add	r0, r3
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4288      	cmp	r0, r1
 800ba8e:	d305      	bcc.n	800ba9c <__copybits+0x40>
 800ba90:	bd70      	pop	{r4, r5, r6, pc}
 800ba92:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba96:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba9a:	e7eb      	b.n	800ba74 <__copybits+0x18>
 800ba9c:	f840 3b04 	str.w	r3, [r0], #4
 800baa0:	e7f4      	b.n	800ba8c <__copybits+0x30>

0800baa2 <__any_on>:
 800baa2:	f100 0214 	add.w	r2, r0, #20
 800baa6:	6900      	ldr	r0, [r0, #16]
 800baa8:	114b      	asrs	r3, r1, #5
 800baaa:	4298      	cmp	r0, r3
 800baac:	b510      	push	{r4, lr}
 800baae:	db11      	blt.n	800bad4 <__any_on+0x32>
 800bab0:	dd0a      	ble.n	800bac8 <__any_on+0x26>
 800bab2:	f011 011f 	ands.w	r1, r1, #31
 800bab6:	d007      	beq.n	800bac8 <__any_on+0x26>
 800bab8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800babc:	fa24 f001 	lsr.w	r0, r4, r1
 800bac0:	fa00 f101 	lsl.w	r1, r0, r1
 800bac4:	428c      	cmp	r4, r1
 800bac6:	d10b      	bne.n	800bae0 <__any_on+0x3e>
 800bac8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bacc:	4293      	cmp	r3, r2
 800bace:	d803      	bhi.n	800bad8 <__any_on+0x36>
 800bad0:	2000      	movs	r0, #0
 800bad2:	bd10      	pop	{r4, pc}
 800bad4:	4603      	mov	r3, r0
 800bad6:	e7f7      	b.n	800bac8 <__any_on+0x26>
 800bad8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800badc:	2900      	cmp	r1, #0
 800bade:	d0f5      	beq.n	800bacc <__any_on+0x2a>
 800bae0:	2001      	movs	r0, #1
 800bae2:	e7f6      	b.n	800bad2 <__any_on+0x30>

0800bae4 <_calloc_r>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	fba1 5402 	umull	r5, r4, r1, r2
 800baea:	b934      	cbnz	r4, 800bafa <_calloc_r+0x16>
 800baec:	4629      	mov	r1, r5
 800baee:	f7fc f837 	bl	8007b60 <_malloc_r>
 800baf2:	4606      	mov	r6, r0
 800baf4:	b928      	cbnz	r0, 800bb02 <_calloc_r+0x1e>
 800baf6:	4630      	mov	r0, r6
 800baf8:	bd70      	pop	{r4, r5, r6, pc}
 800bafa:	220c      	movs	r2, #12
 800bafc:	2600      	movs	r6, #0
 800bafe:	6002      	str	r2, [r0, #0]
 800bb00:	e7f9      	b.n	800baf6 <_calloc_r+0x12>
 800bb02:	462a      	mov	r2, r5
 800bb04:	4621      	mov	r1, r4
 800bb06:	f7fb ffbb 	bl	8007a80 <memset>
 800bb0a:	e7f4      	b.n	800baf6 <_calloc_r+0x12>

0800bb0c <__ssputs_r>:
 800bb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb10:	688e      	ldr	r6, [r1, #8]
 800bb12:	4682      	mov	sl, r0
 800bb14:	429e      	cmp	r6, r3
 800bb16:	460c      	mov	r4, r1
 800bb18:	4690      	mov	r8, r2
 800bb1a:	461f      	mov	r7, r3
 800bb1c:	d838      	bhi.n	800bb90 <__ssputs_r+0x84>
 800bb1e:	898a      	ldrh	r2, [r1, #12]
 800bb20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb24:	d032      	beq.n	800bb8c <__ssputs_r+0x80>
 800bb26:	6825      	ldr	r5, [r4, #0]
 800bb28:	6909      	ldr	r1, [r1, #16]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	eba5 0901 	sub.w	r9, r5, r1
 800bb30:	6965      	ldr	r5, [r4, #20]
 800bb32:	444b      	add	r3, r9
 800bb34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb3c:	106d      	asrs	r5, r5, #1
 800bb3e:	429d      	cmp	r5, r3
 800bb40:	bf38      	it	cc
 800bb42:	461d      	movcc	r5, r3
 800bb44:	0553      	lsls	r3, r2, #21
 800bb46:	d531      	bpl.n	800bbac <__ssputs_r+0xa0>
 800bb48:	4629      	mov	r1, r5
 800bb4a:	f7fc f809 	bl	8007b60 <_malloc_r>
 800bb4e:	4606      	mov	r6, r0
 800bb50:	b950      	cbnz	r0, 800bb68 <__ssputs_r+0x5c>
 800bb52:	230c      	movs	r3, #12
 800bb54:	f04f 30ff 	mov.w	r0, #4294967295
 800bb58:	f8ca 3000 	str.w	r3, [sl]
 800bb5c:	89a3      	ldrh	r3, [r4, #12]
 800bb5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb62:	81a3      	strh	r3, [r4, #12]
 800bb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb68:	464a      	mov	r2, r9
 800bb6a:	6921      	ldr	r1, [r4, #16]
 800bb6c:	f7fb ff7a 	bl	8007a64 <memcpy>
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb7a:	81a3      	strh	r3, [r4, #12]
 800bb7c:	6126      	str	r6, [r4, #16]
 800bb7e:	444e      	add	r6, r9
 800bb80:	6026      	str	r6, [r4, #0]
 800bb82:	463e      	mov	r6, r7
 800bb84:	6165      	str	r5, [r4, #20]
 800bb86:	eba5 0509 	sub.w	r5, r5, r9
 800bb8a:	60a5      	str	r5, [r4, #8]
 800bb8c:	42be      	cmp	r6, r7
 800bb8e:	d900      	bls.n	800bb92 <__ssputs_r+0x86>
 800bb90:	463e      	mov	r6, r7
 800bb92:	4632      	mov	r2, r6
 800bb94:	4641      	mov	r1, r8
 800bb96:	6820      	ldr	r0, [r4, #0]
 800bb98:	f000 faf8 	bl	800c18c <memmove>
 800bb9c:	68a3      	ldr	r3, [r4, #8]
 800bb9e:	2000      	movs	r0, #0
 800bba0:	1b9b      	subs	r3, r3, r6
 800bba2:	60a3      	str	r3, [r4, #8]
 800bba4:	6823      	ldr	r3, [r4, #0]
 800bba6:	4433      	add	r3, r6
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	e7db      	b.n	800bb64 <__ssputs_r+0x58>
 800bbac:	462a      	mov	r2, r5
 800bbae:	f000 fb07 	bl	800c1c0 <_realloc_r>
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d1e1      	bne.n	800bb7c <__ssputs_r+0x70>
 800bbb8:	4650      	mov	r0, sl
 800bbba:	6921      	ldr	r1, [r4, #16]
 800bbbc:	f7fb ff68 	bl	8007a90 <_free_r>
 800bbc0:	e7c7      	b.n	800bb52 <__ssputs_r+0x46>
	...

0800bbc4 <_svfiprintf_r>:
 800bbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc8:	4698      	mov	r8, r3
 800bbca:	898b      	ldrh	r3, [r1, #12]
 800bbcc:	4607      	mov	r7, r0
 800bbce:	061b      	lsls	r3, r3, #24
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	4614      	mov	r4, r2
 800bbd4:	b09d      	sub	sp, #116	; 0x74
 800bbd6:	d50e      	bpl.n	800bbf6 <_svfiprintf_r+0x32>
 800bbd8:	690b      	ldr	r3, [r1, #16]
 800bbda:	b963      	cbnz	r3, 800bbf6 <_svfiprintf_r+0x32>
 800bbdc:	2140      	movs	r1, #64	; 0x40
 800bbde:	f7fb ffbf 	bl	8007b60 <_malloc_r>
 800bbe2:	6028      	str	r0, [r5, #0]
 800bbe4:	6128      	str	r0, [r5, #16]
 800bbe6:	b920      	cbnz	r0, 800bbf2 <_svfiprintf_r+0x2e>
 800bbe8:	230c      	movs	r3, #12
 800bbea:	603b      	str	r3, [r7, #0]
 800bbec:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf0:	e0d1      	b.n	800bd96 <_svfiprintf_r+0x1d2>
 800bbf2:	2340      	movs	r3, #64	; 0x40
 800bbf4:	616b      	str	r3, [r5, #20]
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbfa:	2320      	movs	r3, #32
 800bbfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc00:	2330      	movs	r3, #48	; 0x30
 800bc02:	f04f 0901 	mov.w	r9, #1
 800bc06:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bdb0 <_svfiprintf_r+0x1ec>
 800bc0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc12:	4623      	mov	r3, r4
 800bc14:	469a      	mov	sl, r3
 800bc16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc1a:	b10a      	cbz	r2, 800bc20 <_svfiprintf_r+0x5c>
 800bc1c:	2a25      	cmp	r2, #37	; 0x25
 800bc1e:	d1f9      	bne.n	800bc14 <_svfiprintf_r+0x50>
 800bc20:	ebba 0b04 	subs.w	fp, sl, r4
 800bc24:	d00b      	beq.n	800bc3e <_svfiprintf_r+0x7a>
 800bc26:	465b      	mov	r3, fp
 800bc28:	4622      	mov	r2, r4
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	4638      	mov	r0, r7
 800bc2e:	f7ff ff6d 	bl	800bb0c <__ssputs_r>
 800bc32:	3001      	adds	r0, #1
 800bc34:	f000 80aa 	beq.w	800bd8c <_svfiprintf_r+0x1c8>
 800bc38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc3a:	445a      	add	r2, fp
 800bc3c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc3e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 80a2 	beq.w	800bd8c <_svfiprintf_r+0x1c8>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc52:	f10a 0a01 	add.w	sl, sl, #1
 800bc56:	9304      	str	r3, [sp, #16]
 800bc58:	9307      	str	r3, [sp, #28]
 800bc5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc5e:	931a      	str	r3, [sp, #104]	; 0x68
 800bc60:	4654      	mov	r4, sl
 800bc62:	2205      	movs	r2, #5
 800bc64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc68:	4851      	ldr	r0, [pc, #324]	; (800bdb0 <_svfiprintf_r+0x1ec>)
 800bc6a:	f7ff fa69 	bl	800b140 <memchr>
 800bc6e:	9a04      	ldr	r2, [sp, #16]
 800bc70:	b9d8      	cbnz	r0, 800bcaa <_svfiprintf_r+0xe6>
 800bc72:	06d0      	lsls	r0, r2, #27
 800bc74:	bf44      	itt	mi
 800bc76:	2320      	movmi	r3, #32
 800bc78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc7c:	0711      	lsls	r1, r2, #28
 800bc7e:	bf44      	itt	mi
 800bc80:	232b      	movmi	r3, #43	; 0x2b
 800bc82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc86:	f89a 3000 	ldrb.w	r3, [sl]
 800bc8a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc8c:	d015      	beq.n	800bcba <_svfiprintf_r+0xf6>
 800bc8e:	4654      	mov	r4, sl
 800bc90:	2000      	movs	r0, #0
 800bc92:	f04f 0c0a 	mov.w	ip, #10
 800bc96:	9a07      	ldr	r2, [sp, #28]
 800bc98:	4621      	mov	r1, r4
 800bc9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc9e:	3b30      	subs	r3, #48	; 0x30
 800bca0:	2b09      	cmp	r3, #9
 800bca2:	d94e      	bls.n	800bd42 <_svfiprintf_r+0x17e>
 800bca4:	b1b0      	cbz	r0, 800bcd4 <_svfiprintf_r+0x110>
 800bca6:	9207      	str	r2, [sp, #28]
 800bca8:	e014      	b.n	800bcd4 <_svfiprintf_r+0x110>
 800bcaa:	eba0 0308 	sub.w	r3, r0, r8
 800bcae:	fa09 f303 	lsl.w	r3, r9, r3
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	46a2      	mov	sl, r4
 800bcb6:	9304      	str	r3, [sp, #16]
 800bcb8:	e7d2      	b.n	800bc60 <_svfiprintf_r+0x9c>
 800bcba:	9b03      	ldr	r3, [sp, #12]
 800bcbc:	1d19      	adds	r1, r3, #4
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	9103      	str	r1, [sp, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	bfbb      	ittet	lt
 800bcc6:	425b      	neglt	r3, r3
 800bcc8:	f042 0202 	orrlt.w	r2, r2, #2
 800bccc:	9307      	strge	r3, [sp, #28]
 800bcce:	9307      	strlt	r3, [sp, #28]
 800bcd0:	bfb8      	it	lt
 800bcd2:	9204      	strlt	r2, [sp, #16]
 800bcd4:	7823      	ldrb	r3, [r4, #0]
 800bcd6:	2b2e      	cmp	r3, #46	; 0x2e
 800bcd8:	d10c      	bne.n	800bcf4 <_svfiprintf_r+0x130>
 800bcda:	7863      	ldrb	r3, [r4, #1]
 800bcdc:	2b2a      	cmp	r3, #42	; 0x2a
 800bcde:	d135      	bne.n	800bd4c <_svfiprintf_r+0x188>
 800bce0:	9b03      	ldr	r3, [sp, #12]
 800bce2:	3402      	adds	r4, #2
 800bce4:	1d1a      	adds	r2, r3, #4
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	9203      	str	r2, [sp, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	bfb8      	it	lt
 800bcee:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcf2:	9305      	str	r3, [sp, #20]
 800bcf4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bdb4 <_svfiprintf_r+0x1f0>
 800bcf8:	2203      	movs	r2, #3
 800bcfa:	4650      	mov	r0, sl
 800bcfc:	7821      	ldrb	r1, [r4, #0]
 800bcfe:	f7ff fa1f 	bl	800b140 <memchr>
 800bd02:	b140      	cbz	r0, 800bd16 <_svfiprintf_r+0x152>
 800bd04:	2340      	movs	r3, #64	; 0x40
 800bd06:	eba0 000a 	sub.w	r0, r0, sl
 800bd0a:	fa03 f000 	lsl.w	r0, r3, r0
 800bd0e:	9b04      	ldr	r3, [sp, #16]
 800bd10:	3401      	adds	r4, #1
 800bd12:	4303      	orrs	r3, r0
 800bd14:	9304      	str	r3, [sp, #16]
 800bd16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd1a:	2206      	movs	r2, #6
 800bd1c:	4826      	ldr	r0, [pc, #152]	; (800bdb8 <_svfiprintf_r+0x1f4>)
 800bd1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd22:	f7ff fa0d 	bl	800b140 <memchr>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d038      	beq.n	800bd9c <_svfiprintf_r+0x1d8>
 800bd2a:	4b24      	ldr	r3, [pc, #144]	; (800bdbc <_svfiprintf_r+0x1f8>)
 800bd2c:	bb1b      	cbnz	r3, 800bd76 <_svfiprintf_r+0x1b2>
 800bd2e:	9b03      	ldr	r3, [sp, #12]
 800bd30:	3307      	adds	r3, #7
 800bd32:	f023 0307 	bic.w	r3, r3, #7
 800bd36:	3308      	adds	r3, #8
 800bd38:	9303      	str	r3, [sp, #12]
 800bd3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd3c:	4433      	add	r3, r6
 800bd3e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd40:	e767      	b.n	800bc12 <_svfiprintf_r+0x4e>
 800bd42:	460c      	mov	r4, r1
 800bd44:	2001      	movs	r0, #1
 800bd46:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd4a:	e7a5      	b.n	800bc98 <_svfiprintf_r+0xd4>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	f04f 0c0a 	mov.w	ip, #10
 800bd52:	4619      	mov	r1, r3
 800bd54:	3401      	adds	r4, #1
 800bd56:	9305      	str	r3, [sp, #20]
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd5e:	3a30      	subs	r2, #48	; 0x30
 800bd60:	2a09      	cmp	r2, #9
 800bd62:	d903      	bls.n	800bd6c <_svfiprintf_r+0x1a8>
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d0c5      	beq.n	800bcf4 <_svfiprintf_r+0x130>
 800bd68:	9105      	str	r1, [sp, #20]
 800bd6a:	e7c3      	b.n	800bcf4 <_svfiprintf_r+0x130>
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	2301      	movs	r3, #1
 800bd70:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd74:	e7f0      	b.n	800bd58 <_svfiprintf_r+0x194>
 800bd76:	ab03      	add	r3, sp, #12
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	462a      	mov	r2, r5
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	4b10      	ldr	r3, [pc, #64]	; (800bdc0 <_svfiprintf_r+0x1fc>)
 800bd80:	a904      	add	r1, sp, #16
 800bd82:	f7fb ffff 	bl	8007d84 <_printf_float>
 800bd86:	1c42      	adds	r2, r0, #1
 800bd88:	4606      	mov	r6, r0
 800bd8a:	d1d6      	bne.n	800bd3a <_svfiprintf_r+0x176>
 800bd8c:	89ab      	ldrh	r3, [r5, #12]
 800bd8e:	065b      	lsls	r3, r3, #25
 800bd90:	f53f af2c 	bmi.w	800bbec <_svfiprintf_r+0x28>
 800bd94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd96:	b01d      	add	sp, #116	; 0x74
 800bd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9c:	ab03      	add	r3, sp, #12
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	462a      	mov	r2, r5
 800bda2:	4638      	mov	r0, r7
 800bda4:	4b06      	ldr	r3, [pc, #24]	; (800bdc0 <_svfiprintf_r+0x1fc>)
 800bda6:	a904      	add	r1, sp, #16
 800bda8:	f7fc fa88 	bl	80082bc <_printf_i>
 800bdac:	e7eb      	b.n	800bd86 <_svfiprintf_r+0x1c2>
 800bdae:	bf00      	nop
 800bdb0:	080118ac 	.word	0x080118ac
 800bdb4:	080118b2 	.word	0x080118b2
 800bdb8:	080118b6 	.word	0x080118b6
 800bdbc:	08007d85 	.word	0x08007d85
 800bdc0:	0800bb0d 	.word	0x0800bb0d

0800bdc4 <__sfputc_r>:
 800bdc4:	6893      	ldr	r3, [r2, #8]
 800bdc6:	b410      	push	{r4}
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	6093      	str	r3, [r2, #8]
 800bdce:	da07      	bge.n	800bde0 <__sfputc_r+0x1c>
 800bdd0:	6994      	ldr	r4, [r2, #24]
 800bdd2:	42a3      	cmp	r3, r4
 800bdd4:	db01      	blt.n	800bdda <__sfputc_r+0x16>
 800bdd6:	290a      	cmp	r1, #10
 800bdd8:	d102      	bne.n	800bde0 <__sfputc_r+0x1c>
 800bdda:	bc10      	pop	{r4}
 800bddc:	f7fd bda0 	b.w	8009920 <__swbuf_r>
 800bde0:	6813      	ldr	r3, [r2, #0]
 800bde2:	1c58      	adds	r0, r3, #1
 800bde4:	6010      	str	r0, [r2, #0]
 800bde6:	7019      	strb	r1, [r3, #0]
 800bde8:	4608      	mov	r0, r1
 800bdea:	bc10      	pop	{r4}
 800bdec:	4770      	bx	lr

0800bdee <__sfputs_r>:
 800bdee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	460f      	mov	r7, r1
 800bdf4:	4614      	mov	r4, r2
 800bdf6:	18d5      	adds	r5, r2, r3
 800bdf8:	42ac      	cmp	r4, r5
 800bdfa:	d101      	bne.n	800be00 <__sfputs_r+0x12>
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	e007      	b.n	800be10 <__sfputs_r+0x22>
 800be00:	463a      	mov	r2, r7
 800be02:	4630      	mov	r0, r6
 800be04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be08:	f7ff ffdc 	bl	800bdc4 <__sfputc_r>
 800be0c:	1c43      	adds	r3, r0, #1
 800be0e:	d1f3      	bne.n	800bdf8 <__sfputs_r+0xa>
 800be10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be14 <_vfiprintf_r>:
 800be14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be18:	460d      	mov	r5, r1
 800be1a:	4614      	mov	r4, r2
 800be1c:	4698      	mov	r8, r3
 800be1e:	4606      	mov	r6, r0
 800be20:	b09d      	sub	sp, #116	; 0x74
 800be22:	b118      	cbz	r0, 800be2c <_vfiprintf_r+0x18>
 800be24:	6983      	ldr	r3, [r0, #24]
 800be26:	b90b      	cbnz	r3, 800be2c <_vfiprintf_r+0x18>
 800be28:	f7fb fd46 	bl	80078b8 <__sinit>
 800be2c:	4b89      	ldr	r3, [pc, #548]	; (800c054 <_vfiprintf_r+0x240>)
 800be2e:	429d      	cmp	r5, r3
 800be30:	d11b      	bne.n	800be6a <_vfiprintf_r+0x56>
 800be32:	6875      	ldr	r5, [r6, #4]
 800be34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be36:	07d9      	lsls	r1, r3, #31
 800be38:	d405      	bmi.n	800be46 <_vfiprintf_r+0x32>
 800be3a:	89ab      	ldrh	r3, [r5, #12]
 800be3c:	059a      	lsls	r2, r3, #22
 800be3e:	d402      	bmi.n	800be46 <_vfiprintf_r+0x32>
 800be40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be42:	f7fb fdfc 	bl	8007a3e <__retarget_lock_acquire_recursive>
 800be46:	89ab      	ldrh	r3, [r5, #12]
 800be48:	071b      	lsls	r3, r3, #28
 800be4a:	d501      	bpl.n	800be50 <_vfiprintf_r+0x3c>
 800be4c:	692b      	ldr	r3, [r5, #16]
 800be4e:	b9eb      	cbnz	r3, 800be8c <_vfiprintf_r+0x78>
 800be50:	4629      	mov	r1, r5
 800be52:	4630      	mov	r0, r6
 800be54:	f7fd fdc8 	bl	80099e8 <__swsetup_r>
 800be58:	b1c0      	cbz	r0, 800be8c <_vfiprintf_r+0x78>
 800be5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be5c:	07dc      	lsls	r4, r3, #31
 800be5e:	d50e      	bpl.n	800be7e <_vfiprintf_r+0x6a>
 800be60:	f04f 30ff 	mov.w	r0, #4294967295
 800be64:	b01d      	add	sp, #116	; 0x74
 800be66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6a:	4b7b      	ldr	r3, [pc, #492]	; (800c058 <_vfiprintf_r+0x244>)
 800be6c:	429d      	cmp	r5, r3
 800be6e:	d101      	bne.n	800be74 <_vfiprintf_r+0x60>
 800be70:	68b5      	ldr	r5, [r6, #8]
 800be72:	e7df      	b.n	800be34 <_vfiprintf_r+0x20>
 800be74:	4b79      	ldr	r3, [pc, #484]	; (800c05c <_vfiprintf_r+0x248>)
 800be76:	429d      	cmp	r5, r3
 800be78:	bf08      	it	eq
 800be7a:	68f5      	ldreq	r5, [r6, #12]
 800be7c:	e7da      	b.n	800be34 <_vfiprintf_r+0x20>
 800be7e:	89ab      	ldrh	r3, [r5, #12]
 800be80:	0598      	lsls	r0, r3, #22
 800be82:	d4ed      	bmi.n	800be60 <_vfiprintf_r+0x4c>
 800be84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be86:	f7fb fddb 	bl	8007a40 <__retarget_lock_release_recursive>
 800be8a:	e7e9      	b.n	800be60 <_vfiprintf_r+0x4c>
 800be8c:	2300      	movs	r3, #0
 800be8e:	9309      	str	r3, [sp, #36]	; 0x24
 800be90:	2320      	movs	r3, #32
 800be92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be96:	2330      	movs	r3, #48	; 0x30
 800be98:	f04f 0901 	mov.w	r9, #1
 800be9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bea0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c060 <_vfiprintf_r+0x24c>
 800bea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bea8:	4623      	mov	r3, r4
 800beaa:	469a      	mov	sl, r3
 800beac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beb0:	b10a      	cbz	r2, 800beb6 <_vfiprintf_r+0xa2>
 800beb2:	2a25      	cmp	r2, #37	; 0x25
 800beb4:	d1f9      	bne.n	800beaa <_vfiprintf_r+0x96>
 800beb6:	ebba 0b04 	subs.w	fp, sl, r4
 800beba:	d00b      	beq.n	800bed4 <_vfiprintf_r+0xc0>
 800bebc:	465b      	mov	r3, fp
 800bebe:	4622      	mov	r2, r4
 800bec0:	4629      	mov	r1, r5
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7ff ff93 	bl	800bdee <__sfputs_r>
 800bec8:	3001      	adds	r0, #1
 800beca:	f000 80aa 	beq.w	800c022 <_vfiprintf_r+0x20e>
 800bece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bed0:	445a      	add	r2, fp
 800bed2:	9209      	str	r2, [sp, #36]	; 0x24
 800bed4:	f89a 3000 	ldrb.w	r3, [sl]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f000 80a2 	beq.w	800c022 <_vfiprintf_r+0x20e>
 800bede:	2300      	movs	r3, #0
 800bee0:	f04f 32ff 	mov.w	r2, #4294967295
 800bee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bee8:	f10a 0a01 	add.w	sl, sl, #1
 800beec:	9304      	str	r3, [sp, #16]
 800beee:	9307      	str	r3, [sp, #28]
 800bef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bef4:	931a      	str	r3, [sp, #104]	; 0x68
 800bef6:	4654      	mov	r4, sl
 800bef8:	2205      	movs	r2, #5
 800befa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800befe:	4858      	ldr	r0, [pc, #352]	; (800c060 <_vfiprintf_r+0x24c>)
 800bf00:	f7ff f91e 	bl	800b140 <memchr>
 800bf04:	9a04      	ldr	r2, [sp, #16]
 800bf06:	b9d8      	cbnz	r0, 800bf40 <_vfiprintf_r+0x12c>
 800bf08:	06d1      	lsls	r1, r2, #27
 800bf0a:	bf44      	itt	mi
 800bf0c:	2320      	movmi	r3, #32
 800bf0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf12:	0713      	lsls	r3, r2, #28
 800bf14:	bf44      	itt	mi
 800bf16:	232b      	movmi	r3, #43	; 0x2b
 800bf18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf20:	2b2a      	cmp	r3, #42	; 0x2a
 800bf22:	d015      	beq.n	800bf50 <_vfiprintf_r+0x13c>
 800bf24:	4654      	mov	r4, sl
 800bf26:	2000      	movs	r0, #0
 800bf28:	f04f 0c0a 	mov.w	ip, #10
 800bf2c:	9a07      	ldr	r2, [sp, #28]
 800bf2e:	4621      	mov	r1, r4
 800bf30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf34:	3b30      	subs	r3, #48	; 0x30
 800bf36:	2b09      	cmp	r3, #9
 800bf38:	d94e      	bls.n	800bfd8 <_vfiprintf_r+0x1c4>
 800bf3a:	b1b0      	cbz	r0, 800bf6a <_vfiprintf_r+0x156>
 800bf3c:	9207      	str	r2, [sp, #28]
 800bf3e:	e014      	b.n	800bf6a <_vfiprintf_r+0x156>
 800bf40:	eba0 0308 	sub.w	r3, r0, r8
 800bf44:	fa09 f303 	lsl.w	r3, r9, r3
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	46a2      	mov	sl, r4
 800bf4c:	9304      	str	r3, [sp, #16]
 800bf4e:	e7d2      	b.n	800bef6 <_vfiprintf_r+0xe2>
 800bf50:	9b03      	ldr	r3, [sp, #12]
 800bf52:	1d19      	adds	r1, r3, #4
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	9103      	str	r1, [sp, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	bfbb      	ittet	lt
 800bf5c:	425b      	neglt	r3, r3
 800bf5e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf62:	9307      	strge	r3, [sp, #28]
 800bf64:	9307      	strlt	r3, [sp, #28]
 800bf66:	bfb8      	it	lt
 800bf68:	9204      	strlt	r2, [sp, #16]
 800bf6a:	7823      	ldrb	r3, [r4, #0]
 800bf6c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf6e:	d10c      	bne.n	800bf8a <_vfiprintf_r+0x176>
 800bf70:	7863      	ldrb	r3, [r4, #1]
 800bf72:	2b2a      	cmp	r3, #42	; 0x2a
 800bf74:	d135      	bne.n	800bfe2 <_vfiprintf_r+0x1ce>
 800bf76:	9b03      	ldr	r3, [sp, #12]
 800bf78:	3402      	adds	r4, #2
 800bf7a:	1d1a      	adds	r2, r3, #4
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	9203      	str	r2, [sp, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	bfb8      	it	lt
 800bf84:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf88:	9305      	str	r3, [sp, #20]
 800bf8a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c064 <_vfiprintf_r+0x250>
 800bf8e:	2203      	movs	r2, #3
 800bf90:	4650      	mov	r0, sl
 800bf92:	7821      	ldrb	r1, [r4, #0]
 800bf94:	f7ff f8d4 	bl	800b140 <memchr>
 800bf98:	b140      	cbz	r0, 800bfac <_vfiprintf_r+0x198>
 800bf9a:	2340      	movs	r3, #64	; 0x40
 800bf9c:	eba0 000a 	sub.w	r0, r0, sl
 800bfa0:	fa03 f000 	lsl.w	r0, r3, r0
 800bfa4:	9b04      	ldr	r3, [sp, #16]
 800bfa6:	3401      	adds	r4, #1
 800bfa8:	4303      	orrs	r3, r0
 800bfaa:	9304      	str	r3, [sp, #16]
 800bfac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfb0:	2206      	movs	r2, #6
 800bfb2:	482d      	ldr	r0, [pc, #180]	; (800c068 <_vfiprintf_r+0x254>)
 800bfb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfb8:	f7ff f8c2 	bl	800b140 <memchr>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d03f      	beq.n	800c040 <_vfiprintf_r+0x22c>
 800bfc0:	4b2a      	ldr	r3, [pc, #168]	; (800c06c <_vfiprintf_r+0x258>)
 800bfc2:	bb1b      	cbnz	r3, 800c00c <_vfiprintf_r+0x1f8>
 800bfc4:	9b03      	ldr	r3, [sp, #12]
 800bfc6:	3307      	adds	r3, #7
 800bfc8:	f023 0307 	bic.w	r3, r3, #7
 800bfcc:	3308      	adds	r3, #8
 800bfce:	9303      	str	r3, [sp, #12]
 800bfd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd2:	443b      	add	r3, r7
 800bfd4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd6:	e767      	b.n	800bea8 <_vfiprintf_r+0x94>
 800bfd8:	460c      	mov	r4, r1
 800bfda:	2001      	movs	r0, #1
 800bfdc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfe0:	e7a5      	b.n	800bf2e <_vfiprintf_r+0x11a>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	f04f 0c0a 	mov.w	ip, #10
 800bfe8:	4619      	mov	r1, r3
 800bfea:	3401      	adds	r4, #1
 800bfec:	9305      	str	r3, [sp, #20]
 800bfee:	4620      	mov	r0, r4
 800bff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bff4:	3a30      	subs	r2, #48	; 0x30
 800bff6:	2a09      	cmp	r2, #9
 800bff8:	d903      	bls.n	800c002 <_vfiprintf_r+0x1ee>
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d0c5      	beq.n	800bf8a <_vfiprintf_r+0x176>
 800bffe:	9105      	str	r1, [sp, #20]
 800c000:	e7c3      	b.n	800bf8a <_vfiprintf_r+0x176>
 800c002:	4604      	mov	r4, r0
 800c004:	2301      	movs	r3, #1
 800c006:	fb0c 2101 	mla	r1, ip, r1, r2
 800c00a:	e7f0      	b.n	800bfee <_vfiprintf_r+0x1da>
 800c00c:	ab03      	add	r3, sp, #12
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	462a      	mov	r2, r5
 800c012:	4630      	mov	r0, r6
 800c014:	4b16      	ldr	r3, [pc, #88]	; (800c070 <_vfiprintf_r+0x25c>)
 800c016:	a904      	add	r1, sp, #16
 800c018:	f7fb feb4 	bl	8007d84 <_printf_float>
 800c01c:	4607      	mov	r7, r0
 800c01e:	1c78      	adds	r0, r7, #1
 800c020:	d1d6      	bne.n	800bfd0 <_vfiprintf_r+0x1bc>
 800c022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c024:	07d9      	lsls	r1, r3, #31
 800c026:	d405      	bmi.n	800c034 <_vfiprintf_r+0x220>
 800c028:	89ab      	ldrh	r3, [r5, #12]
 800c02a:	059a      	lsls	r2, r3, #22
 800c02c:	d402      	bmi.n	800c034 <_vfiprintf_r+0x220>
 800c02e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c030:	f7fb fd06 	bl	8007a40 <__retarget_lock_release_recursive>
 800c034:	89ab      	ldrh	r3, [r5, #12]
 800c036:	065b      	lsls	r3, r3, #25
 800c038:	f53f af12 	bmi.w	800be60 <_vfiprintf_r+0x4c>
 800c03c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c03e:	e711      	b.n	800be64 <_vfiprintf_r+0x50>
 800c040:	ab03      	add	r3, sp, #12
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	462a      	mov	r2, r5
 800c046:	4630      	mov	r0, r6
 800c048:	4b09      	ldr	r3, [pc, #36]	; (800c070 <_vfiprintf_r+0x25c>)
 800c04a:	a904      	add	r1, sp, #16
 800c04c:	f7fc f936 	bl	80082bc <_printf_i>
 800c050:	e7e4      	b.n	800c01c <_vfiprintf_r+0x208>
 800c052:	bf00      	nop
 800c054:	08011474 	.word	0x08011474
 800c058:	08011494 	.word	0x08011494
 800c05c:	08011454 	.word	0x08011454
 800c060:	080118ac 	.word	0x080118ac
 800c064:	080118b2 	.word	0x080118b2
 800c068:	080118b6 	.word	0x080118b6
 800c06c:	08007d85 	.word	0x08007d85
 800c070:	0800bdef 	.word	0x0800bdef

0800c074 <_read_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	4604      	mov	r4, r0
 800c078:	4608      	mov	r0, r1
 800c07a:	4611      	mov	r1, r2
 800c07c:	2200      	movs	r2, #0
 800c07e:	4d05      	ldr	r5, [pc, #20]	; (800c094 <_read_r+0x20>)
 800c080:	602a      	str	r2, [r5, #0]
 800c082:	461a      	mov	r2, r3
 800c084:	f7f5 f98c 	bl	80013a0 <_read>
 800c088:	1c43      	adds	r3, r0, #1
 800c08a:	d102      	bne.n	800c092 <_read_r+0x1e>
 800c08c:	682b      	ldr	r3, [r5, #0]
 800c08e:	b103      	cbz	r3, 800c092 <_read_r+0x1e>
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	bd38      	pop	{r3, r4, r5, pc}
 800c094:	20001d3c 	.word	0x20001d3c

0800c098 <nan>:
 800c098:	2000      	movs	r0, #0
 800c09a:	4901      	ldr	r1, [pc, #4]	; (800c0a0 <nan+0x8>)
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	7ff80000 	.word	0x7ff80000

0800c0a4 <strncmp>:
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	b510      	push	{r4, lr}
 800c0a8:	b172      	cbz	r2, 800c0c8 <strncmp+0x24>
 800c0aa:	3901      	subs	r1, #1
 800c0ac:	1884      	adds	r4, r0, r2
 800c0ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c0b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c0b6:	4290      	cmp	r0, r2
 800c0b8:	d101      	bne.n	800c0be <strncmp+0x1a>
 800c0ba:	42a3      	cmp	r3, r4
 800c0bc:	d101      	bne.n	800c0c2 <strncmp+0x1e>
 800c0be:	1a80      	subs	r0, r0, r2
 800c0c0:	bd10      	pop	{r4, pc}
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d1f3      	bne.n	800c0ae <strncmp+0xa>
 800c0c6:	e7fa      	b.n	800c0be <strncmp+0x1a>
 800c0c8:	4610      	mov	r0, r2
 800c0ca:	e7f9      	b.n	800c0c0 <strncmp+0x1c>

0800c0cc <__ascii_wctomb>:
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	4608      	mov	r0, r1
 800c0d0:	b141      	cbz	r1, 800c0e4 <__ascii_wctomb+0x18>
 800c0d2:	2aff      	cmp	r2, #255	; 0xff
 800c0d4:	d904      	bls.n	800c0e0 <__ascii_wctomb+0x14>
 800c0d6:	228a      	movs	r2, #138	; 0x8a
 800c0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0dc:	601a      	str	r2, [r3, #0]
 800c0de:	4770      	bx	lr
 800c0e0:	2001      	movs	r0, #1
 800c0e2:	700a      	strb	r2, [r1, #0]
 800c0e4:	4770      	bx	lr
	...

0800c0e8 <__assert_func>:
 800c0e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0ea:	4614      	mov	r4, r2
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	4b09      	ldr	r3, [pc, #36]	; (800c114 <__assert_func+0x2c>)
 800c0f0:	4605      	mov	r5, r0
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68d8      	ldr	r0, [r3, #12]
 800c0f6:	b14c      	cbz	r4, 800c10c <__assert_func+0x24>
 800c0f8:	4b07      	ldr	r3, [pc, #28]	; (800c118 <__assert_func+0x30>)
 800c0fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0fe:	9100      	str	r1, [sp, #0]
 800c100:	462b      	mov	r3, r5
 800c102:	4906      	ldr	r1, [pc, #24]	; (800c11c <__assert_func+0x34>)
 800c104:	f000 f80e 	bl	800c124 <fiprintf>
 800c108:	f000 f889 	bl	800c21e <abort>
 800c10c:	4b04      	ldr	r3, [pc, #16]	; (800c120 <__assert_func+0x38>)
 800c10e:	461c      	mov	r4, r3
 800c110:	e7f3      	b.n	800c0fa <__assert_func+0x12>
 800c112:	bf00      	nop
 800c114:	2000002c 	.word	0x2000002c
 800c118:	080118bd 	.word	0x080118bd
 800c11c:	080118ca 	.word	0x080118ca
 800c120:	080118f8 	.word	0x080118f8

0800c124 <fiprintf>:
 800c124:	b40e      	push	{r1, r2, r3}
 800c126:	b503      	push	{r0, r1, lr}
 800c128:	4601      	mov	r1, r0
 800c12a:	ab03      	add	r3, sp, #12
 800c12c:	4805      	ldr	r0, [pc, #20]	; (800c144 <fiprintf+0x20>)
 800c12e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c132:	6800      	ldr	r0, [r0, #0]
 800c134:	9301      	str	r3, [sp, #4]
 800c136:	f7ff fe6d 	bl	800be14 <_vfiprintf_r>
 800c13a:	b002      	add	sp, #8
 800c13c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c140:	b003      	add	sp, #12
 800c142:	4770      	bx	lr
 800c144:	2000002c 	.word	0x2000002c

0800c148 <_fstat_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	2300      	movs	r3, #0
 800c14c:	4d06      	ldr	r5, [pc, #24]	; (800c168 <_fstat_r+0x20>)
 800c14e:	4604      	mov	r4, r0
 800c150:	4608      	mov	r0, r1
 800c152:	4611      	mov	r1, r2
 800c154:	602b      	str	r3, [r5, #0]
 800c156:	f7f5 f94b 	bl	80013f0 <_fstat>
 800c15a:	1c43      	adds	r3, r0, #1
 800c15c:	d102      	bne.n	800c164 <_fstat_r+0x1c>
 800c15e:	682b      	ldr	r3, [r5, #0]
 800c160:	b103      	cbz	r3, 800c164 <_fstat_r+0x1c>
 800c162:	6023      	str	r3, [r4, #0]
 800c164:	bd38      	pop	{r3, r4, r5, pc}
 800c166:	bf00      	nop
 800c168:	20001d3c 	.word	0x20001d3c

0800c16c <_isatty_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	2300      	movs	r3, #0
 800c170:	4d05      	ldr	r5, [pc, #20]	; (800c188 <_isatty_r+0x1c>)
 800c172:	4604      	mov	r4, r0
 800c174:	4608      	mov	r0, r1
 800c176:	602b      	str	r3, [r5, #0]
 800c178:	f7f5 f949 	bl	800140e <_isatty>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d102      	bne.n	800c186 <_isatty_r+0x1a>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	b103      	cbz	r3, 800c186 <_isatty_r+0x1a>
 800c184:	6023      	str	r3, [r4, #0]
 800c186:	bd38      	pop	{r3, r4, r5, pc}
 800c188:	20001d3c 	.word	0x20001d3c

0800c18c <memmove>:
 800c18c:	4288      	cmp	r0, r1
 800c18e:	b510      	push	{r4, lr}
 800c190:	eb01 0402 	add.w	r4, r1, r2
 800c194:	d902      	bls.n	800c19c <memmove+0x10>
 800c196:	4284      	cmp	r4, r0
 800c198:	4623      	mov	r3, r4
 800c19a:	d807      	bhi.n	800c1ac <memmove+0x20>
 800c19c:	1e43      	subs	r3, r0, #1
 800c19e:	42a1      	cmp	r1, r4
 800c1a0:	d008      	beq.n	800c1b4 <memmove+0x28>
 800c1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1aa:	e7f8      	b.n	800c19e <memmove+0x12>
 800c1ac:	4601      	mov	r1, r0
 800c1ae:	4402      	add	r2, r0
 800c1b0:	428a      	cmp	r2, r1
 800c1b2:	d100      	bne.n	800c1b6 <memmove+0x2a>
 800c1b4:	bd10      	pop	{r4, pc}
 800c1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1be:	e7f7      	b.n	800c1b0 <memmove+0x24>

0800c1c0 <_realloc_r>:
 800c1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c4:	4680      	mov	r8, r0
 800c1c6:	4614      	mov	r4, r2
 800c1c8:	460e      	mov	r6, r1
 800c1ca:	b921      	cbnz	r1, 800c1d6 <_realloc_r+0x16>
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d2:	f7fb bcc5 	b.w	8007b60 <_malloc_r>
 800c1d6:	b92a      	cbnz	r2, 800c1e4 <_realloc_r+0x24>
 800c1d8:	f7fb fc5a 	bl	8007a90 <_free_r>
 800c1dc:	4625      	mov	r5, r4
 800c1de:	4628      	mov	r0, r5
 800c1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e4:	f000 f822 	bl	800c22c <_malloc_usable_size_r>
 800c1e8:	4284      	cmp	r4, r0
 800c1ea:	4607      	mov	r7, r0
 800c1ec:	d802      	bhi.n	800c1f4 <_realloc_r+0x34>
 800c1ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1f2:	d812      	bhi.n	800c21a <_realloc_r+0x5a>
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	4640      	mov	r0, r8
 800c1f8:	f7fb fcb2 	bl	8007b60 <_malloc_r>
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	2800      	cmp	r0, #0
 800c200:	d0ed      	beq.n	800c1de <_realloc_r+0x1e>
 800c202:	42bc      	cmp	r4, r7
 800c204:	4622      	mov	r2, r4
 800c206:	4631      	mov	r1, r6
 800c208:	bf28      	it	cs
 800c20a:	463a      	movcs	r2, r7
 800c20c:	f7fb fc2a 	bl	8007a64 <memcpy>
 800c210:	4631      	mov	r1, r6
 800c212:	4640      	mov	r0, r8
 800c214:	f7fb fc3c 	bl	8007a90 <_free_r>
 800c218:	e7e1      	b.n	800c1de <_realloc_r+0x1e>
 800c21a:	4635      	mov	r5, r6
 800c21c:	e7df      	b.n	800c1de <_realloc_r+0x1e>

0800c21e <abort>:
 800c21e:	2006      	movs	r0, #6
 800c220:	b508      	push	{r3, lr}
 800c222:	f000 f833 	bl	800c28c <raise>
 800c226:	2001      	movs	r0, #1
 800c228:	f7f5 f8b0 	bl	800138c <_exit>

0800c22c <_malloc_usable_size_r>:
 800c22c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c230:	1f18      	subs	r0, r3, #4
 800c232:	2b00      	cmp	r3, #0
 800c234:	bfbc      	itt	lt
 800c236:	580b      	ldrlt	r3, [r1, r0]
 800c238:	18c0      	addlt	r0, r0, r3
 800c23a:	4770      	bx	lr

0800c23c <_raise_r>:
 800c23c:	291f      	cmp	r1, #31
 800c23e:	b538      	push	{r3, r4, r5, lr}
 800c240:	4604      	mov	r4, r0
 800c242:	460d      	mov	r5, r1
 800c244:	d904      	bls.n	800c250 <_raise_r+0x14>
 800c246:	2316      	movs	r3, #22
 800c248:	6003      	str	r3, [r0, #0]
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c252:	b112      	cbz	r2, 800c25a <_raise_r+0x1e>
 800c254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c258:	b94b      	cbnz	r3, 800c26e <_raise_r+0x32>
 800c25a:	4620      	mov	r0, r4
 800c25c:	f000 f830 	bl	800c2c0 <_getpid_r>
 800c260:	462a      	mov	r2, r5
 800c262:	4601      	mov	r1, r0
 800c264:	4620      	mov	r0, r4
 800c266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c26a:	f000 b817 	b.w	800c29c <_kill_r>
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d00a      	beq.n	800c288 <_raise_r+0x4c>
 800c272:	1c59      	adds	r1, r3, #1
 800c274:	d103      	bne.n	800c27e <_raise_r+0x42>
 800c276:	2316      	movs	r3, #22
 800c278:	6003      	str	r3, [r0, #0]
 800c27a:	2001      	movs	r0, #1
 800c27c:	e7e7      	b.n	800c24e <_raise_r+0x12>
 800c27e:	2400      	movs	r4, #0
 800c280:	4628      	mov	r0, r5
 800c282:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c286:	4798      	blx	r3
 800c288:	2000      	movs	r0, #0
 800c28a:	e7e0      	b.n	800c24e <_raise_r+0x12>

0800c28c <raise>:
 800c28c:	4b02      	ldr	r3, [pc, #8]	; (800c298 <raise+0xc>)
 800c28e:	4601      	mov	r1, r0
 800c290:	6818      	ldr	r0, [r3, #0]
 800c292:	f7ff bfd3 	b.w	800c23c <_raise_r>
 800c296:	bf00      	nop
 800c298:	2000002c 	.word	0x2000002c

0800c29c <_kill_r>:
 800c29c:	b538      	push	{r3, r4, r5, lr}
 800c29e:	2300      	movs	r3, #0
 800c2a0:	4d06      	ldr	r5, [pc, #24]	; (800c2bc <_kill_r+0x20>)
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	4608      	mov	r0, r1
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	602b      	str	r3, [r5, #0]
 800c2aa:	f7f5 f85f 	bl	800136c <_kill>
 800c2ae:	1c43      	adds	r3, r0, #1
 800c2b0:	d102      	bne.n	800c2b8 <_kill_r+0x1c>
 800c2b2:	682b      	ldr	r3, [r5, #0]
 800c2b4:	b103      	cbz	r3, 800c2b8 <_kill_r+0x1c>
 800c2b6:	6023      	str	r3, [r4, #0]
 800c2b8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20001d3c 	.word	0x20001d3c

0800c2c0 <_getpid_r>:
 800c2c0:	f7f5 b84d 	b.w	800135e <_getpid>

0800c2c4 <_init>:
 800c2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c6:	bf00      	nop
 800c2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ca:	bc08      	pop	{r3}
 800c2cc:	469e      	mov	lr, r3
 800c2ce:	4770      	bx	lr

0800c2d0 <_fini>:
 800c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d2:	bf00      	nop
 800c2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2d6:	bc08      	pop	{r3}
 800c2d8:	469e      	mov	lr, r3
 800c2da:	4770      	bx	lr
